{"version":3,"sources":["views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/components/CollectibleCard/styles.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/sum.js","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","views/Nft/market/hooks/useGetLowestPrice.ts","../node_modules/lodash/capitalize.js","../node_modules/lodash/_baseSum.js","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx","components/PageHeader/PageHeader.tsx","../node_modules/lodash/orderBy.js","views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx"],"names":["BaseSubMenu","styled","SubMenuItems","theme","colors","cardBorder","StyledBannerImage","div","attrs","alt","src","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","children","props","flexDirection","mb","position","pb","BannerImage","bottom","left","alignItems","BNBAmountLabel","amount","width","mx","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","fontSize","color","MetaRow","title","justifyContent","maxWidth","ellipsis","StyledCollectibleCard","Card","lg","LowestPriceMetaRow","lowestPrice","isFetching","t","useTranslation","height","useGetCollectionDistributionPB","useState","data","state","setState","useEffect","a","prevState","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","baseSum","require","identity","module","exports","array","length","BackLink","RouterLink","primary","TopBar","to","nftsBaseUrl","SearchBar","LowestPriceStatBoxItem","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","StatBox","symbol","stat","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","MarketPageHeader","large","AvatarImage","MarketPageTitle","name","description","formatNumber","Number","address","Container","items","activeItem","mt","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","value","toString","useGetLowestPriceFromBunnyId","setIsFetching","getNftsMarketData","otherId","isTradable","response","tokenMarketData","currentAskPrice","useGetLowestPriceFromNft","isPancakeBunny","toLowerCase","bunnyIdAttr","upperFirst","string","iteratee","result","index","current","CollapsibleCard","initialOpenState","isOpen","setIsOpen","p","as","variant","scale","onClick","StyledSortButton","button","secondary","TableWrapper","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","mr","LowestPriceCell","PancakeBunniesTraits","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","push","useHistory","getNftsFromCollectionApi","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","textAlign","type","currentValue","map","count","percentage","image","thumbnail","times","bunnyCnt","CollectionTraits","total","traitValues","reduce","accum","traitValue","rarity","sortType","capitalize","prevRaritySort","orderBy","Traits","dispatch","useAppDispatch","useGetCollection","fetchCollection","py","Outer","Box","background","gradients","bubblegum","Inner","PageHeader","baseOrderBy","isArray","iteratees","orders","guard","StatBoxItem","Flex","invertedContrast","radii","card","ResultStatus","SubMenu","input","inputSecondary","default","AddressLink","Text","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","isAddress","hasResults","FOUND","NOT_FOUND","validAddressHandler","placeholder","subject","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","px","useTheme","isDark","borderColor","history","gridGap","gridTemplateColumns"],"mappings":"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","file":"static/js/10.bf984ec2.chunk.js","sourcesContent":["import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import React, { ReactElement } from 'react'\r\nimport {\r\n  Card,\r\n  BinanceIcon,\r\n  Box,\r\n  BoxProps,\r\n  CameraIcon,\r\n  Flex,\r\n  FlexProps,\r\n  SellIcon,\r\n  Text,\r\n  WalletFilledIcon,\r\n  Skeleton,\r\n} from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport styled from 'styled-components'\r\n\r\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\r\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\r\n    {children}\r\n  </Box>\r\n)\r\n\r\ninterface BNBAmountLabelProps extends FlexProps {\r\n  amount: number\r\n}\r\n\r\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\r\n  <Flex alignItems=\"center\" {...props}>\r\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\r\n    <Text fontWeight=\"600\">\r\n      {amount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 4,\r\n      })}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\ninterface CostLabelProps extends FlexProps {\r\n  cost: number\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" {...props}>\r\n      {priceInUsd > 0 && (\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}</Text>\r\n      )}\r\n      <BNBAmountLabel amount={cost} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface MetaRowProps extends FlexProps {\r\n  title: string\r\n}\r\n\r\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\r\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\r\n      {title}\r\n    </Text>\r\n    <Box>{children}</Box>\r\n  </Flex>\r\n)\r\n\r\nexport interface NftTagProps extends FlexProps {\r\n  icon?: ReactElement\r\n  color?: string\r\n}\r\n\r\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\r\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\r\n    {icon}\r\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\r\n      {children}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\r\n      {t('Profile')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\r\n      {t('Wallet')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\r\n      {t('Selling')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const StyledCollectibleCard = styled(Card)`\r\n  border-radius: 8px;\r\n  max-width: 320px;\r\n  transition: opacity 200ms;\r\n\r\n  & > div {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    &:hover {\r\n      cursor: pointer;\r\n      opacity: 0.6;\r\n    }\r\n  }\r\n`\r\ninterface LowestPriceMetaRowProps {\r\n  lowestPrice: number\r\n  isFetching: boolean\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (!isFetching && !lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <MetaRow title={t('Lowest price')}>\r\n      {isFetching ? (\r\n        <Skeleton height=\"24px\" width=\"30px\" />\r\n      ) : (\r\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\r\n      )}\r\n    </MetaRow>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n    {\r\n      label: t('Activity'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\nexport interface LowestNftPrice {\r\n  isFetching: boolean\r\n  lowestPrice: number\r\n}\r\n\r\nconst getBunnyIdFromNft = (nft: NftToken): string => {\r\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\r\n  return bunnyId ? bunnyId.toString() : null\r\n}\r\n\r\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (bunnyId) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [bunnyId])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n\r\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData(\r\n          { otherId: bunnyIdAttr, isTradable: true },\r\n          1,\r\n          'currentAskPrice',\r\n          'asc',\r\n        )\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (isPancakeBunny && nft) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [isPancakeBunny, nft])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React, { useState } from 'react'\r\nimport {\r\n  CardProps,\r\n  CardHeader,\r\n  Card,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n} from '@pancakeswap/uikit'\r\n\r\ninterface CollapsibleCardProps extends CardProps {\r\n  initialOpenState?: boolean\r\n  title: string\r\n}\r\n\r\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\r\n  const [isOpen, setIsOpen] = useState(initialOpenState)\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\">{title}</Heading>\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\r\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\r\n          </IconButton>\r\n        </Flex>\r\n      </CardHeader>\r\n      {isOpen && children}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CollapsibleCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\r\n\r\nexport const StyledSortButton = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const TableWrapper = styled.div`\r\n  -webkit-overflow-scrolling: touch;\r\n  min-width: 320px;\r\n  overflow-x: auto;\r\n`\r\n\r\nexport const NftImage = styled(Image)`\r\n  flex: none;\r\n  & > img {\r\n    border-radius: 8px;\r\n  }\r\n`\r\n\r\nexport const ClickableRow = styled.tr`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    td {\r\n      opacity: 0.65;\r\n    }\r\n  }\r\n`\r\n\r\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\r\n  <Flex alignItems=\"center\">\r\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\r\n    <Text>{name}</Text>\r\n  </Flex>\r\n)\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router'\r\nimport times from 'lodash/times'\r\nimport sum from 'lodash/sum'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\r\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\r\nimport { sortBunniesByRarityBuilder } from './utils'\r\nimport { nftsBaseUrl } from '../../constants'\r\nimport { SortType } from '../../types'\r\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\r\n\r\ninterface PancakeBunniesTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\r\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\r\n        <Skeleton height=\"24px\" width=\"48px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  if (!lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\r\n}\r\n\r\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\r\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\r\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\r\n  const { t } = useTranslation()\r\n  const { push } = useHistory()\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\r\n      setTokenApiResponse(apiResponse)\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setTokenApiResponse])\r\n\r\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\r\n\r\n  const sortedBunnieKeys = useMemo(() => {\r\n    if (!tokenApiResponse) return []\r\n\r\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\r\n  }, [raritySort, tokenApiResponse])\r\n\r\n  const toggleRaritySort = () => {\r\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tokenApiResponse ? (\r\n        <CollapsibleCard title={t('Bunny Id')}>\r\n          <TableWrapper>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th textAlign=\"left\">{t('Name')}</Th>\r\n                  <Th>{t('Count')}</Th>\r\n                  <Th>\r\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                      <Flex alignItems=\"center\">\r\n                        {t('Rarity')}\r\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\r\n                      </Flex>\r\n                    </StyledSortButton>\r\n                  </Th>\r\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {sortedBunnieKeys.map((bunnyId) => {\r\n                  const nft = tokenApiResponse.data[bunnyId]\r\n                  if (!nft) {\r\n                    // Some bunnies don't exist on testnet\r\n                    return null\r\n                  }\r\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\r\n                  const percentage = (count / totalMinted) * 100\r\n                  const handleClick = () => {\r\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\r\n                  }\r\n\r\n                  return (\r\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\r\n                      <Td>\r\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\r\n                      </Td>\r\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\r\n                      <Td textAlign=\"right\" width=\"100px\">\r\n                        <LowestPriceCell bunnyId={bunnyId} />\r\n                      </Td>\r\n                    </ClickableRow>\r\n                  )\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </TableWrapper>\r\n        </CollapsibleCard>\r\n      ) : (\r\n        <CollapsibleCard title={t('Loading...')}>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign=\"left\">{t('Name')}</Th>\r\n                <Th>{t('Count')}</Th>\r\n                <Th>{t('Rarity')}</Th>\r\n                <Th>{t('Lowest')}</Th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {times(19).map((bunnyCnt) => (\r\n                <tr key={bunnyCnt}>\r\n                  <Td>\r\n                    <Flex alignItems=\"center\">\r\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\r\n                      <Skeleton width=\"100px\" />\r\n                    </Flex>\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </CollapsibleCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesTraits\r\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\n\r\ntype sortBuilder = {\r\n  data: ApiResponseCollectionTokens\r\n  raritySort: string\r\n}\r\n\r\nexport const sortBunniesByRarityBuilder =\r\n  ({ raritySort, data }: sortBuilder) =>\r\n  (bunnyIdA, bunnyIdB) => {\r\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\r\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\r\n\r\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\r\n  }\r\n","import React, { useState } from 'react'\r\nimport times from 'lodash/times'\r\nimport capitalize from 'lodash/capitalize'\r\nimport sum from 'lodash/sum'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SortType } from '../../types'\r\nimport { StyledSortButton, TableWrapper } from './styles'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\n\r\ninterface CollectionTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\r\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\r\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\r\n  const { t } = useTranslation()\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <CollapsibleCard title={t('Loading...')}>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <Th textAlign=\"left\">{t('Name')}</Th>\r\n              <Th width=\"100px\">{t('Count')}</Th>\r\n              <Th width=\"160px\">{t('Rarity')}</Th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {times(19).map((bunnyCnt) => (\r\n              <tr key={bunnyCnt}>\r\n                <Td>\r\n                  <Skeleton width=\"100px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </CollapsibleCard>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        Object.keys(data).map((traitType, index) => {\r\n          const total = sum(Object.values(data[traitType]))\r\n\r\n          // Parse the distribution values into an array to make it easier to sort\r\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\r\n            (accum, traitValue) => {\r\n              const count = data[traitType][traitValue]\r\n              const rarity = (count / total) * 100\r\n\r\n              return [...accum, { value: traitValue, count, rarity }]\r\n            },\r\n            [],\r\n          )\r\n          const sortType = raritySort[traitType] || 'desc'\r\n\r\n          const toggleRaritySort = () => {\r\n            setRaritySort((prevRaritySort) => {\r\n              if (!prevRaritySort[traitType]) {\r\n                return {\r\n                  ...prevRaritySort,\r\n                  [traitType]: 'asc',\r\n                }\r\n              }\r\n\r\n              return {\r\n                ...prevRaritySort,\r\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\r\n              }\r\n            })\r\n          }\r\n\r\n          return (\r\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\r\n              <TableWrapper>\r\n                <Table>\r\n                  <thead>\r\n                    <tr>\r\n                      <Th textAlign=\"left\">{t('Name')}</Th>\r\n                      <Th width=\"100px\">{t('Count')}</Th>\r\n                      <Th width=\"160px\">\r\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                          <Flex alignItems=\"center\">\r\n                            {t('Rarity')}\r\n                            {raritySort[traitType] === 'asc' ? (\r\n                              <ArrowUpIcon color=\"secondary\" />\r\n                            ) : (\r\n                              <ArrowDownIcon color=\"secondary\" />\r\n                            )}\r\n                          </Flex>\r\n                        </StyledSortButton>\r\n                      </Th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\r\n                      return (\r\n                        <tr key={value}>\r\n                          <Td>{capitalize(value)}</Td>\r\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </TableWrapper>\r\n            </CollapsibleCard>\r\n          )\r\n        })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionTraits\r\n","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport Container from 'components/Layout/Container'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport Header from '../Header'\r\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport CollectionTraits from './CollectionTraits'\r\n\r\nconst Traits = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n\r\n  useEffect(() => {\r\n    if (collectionAddress) {\r\n      dispatch(fetchCollection(collectionAddress))\r\n    }\r\n  }, [collectionAddress, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      <Container py=\"40px\">\r\n        {collectionAddress === pancakeBunniesAddress ? (\r\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\r\n        ) : (\r\n          <CollectionTraits collectionAddress={collectionAddress} />\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Traits\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\nimport { PageHeaderProps } from './types'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n"],"sourceRoot":""}
{"version":3,"sources":["views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","components/Select/Select.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/capitalize.js","views/Nft/market/Collection/Items/PancakeBunniesCollectionNfts.tsx","components/ScrollToTopButton/index.tsx","views/Nft/market/components/Filters/ListFilter/styles.tsx","views/Nft/market/components/Filters/ListFilter/index.tsx","views/Nft/market/Collection/Items/ClearAllButton.tsx","views/Nft/market/Collection/Items/SortSelect.tsx","views/Nft/market/Collection/Items/Filters.tsx","views/Nft/market/Collection/config.ts","views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/FilteredCollectionNfts.tsx","views/Nft/market/Collection/Items/CollectionWrapper.tsx","views/Nft/market/Collection/Items/index.tsx","components/PageHeader/PageHeader.tsx","../node_modules/lodash/orderBy.js","views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx"],"names":["BaseSubMenu","styled","SubMenuItems","theme","colors","cardBorder","StyledBannerImage","div","attrs","alt","src","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","children","props","flexDirection","mb","position","pb","BannerImage","bottom","left","alignItems","DropDownHeader","shadows","inset","inputSecondary","input","DropDownListContainer","zIndices","dropdown","DropDownContainer","Box","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onOptionChange","defaultOptionIndex","dropdownRef","useRef","useState","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","useEffect","handleClickOutside","document","addEventListener","removeEventListener","onClick","label","color","ref","map","option","index","selectedIndex","useGetCollectionDistributionPB","isFetching","data","state","setState","a","prevState","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","BackLink","RouterLink","primary","TopBar","t","useTranslation","justifyContent","to","nftsBaseUrl","width","SearchBar","LowestPriceStatBoxItem","lowestPrice","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","StatBox","title","symbol","stat","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","href","MarketPageHeader","large","AvatarImage","MarketPageTitle","name","description","formatNumber","Number","address","Container","items","activeItem","mt","useAllPancakeBunnyNfts","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","getNftsFromCollectionApi","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","bunnyId","tokenId","collectionName","image","attributes","traitType","value","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","toString","require","upperFirst","module","exports","string","toLowerCase","PancakeBunniesCollectionNfts","sortBy","sortedNfts","orderBy","nft","length","gridGap","gridTemplateColumns","GridPlaceholder","FixedContainer","ScrollToTopButton","visible","setVisible","toggleVisible","scrolled","documentElement","scrollTop","window","style","display","variant","endIcon","scrollTo","top","behavior","StyledItemRow","Flex","ItemImage","Image","ItemRow","item","isSelected","onSelect","px","py","height","mr","flex","count","scale","checked","onChange","noop","ml","SearchWrapper","FilterButton","TriggerButton","Button","hasItem","CloseButton","IconButton","ListFilter","query","setQuery","orderKey","orderDir","orderState","setOrderState","wrapperRef","menuRef","nftFilters","useGetNftFilters","nftFilterState","useGetNftFilterLoadingState","dispatch","useAppDispatch","traitFilter","isTraitSelected","filteredItems","filter","indexOf","toggleSort","newOrderKey","prevOrderDir","target","current","contains","component","disabled","NftFilterLoadingState","LOADING","placement","maxWidth","p","startIcon","placeholder","evt","fontSize","fontWeight","textTransform","overflowY","filteredItem","isItemSelected","attr","filterNftsFromCollection","handleItemSelect","textAlign","newFilters","ClearAllButton","removeAllFilters","SortSelect","selectedOrder","useGetNftOrdering","sortByItems","field","direction","findIndex","newOption","setOrdering","GridContainer","Grid","lg","xxl","FilterByTitle","Text","FilterByControls","SortByTitle","SortByControls","ScrollableFlexContainer","Filters","showOnlyNftsOnSale","useGetNftShowOnlyOnSale","activeButtonIndex","setActiveButtonIndex","attrsByType","reduce","accum","uniqueTraitTypes","bold","activeIndex","onItemClick","newIndex","setShowOnlyOnSale","showOnlyOnSale","capitalize","isEmpty","REQUEST_SIZE","CollectionNfts","page","setPage","skip","setSkip","nfts","setNfts","isFetchingFilteredNfts","setIsFetchingFilteredNfts","collectionNfts","useNftsFromCollection","nftFilterLoadingState","orderField","orderDirection","fetchApiData","marketData","apiRequestPromises","marketNft","getNftApi","Promise","all","apiResponses","responsesWithMarketData","apiNft","i","combinedNfts","uniqBy","fetchMarketData","getNftsMarketData","isTradable","subgraphRes","fetchNftsFromCollections","size","nftsToShow","isNotLastPage","resultsAmount","currentAskPriceAsNumber","prevPage","spin","FilteredCollectionNfts","numToShow","setNumToShow","orderedNfts","Infinity","tokenIdNumber","isFinite","parseInt","filteredNfts","slice","prevNumToShow","CollectionWrapper","createPortal","body","Items","setSortBy","useGetCollection","fetchCollection","minWidth","Outer","background","gradients","bubblegum","Inner","PageHeader","baseOrderBy","isArray","iteratees","orders","guard","StatBoxItem","mx","invertedContrast","radii","card","ResultStatus","SubMenu","default","AddressLink","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","resolve","AddressInputSelect","onValidAddress","onAddressClick","isAddress","hasResults","FOUND","NOT_FOUND","validAddressHandler","subject","newValue","zIndex","paddingRight","right","useTheme","isDark","GridPlaceholderItem","numItems","times","itemKey","borderColor","history","useHistory","push","as"],"mappings":"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","file":"static/js/11.a56188a5.chunk.js","sourcesContent":["import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n  defaultOptionIndex?: number\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({\r\n  options,\r\n  onOptionChange,\r\n  defaultOptionIndex = 0,\r\n  ...props\r\n}) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(defaultOptionIndex)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n    {\r\n      label: t('Activity'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  getAllPancakeBunniesLowestPrice,\r\n  getAllPancakeBunniesRecentUpdatedAt,\r\n  getNftsFromCollectionApi,\r\n} from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\r\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\r\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\r\n\r\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    const fetchPancakeBunnies = async () => {\r\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\r\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\r\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\r\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const bunnyIds = Object.keys(data)\r\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\r\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\r\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\r\n        return {\r\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\r\n          tokenId: data[bunnyId].name,\r\n          name: data[bunnyId].name,\r\n          description: data[bunnyId].description,\r\n          collectionAddress: pancakeBunniesAddress,\r\n          collectionName: data[bunnyId].collection.name,\r\n          image: data[bunnyId].image,\r\n          attributes: [\r\n            {\r\n              traitType: 'bunnyId',\r\n              value: bunnyId,\r\n              displayType: null,\r\n            },\r\n          ],\r\n          meta: {\r\n            currentAskPrice: lowestPrices[bunnyId],\r\n            updatedAt: latestUpdates[bunnyId],\r\n          },\r\n        }\r\n      })\r\n      setAllPancakeBunnyNfts(allBunnies)\r\n    }\r\n    if (isPBCollection && !allPancakeBunnyNfts) {\r\n      fetchPancakeBunnies()\r\n    }\r\n  }, [isPBCollection, allPancakeBunnyNfts])\r\n\r\n  return allPancakeBunnyNfts\r\n}\r\n\r\nexport default useAllPancakeBunnyNfts\r\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","import React from 'react'\r\nimport { Grid } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n  sortBy?: string\r\n}\r\n\r\nconst PancakeBunniesCollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\r\n  const { address } = collection\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\r\n\r\n  const sortedNfts = allPancakeBunnyNfts\r\n    ? orderBy(allPancakeBunnyNfts, (nft) => (nft.meta[sortBy] ? Number(nft?.meta[sortBy]) : 0), [\r\n        sortBy === 'currentAskPrice' ? 'asc' : 'desc',\r\n      ])\r\n    : []\r\n\r\n  if (!sortedNfts.length) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {sortedNfts.map((nft) => {\r\n          return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\r\n        })}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesCollectionNfts\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst FixedContainer = styled.div`\r\n  position: fixed;\r\n  right: 5%;\r\n  bottom: 60px;\r\n`\r\n\r\nconst ScrollToTopButton = () => {\r\n  const [visible, setVisible] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleVisible = () => {\r\n    const scrolled = document.documentElement.scrollTop\r\n    if (scrolled > 700) {\r\n      setVisible(true)\r\n    } else if (scrolled <= 700) {\r\n      setVisible(false)\r\n    }\r\n  }\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 400,\r\n      behavior: 'auto',\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', toggleVisible)\r\n\r\n    return () => window.removeEventListener('scroll', toggleVisible)\r\n  }, [])\r\n\r\n  return (\r\n    <FixedContainer style={{ display: visible ? 'inline' : 'none' }}>\r\n      <Button variant=\"subtle\" endIcon={<ChevronUpIcon color=\"invertedContrast\" />} onClick={scrollToTop}>\r\n        {t('To Top')}\r\n      </Button>\r\n    </FixedContainer>\r\n  )\r\n}\r\n\r\nexport default ScrollToTopButton\r\n","import React from 'react'\r\nimport { Radio, Flex, Image, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport noop from 'lodash/noop'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { Item } from './types'\r\n\r\nconst StyledItemRow = styled(Flex)`\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n\r\nconst ItemImage = styled(Image)`\r\n  border-radius: 50%;\r\n`\r\n\r\ninterface ItemRowProps {\r\n  item: Item\r\n  isSelected: boolean\r\n  onSelect: () => void\r\n}\r\n\r\nexport const ItemRow: React.FC<ItemRowProps> = ({ item, isSelected, onSelect }) => (\r\n  <StyledItemRow alignItems=\"center\" px=\"16px\" py=\"8px\" onClick={onSelect}>\r\n    {item.image && <ItemImage src={item.image} height={48} width={48} mr=\"16px\" />}\r\n    <Text style={{ flex: 1 }}>{item.label}</Text>\r\n    {item.count !== undefined && (\r\n      <Text color=\"textSubtle\" px=\"8px\">\r\n        {formatNumber(item.count, 0, 0)}\r\n      </Text>\r\n    )}\r\n    <Radio name=\"item-select\" scale=\"sm\" checked={isSelected} value={item.label} onChange={noop} ml=\"24px\" />\r\n  </StyledItemRow>\r\n)\r\n\r\nexport const SearchWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nexport const FilterButton = styled(Flex)`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  svg {\r\n    pointer-events: none;\r\n  }\r\n`\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Text,\r\n  Flex,\r\n  InlineMenu,\r\n  Input,\r\n  InputGroup,\r\n  SearchIcon,\r\n  IconButton,\r\n  CloseIcon,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useAppDispatch } from 'state'\r\nimport { filterNftsFromCollection } from 'state/nftMarket/reducer'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetNftFilterLoadingState, useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport { NftFilterLoadingState } from 'state/nftMarket/types'\r\nimport { FilterButton, ItemRow, SearchWrapper } from './styles'\r\nimport { Item } from './types'\r\n\r\ninterface ListFilterProps {\r\n  title?: string\r\n  traitType: string\r\n  items: Item[]\r\n  collectionAddress: string\r\n}\r\n\r\ninterface State {\r\n  orderKey: string\r\n  orderDir: 'asc' | 'desc'\r\n}\r\n\r\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n\r\nexport const ListFilter: React.FC<ListFilterProps> = ({ title, traitType, items, collectionAddress }) => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [query, setQuery] = useState('')\r\n  const [orderState, setOrderState] = useState<State>({ orderKey: 'count', orderDir: 'asc' })\r\n  const wrapperRef = useRef(null)\r\n  const menuRef = useRef(null)\r\n  const nftFilters = useGetNftFilters(collectionAddress)\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { orderKey, orderDir } = orderState\r\n\r\n  const traitFilter = nftFilters[traitType]\r\n  const isTraitSelected = !!traitFilter\r\n\r\n  const filteredItems =\r\n    query && query.length > 1\r\n      ? items.filter((item) => item.label.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n      : items\r\n\r\n  const handleClearItem = () => {\r\n    const newFilters = { ...nftFilters }\r\n\r\n    delete newFilters[traitType]\r\n\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: newFilters,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const handleMenuClick = () => setIsOpen(!isOpen)\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = evt.target\r\n    setQuery(value)\r\n  }\r\n\r\n  const handleItemSelect = ({ attr }: Item) => {\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: { ...nftFilters, [traitType]: attr },\r\n      }),\r\n    )\r\n  }\r\n\r\n  const toggleSort = (newOrderKey: string) => () => {\r\n    setOrderState((prevOrderDir) => {\r\n      if (prevOrderDir.orderKey !== newOrderKey) {\r\n        return {\r\n          orderKey: newOrderKey,\r\n          orderDir: 'asc',\r\n        }\r\n      }\r\n\r\n      return {\r\n        orderKey: newOrderKey,\r\n        orderDir: prevOrderDir.orderDir === 'asc' ? 'desc' : 'asc',\r\n      }\r\n    })\r\n  }\r\n\r\n  // @TODO Fix this in the Toolkit\r\n  // This is a fix to ensure the \"isOpen\" value is aligned with the menus's (to avoid a double click)\r\n  useEffect(() => {\r\n    const handleClickOutside = ({ target }: Event) => {\r\n      if (\r\n        wrapperRef.current &&\r\n        menuRef.current &&\r\n        !menuRef.current.contains(target) &&\r\n        !wrapperRef.current.contains(target)\r\n      ) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [setIsOpen, wrapperRef, menuRef])\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box ref={wrapperRef}>\r\n        <InlineMenu\r\n          component={\r\n            <TriggerButton\r\n              onClick={handleMenuClick}\r\n              variant={isTraitSelected ? 'subtle' : 'light'}\r\n              scale=\"sm\"\r\n              disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n              hasItem={isTraitSelected}\r\n            >\r\n              {title}\r\n            </TriggerButton>\r\n          }\r\n          isOpen={isOpen}\r\n          options={{ placement: 'bottom' }}\r\n        >\r\n          <Box maxWidth=\"375px\" ref={menuRef}>\r\n            <SearchWrapper alignItems=\"center\" p=\"16px\">\r\n              <InputGroup startIcon={<SearchIcon color=\"textSubtle\" />}>\r\n                <Input name=\"query\" placeholder={t('Search')} onChange={handleChange} value={query} />\r\n              </InputGroup>\r\n            </SearchWrapper>\r\n            <Flex alignItems=\"center\" p=\"16px\">\r\n              <FilterButton onClick={toggleSort('label')} style={{ flex: 1 }}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Name')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'label' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'label' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n              <FilterButton onClick={toggleSort('count')}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Count')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'count' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'count' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n            </Flex>\r\n            <Box height=\"240px\" overflowY=\"auto\">\r\n              {filteredItems.length > 0 ? (\r\n                orderBy(filteredItems, orderKey, orderDir).map((filteredItem) => {\r\n                  const handleSelect = () => handleItemSelect(filteredItem)\r\n                  const isItemSelected = traitFilter ? traitFilter.value === filteredItem.attr.value : false\r\n\r\n                  return (\r\n                    <ItemRow\r\n                      key={filteredItem.label}\r\n                      item={filteredItem}\r\n                      isSelected={isItemSelected}\r\n                      onSelect={handleSelect}\r\n                    />\r\n                  )\r\n                })\r\n              ) : (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"230px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {t('No results found')}\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </InlineMenu>\r\n      </Box>\r\n      {isTraitSelected && (\r\n        <CloseButton\r\n          variant={isTraitSelected ? 'subtle' : 'light'}\r\n          scale=\"sm\"\r\n          onClick={handleClearItem}\r\n          disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n        >\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeAllFilters } from 'state/nftMarket/reducer'\r\nimport { useGetNftFilterLoadingState } from 'state/nftMarket/hooks'\r\nimport { NftFilterLoadingState } from 'state/nftMarket/types'\r\n\r\ninterface ClearAllButtonProps extends ButtonProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const clearAll = () => {\r\n    dispatch(removeAllFilters(collectionAddress))\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      key=\"clear-all\"\r\n      variant=\"text\"\r\n      scale=\"sm\"\r\n      onClick={clearAll}\r\n      disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n      {...props}\r\n    >\r\n      {t('Clear')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClearAllButton\r\n","import React from 'react'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setOrdering } from 'state/nftMarket/reducer'\r\nimport { useGetNftOrdering } from 'state/nftMarket/hooks'\r\n\r\nconst SortSelect: React.FC<{ collectionAddress: string }> = ({ collectionAddress }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const handleChange = (newOption: OptionProps) => {\r\n    const { field, direction } = newOption.value\r\n    dispatch(setOrdering({ collection: collectionAddress, field, direction }))\r\n  }\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: { field: 'updatedAt', direction: 'desc' } },\r\n    { label: t('Lowest price'), value: { field: 'currentAskPrice', direction: 'asc' } },\r\n    { label: t('Highest price'), value: { field: 'currentAskPrice', direction: 'desc' } },\r\n    { label: t('Token ID'), value: { field: 'tokenId', direction: 'asc' } },\r\n  ]\r\n\r\n  const defaultOptionIndex = sortByItems.findIndex(\r\n    (option) => option.value.field === selectedOrder.field && option.value.direction === selectedOrder.direction,\r\n  )\r\n\r\n  return (\r\n    <Select\r\n      options={sortByItems}\r\n      onOptionChange={handleChange}\r\n      defaultOptionIndex={defaultOptionIndex !== -1 ? defaultOptionIndex : undefined}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SortSelect\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, ButtonMenu, ButtonMenuItem, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport capitalize from 'lodash/capitalize'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetNftFilters, useGetNftShowOnlyOnSale } from 'state/nftMarket/hooks'\r\nimport { Collection, NftAttribute } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Item, ListFilter } from 'views/Nft/market/components/Filters'\r\nimport { useAppDispatch } from 'state'\r\nimport { setShowOnlyOnSale } from 'state/nftMarket/reducer'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\nimport ClearAllButton from './ClearAllButton'\r\nimport SortSelect from './SortSelect'\r\n\r\ninterface FiltersProps {\r\n  collection: Collection\r\n}\r\n\r\nconst GridContainer = styled(Grid)`\r\n  margin-bottom: 16px;\r\n  padding: 0 16px;\r\n  grid-gap: 8px 16px;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-areas:\r\n    'filterByTitle .'\r\n    'attributeFilters attributeFilters'\r\n    '. sortByTitle'\r\n    'filterByControls sortByControls';\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'attributeFilters attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      'filterByControls . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 2fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'filterByControls attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      '. . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    grid-template-columns: 1.3fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . sortByTitle'\r\n      'filterByControls attributeFilters sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    grid-template-columns: 1fr 5fr 1fr;\r\n  }\r\n`\r\n\r\nconst FilterByTitle = styled(Text)`\r\n  grid-area: filterByTitle;\r\n`\r\n\r\nconst FilterByControls = styled(Box)`\r\n  grid-area: filterByControls;\r\n`\r\n\r\nconst SortByTitle = styled(Text)`\r\n  grid-area: sortByTitle;\r\n`\r\n\r\nconst SortByControls = styled(Box)`\r\n  grid-area: sortByControls;\r\n`\r\n\r\nconst ScrollableFlexContainer = styled(Flex)`\r\n  grid-area: attributeFilters;\r\n  align-items: center;\r\n  flex: 1;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-wrap: wrap;\r\n    overflow-x: revert;\r\n  }\r\n`\r\n\r\nconst Filters: React.FC<FiltersProps> = ({ collection }) => {\r\n  const { address } = collection\r\n  const dispatch = useAppDispatch()\r\n  const { data } = useGetCollectionDistribution(address)\r\n  const { t } = useTranslation()\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(address)\r\n  const [activeButtonIndex, setActiveButtonIndex] = useState(showOnlyNftsOnSale ? 1 : 0)\r\n\r\n  const onActiveButtonChange = (newIndex: number) => {\r\n    dispatch(setShowOnlyOnSale({ collection: address, showOnlyOnSale: newIndex === 1 }))\r\n    setActiveButtonIndex(newIndex)\r\n  }\r\n\r\n  const nftFilters = useGetNftFilters(address)\r\n  const attrsByType: Record<string, NftAttribute[]> = collection?.attributes?.reduce(\r\n    (accum, attr) => ({\r\n      ...accum,\r\n      [attr.traitType]: accum[attr.traitType] ? [...accum[attr.traitType], attr] : [attr],\r\n    }),\r\n    {},\r\n  )\r\n  const uniqueTraitTypes = attrsByType ? Object.keys(attrsByType) : []\r\n\r\n  return (\r\n    <GridContainer>\r\n      <FilterByTitle textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\r\n        {t('Filter by')}\r\n      </FilterByTitle>\r\n      <FilterByControls>\r\n        <ButtonMenu scale=\"sm\" activeIndex={activeButtonIndex} onItemClick={onActiveButtonChange}>\r\n          <ButtonMenuItem>{t('All')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('On Sale')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </FilterByControls>\r\n      <SortByTitle fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n        {t('Sort By')}\r\n      </SortByTitle>\r\n      <SortByControls>\r\n        <SortSelect collectionAddress={address} />\r\n      </SortByControls>\r\n      <ScrollableFlexContainer>\r\n        {uniqueTraitTypes.map((traitType) => {\r\n          const attrs = attrsByType[traitType]\r\n          const items: Item[] = attrs.map((attr) => ({\r\n            label: capitalize(attr.value as string),\r\n            count: data && data[traitType] ? data[traitType][attr.value] : undefined,\r\n            attr,\r\n          }))\r\n\r\n          return (\r\n            <ListFilter\r\n              key={traitType}\r\n              title={capitalize(traitType)}\r\n              traitType={traitType}\r\n              items={items}\r\n              collectionAddress={address}\r\n            />\r\n          )\r\n        })}\r\n        {!isEmpty(nftFilters) && <ClearAllButton collectionAddress={address} mb=\"4px\" />}\r\n      </ScrollableFlexContainer>\r\n    </GridContainer>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","export const REQUEST_SIZE = 100\r\n","import React, { useEffect, useState } from 'react'\r\nimport uniqBy from 'lodash/uniqBy'\r\nimport { AutoRenewIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftFilterLoadingState, NftToken, TokenMarketData } from 'state/nftMarket/types'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection }) => {\r\n  const { totalSupply, numberTokensListed, address: collectionAddress } = collection\r\n  const [page, setPage] = useState(1)\r\n  const [skip, setSkip] = useState(0)\r\n  const [nfts, setNfts] = useState<NftToken[]>([])\r\n  const [isFetchingFilteredNfts, setIsFetchingFilteredNfts] = useState(false)\r\n  const { t } = useTranslation()\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const { field: orderField, direction: orderDirection } = useGetNftOrdering(collectionAddress)\r\n  const isFetching =\r\n    orderField === 'tokenId' ? nftFilterLoadingState === NftFilterLoadingState.LOADING : isFetchingFilteredNfts\r\n\r\n  const handleLoadMore = () => {\r\n    if (orderField === 'tokenId') {\r\n      setPage((prevPage) => prevPage + 1)\r\n    }\r\n    setSkip(skip + REQUEST_SIZE)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      setPage(1)\r\n    }\r\n  }, [orderField])\r\n\r\n  useEffect(() => {\r\n    setNfts([])\r\n    setSkip(0)\r\n  }, [orderField, orderDirection])\r\n\r\n  useEffect(() => {\r\n    const fetchApiData = async (marketData: TokenMarketData[]) => {\r\n      const apiRequestPromises = marketData.map((marketNft) => getNftApi(collectionAddress, marketNft.tokenId))\r\n      const apiResponses = await Promise.all(apiRequestPromises)\r\n      const responsesWithMarketData = apiResponses.map((apiNft, i) => {\r\n        return {\r\n          ...apiNft,\r\n          collectionAddress,\r\n          collectionName: apiNft.collection.name,\r\n          marketData: marketData[i],\r\n        }\r\n      })\r\n      setIsFetchingFilteredNfts(false)\r\n      setNfts((prevState) => {\r\n        const combinedNfts = [...prevState, ...responsesWithMarketData]\r\n        return uniqBy(combinedNfts, 'tokenId')\r\n      })\r\n    }\r\n\r\n    const fetchMarketData = async () => {\r\n      const subgraphRes = await getNftsMarketData(\r\n        { collection: collectionAddress.toLowerCase(), isTradable: true },\r\n        REQUEST_SIZE,\r\n        orderField,\r\n        orderDirection,\r\n        skip,\r\n      )\r\n      fetchApiData(subgraphRes)\r\n    }\r\n\r\n    if (orderField !== 'tokenId') {\r\n      // Query by tokenId is handled in useEffect below since we in this case\r\n      // we need to show all NFTs, even those that never been on sale (i.e. they are not in subgraph)\r\n      setIsFetchingFilteredNfts(true)\r\n      fetchMarketData()\r\n    }\r\n  }, [orderField, orderDirection, skip, collectionAddress])\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress,\r\n          page,\r\n          size: REQUEST_SIZE,\r\n        }),\r\n      )\r\n    }\r\n  }, [page, collectionAddress, dispatch, orderField])\r\n\r\n  const nftsToShow =\r\n    orderField === 'tokenId'\r\n      ? collectionNfts?.filter((nft) => {\r\n          if (showOnlyNftsOnSale) {\r\n            return nft.marketData?.isTradable\r\n          }\r\n          return true\r\n        })\r\n      : nfts\r\n\r\n  if (!nftsToShow || nftsToShow?.length === 0) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const isNotLastPage =\r\n    showOnlyNftsOnSale || orderField !== 'tokenId'\r\n      ? nftsToShow?.length < Number(numberTokensListed)\r\n      : nftsToShow?.length < Number(totalSupply)\r\n\r\n  const resultsAmount = showOnlyNftsOnSale || orderField !== 'tokenId' ? numberTokensListed : totalSupply\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {resultsAmount} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {nftsToShow.map((nft) => {\r\n          const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n          return (\r\n            <CollectibleLinkCard\r\n              key={nft.tokenId}\r\n              nft={nft}\r\n              currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n            />\r\n          )\r\n        })}\r\n      </Grid>\r\n      <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n        {isNotLastPage && (\r\n          <Button\r\n            onClick={handleLoadMore}\r\n            scale=\"sm\"\r\n            endIcon={isFetching ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n          >\r\n            {isFetching ? t('Loading') : t('Load more')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionNfts\r\n","import React, { useState } from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { BunnyPlaceholderIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftFilterLoadingState } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface FilteredCollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst FilteredCollectionNfts: React.FC<FilteredCollectionNftsProps> = ({ collection }) => {\r\n  const { address: collectionAddress } = collection\r\n  const [numToShow, setNumToShow] = useState(REQUEST_SIZE)\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const handleLoadMore = () => {\r\n    setNumToShow((prevNumToShow) => prevNumToShow + REQUEST_SIZE)\r\n  }\r\n\r\n  if (nftFilterLoadingState === NftFilterLoadingState.LOADING) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const orderedNfts = collectionNfts\r\n    ? orderBy(\r\n        collectionNfts,\r\n        (nft) => {\r\n          if (selectedOrder.field === 'currentAskPrice') {\r\n            const currentAskPriceAsNumber = nft.marketData?.currentAskPrice\r\n              ? parseFloat(nft.marketData?.currentAskPrice)\r\n              : 0\r\n            if (currentAskPriceAsNumber > 0) {\r\n              return parseFloat(nft.marketData.currentAskPrice)\r\n            }\r\n            return selectedOrder.direction === 'asc' ? Infinity : -Infinity\r\n          }\r\n          if (selectedOrder.field === 'tokenId') {\r\n            const tokenIdNumber = Number(nft.tokenId)\r\n            return Number.isFinite(tokenIdNumber) ? tokenIdNumber : 0\r\n          }\r\n          // recently listed sorting\r\n          return nft.marketData ? parseInt(nft.marketData[selectedOrder.field], 10) : 0\r\n        },\r\n        selectedOrder.direction,\r\n      )\r\n    : []\r\n\r\n  const filteredNfts = showOnlyNftsOnSale ? orderedNfts.filter((nft) => nft.marketData?.isTradable) : orderedNfts\r\n\r\n  const nftsToShow = filteredNfts.slice(0, numToShow)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {filteredNfts.length} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      {nftsToShow.length > 0 ? (\r\n        <>\r\n          <Grid\r\n            gridGap=\"16px\"\r\n            gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n            alignItems=\"start\"\r\n          >\r\n            {nftsToShow.map((nft) => {\r\n              const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n              return (\r\n                <CollectibleLinkCard\r\n                  key={nft.tokenId}\r\n                  nft={nft}\r\n                  currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n                />\r\n              )\r\n            })}\r\n          </Grid>\r\n          <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n            {collectionNfts.length > numToShow && (\r\n              <Button onClick={handleLoadMore} scale=\"sm\">\r\n                {t('Load more')}\r\n              </Button>\r\n            )}\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex alignItems=\"center\" py=\"48px\" flexDirection=\"column\">\r\n          <BunnyPlaceholderIcon width=\"96px\" mb=\"24px\" />\r\n          <Text fontWeight={600}>{t('No NFTs found')}</Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilteredCollectionNfts\r\n","import React from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport Container from 'components/Layout/Container'\r\nimport ScrollButton from 'components/ScrollToTopButton'\r\nimport Filters from './Filters'\r\nimport CollectionNfts from './CollectionNfts'\r\nimport FilteredCollectionNfts from './FilteredCollectionNfts'\r\n\r\ninterface CollectionWrapperProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionWrapper: React.FC<CollectionWrapperProps> = ({ collection }) => {\r\n  const nftFilters = useGetNftFilters(collection.address)\r\n\r\n  return (\r\n    <Box py=\"32px\">\r\n      <Container px={[0, null, '24px']}>\r\n        <Filters collection={collection} />\r\n      </Container>\r\n      <Container>\r\n        {isEmpty(nftFilters) ? (\r\n          <CollectionNfts collection={collection} />\r\n        ) : (\r\n          <FilteredCollectionNfts collection={collection} />\r\n        )}\r\n      </Container>\r\n      {createPortal(<ScrollButton />, document.body)}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default CollectionWrapper\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Container from 'components/Layout/Container'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport PancakeBunniesCollectionNfts from './PancakeBunniesCollectionNfts'\r\nimport Header from '../Header'\r\nimport CollectionWrapper from './CollectionWrapper'\r\n\r\nconst Items = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const [sortBy, setSortBy] = useState('updatedAt')\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  const { address } = collection || {}\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: 'updatedAt' },\r\n    { label: t('Lowest price'), value: 'currentAskPrice' },\r\n  ]\r\n\r\n  const handleChange = (newOption: OptionProps) => {\r\n    setSortBy(newOption.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (address) {\r\n      dispatch(fetchCollection(address))\r\n    }\r\n  }, [address, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      {isPBCollection ? (\r\n        <Container mb=\"24px\">\r\n          <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\r\n            <Box minWidth=\"165px\">\r\n              <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n                {t('Sort By')}\r\n              </Text>\r\n              <Select options={sortByItems} onOptionChange={handleChange} />\r\n            </Box>\r\n          </Flex>\r\n          <PancakeBunniesCollectionNfts collection={collection} sortBy={sortBy} />\r\n        </Container>\r\n      ) : (\r\n        <CollectionWrapper collection={collection} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Items\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\nimport { PageHeaderProps } from './types'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import React from 'react'\r\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\n\r\ninterface GridPlaceholderProps extends GridProps {\r\n  numItems?: number\r\n}\r\n\r\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\r\n  <Box {...props}>\r\n    <Skeleton height=\"258px\" mb=\"8px\" />\r\n    <Skeleton width=\"30%\" mb=\"4px\" />\r\n    <Skeleton width=\"45%\" mb=\"16px\" />\r\n    <Skeleton />\r\n  </Box>\r\n)\r\n\r\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\r\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\r\n    {times(numItems).map((itemKey) => (\r\n      <GridPlaceholderItem key={itemKey} />\r\n    ))}\r\n  </Grid>\r\n)\r\n\r\nexport default GridPlaceholder\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n"],"sourceRoot":""}
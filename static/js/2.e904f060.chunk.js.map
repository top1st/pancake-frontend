{"version":3,"sources":["components/ApproveConfirmButtons.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts"],"names":["ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","buttonArrangement","ROW","confirmLabel","confirmId","t","useTranslation","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","id","RoundedImage","Image","radii","small","Divider","colors","cardBorder","HorizontalDivider","StepIndicator","Flex","success","secondary","textDisabled","NoNftsImage","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","useProfile","itemPageUrlId","collectionAddress","toLowerCase","pancakeBunniesAddress","attributes","value","tokenId","useModal","EditProfileModal","onEditProfileModal","p","src","image","thumbnail","height","mr","flex","gridTemplateColumns","alignItems","bold","name","fontSize","textAlign","collectionName","toLocaleString","minimumFractionDigits","maximumFractionDigits","px","mt","as","Link","external","variant","href","nftsBaseUrl","getBscScanLinkForNft","flexDirection","pb","mb","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","StyledModal","Modal","stage","includes","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","useRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","useEffect","current","focus","textTransform","scale","type","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","maxWidth","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","account","useWeb3React","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","toastSuccess","useToast","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","dispatch","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","useApproveConfirmTransaction","onRequiresApproval","a","isApprovedForAll","address","approvedForContract","onApproveSuccess","receipt","Toast","txHash","transactionHash","methodName","askPrice","parseUnits","onSuccess","isApproved","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","TransactionConfirmed","ConfirmStage","TeamAvatar","img","card","background","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","profile","nft","isActive","team","images","alt","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","PageButtons","Arrow","primary","Avatar","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","ProfileAvatarFetchStatus","FETCHED","to","display","lineHeight","truncateHash","Views","reducer","state","action","currentView","view","previousView","useEditProfile","useReducer","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","toastError","calls","map","method","getPancakeProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","failure","StartPage","cakeContract","useCake","useGetCakeBalance","cakeBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumCakeRequired","hasMinimumCakeRequired","FetchStatus","SUCCESS","gte","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","tx","wait","status","fetchProfile","cost","htmlFor","cursor","marginBottom","ml","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","isConfirmed","maxHeight","overflowY","walletNft","ApproveCakePage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","default","MobileModal","activity","localeTimestamp","isUserActivity","chainId","useActiveWeb3React","otherParty","seller","buyer","getBscScanLink","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","onPresentMobileModal","isPBCollection","find","attribute","traitType","event","stopPropagation","TextWrapper","ProfileNftModal","py","size","initialState","approvalState","confirmState","actions","noop","handlePreApprove","then","result","hasApproveFailed","hasConfirmFailed","params"],"mappings":"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","file":"static/js/2.e904f060.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import styled from 'styled-components'\r\nimport { Flex, Image } from '@pancakeswap/uikit'\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  border-radius: ${({ theme }) => theme.radii.small};\r\n  overflow: hidden;\r\n`\r\n\r\nexport const Divider = styled.div`\r\n  margin: 16px 0;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const HorizontalDivider = styled.div`\r\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\r\n  border-radius: 50%;\r\n  background-color: ${({ theme, success, disabled }) => {\r\n    if (disabled) {\r\n      return 'none'\r\n    }\r\n    return success ? theme.colors.success : theme.colors.secondary\r\n  }};\r\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\r\n  height: 32px;\r\n  width: 32px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 8px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nconst NoNftsImage = styled.div`\r\n  background: url('/images/nfts/no-profile-md.png');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default NoNftsImage\r\n","export enum SellingStage {\r\n  // Sell flow\r\n  SELL,\r\n  SET_PRICE,\r\n  APPROVE_AND_CONFIRM_SELL,\r\n  // Adjust price flow\r\n  EDIT,\r\n  ADJUST_PRICE,\r\n  CONFIRM_ADJUST_PRICE,\r\n  // Remove from market flow\r\n  REMOVE_FROM_MARKET,\r\n  CONFIRM_REMOVE_FROM_MARKET,\r\n  // Transfer flow\r\n  TRANSFER,\r\n  CONFIRM_TRANSFER,\r\n  // Common\r\n  TX_CONFIRMED,\r\n}\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface SellStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToNextStage: () => void\r\n  continueToTransferStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\r\nconst SellStage: React.FC<SellStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToNextStage,\r\n  continueToTransferStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { hasProfile } = useProfile()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>\r\n                  {lowestPrice.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 3,\r\n                    maximumFractionDigits: 3,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Sell')}\r\n        </Button>\r\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\r\n          {t('Transfer')}\r\n        </Button>\r\n        {hasProfile && (\r\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\r\n            {t('Set as Profile Pic')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SellStage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SellingStage } from './types'\r\n\r\nexport const stagesWithBackButton = [\r\n  SellingStage.SET_PRICE,\r\n  SellingStage.ADJUST_PRICE,\r\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\r\n  SellingStage.CONFIRM_ADJUST_PRICE,\r\n  SellingStage.REMOVE_FROM_MARKET,\r\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\r\n  SellingStage.TRANSFER,\r\n  SellingStage.CONFIRM_TRANSFER,\r\n]\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\r\n  width: 360px;\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n`\r\n\r\nexport const GreyedOutContainer = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  padding: 16px;\r\n`\r\n\r\nexport const RightAlignedInput = styled(Input)`\r\n  text-align: right;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface FeeAmountCellProps {\r\n  bnbAmount: number\r\n  creatorFee: number\r\n  tradingFee: number\r\n}\r\n\r\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const totalFee = creatorFee + tradingFee\r\n  const totalFeeAsDecimal = totalFee / 100\r\n  const feeAmount = bnbAmount * totalFeeAsDecimal\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 6,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        ({totalFee}%)\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { Divider } from '../shared/styles'\r\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\r\n\r\ninterface SetPriceStageProps {\r\n  nftToSell: NftToken\r\n  variant: 'set' | 'adjust'\r\n  currentPrice?: string\r\n  lowestPrice?: number\r\n  price: string\r\n  setPrice: React.Dispatch<React.SetStateAction<string>>\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst MIN_PRICE = 0.005\r\nconst MAX_PRICE = 10000\r\n\r\n// Stage where user puts price for NFT they're about to put on sale\r\n// Also shown when user wants to adjust the price of already listed NFT\r\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\r\n  nftToSell,\r\n  variant,\r\n  lowestPrice,\r\n  currentPrice,\r\n  price,\r\n  setPrice,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\r\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\r\n\r\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\r\n  const creatorFeeAsNumber = parseFloat(creatorFee)\r\n  const tradingFeeAsNumber = parseFloat(tradingFee)\r\n  const bnbPrice = useBNBBusdPrice()\r\n  const priceAsFloat = parseFloat(price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\r\n\r\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\r\n\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\r\n        )}\r\n      </Text>\r\n      {creatorFeeAsNumber > 0 && (\r\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\r\n      )}\r\n      <Text>{t('%percentage%% trading fee will be used to buy & burn $MINTS', { percentage: tradingFee })}</Text>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (inputRef && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [inputRef])\r\n\r\n  const getButtonText = () => {\r\n    if (variant === 'adjust') {\r\n      if (adjustedPriceIsTheSame || priceIsValid) {\r\n        return t('Input New Sale Price')\r\n      }\r\n      return t('Confirm')\r\n    }\r\n    return t('Enable Listing')\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold p=\"16px\">\r\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\r\n      </Text>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Set Price')}\r\n        </Text>\r\n        <Flex>\r\n          <Flex flex=\"1\" alignItems=\"center\">\r\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\r\n            <Text bold>WBNB</Text>\r\n          </Flex>\r\n          <Flex flex=\"2\">\r\n            <RightAlignedInput\r\n              scale=\"sm\"\r\n              type=\"number\"\r\n              inputMode=\"decimal\"\r\n              value={price}\r\n              ref={inputRef}\r\n              isWarning={priceIsOutOfRange}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\r\n          {!Number.isNaN(priceInUsd) && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        {priceIsOutOfRange && (\r\n          <Text fontSize=\"12px\" color=\"failure\">\r\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\r\n              minPrice: MIN_PRICE,\r\n              maxPrice: MAX_PRICE,\r\n            })}\r\n          </Text>\r\n        )}\r\n        <Flex mt=\"8px\">\r\n          <Text small color=\"textSubtle\" mr=\"8px\">\r\n            {t('Seller pays %percentage%% platform fee on sale', {\r\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\r\n            })}\r\n          </Text>\r\n          <span ref={targetRef}>\r\n            <ErrorIcon />\r\n          </span>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Platform fee if sold')}\r\n          </Text>\r\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\r\n        </Flex>\r\n        {lowestPrice && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price on market')}\r\n            </Text>\r\n            <BnbAmountCell bnbAmount={lowestPrice} />\r\n          </Flex>\r\n        )}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Box>\r\n          <Text small color=\"textSubtle\">\r\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with MintySwap.')}\r\n          </Text>\r\n        </Box>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\r\n        >\r\n          {getButtonText()}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SetPriceStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface EditStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToAdjustPriceStage: () => void\r\n  continueToRemoveFromMarketStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\r\nconst EditStage: React.FC<EditStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToAdjustPriceStage,\r\n  continueToRemoveFromMarketStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Text small color=\"textSubtle\">\r\n            {t('Your price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\r\n          {t('Adjust Sale Price')}\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\r\n          {t('Remove from Market')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditStage\r\n","import React from 'react'\r\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Divider } from '../shared/styles'\r\n\r\ninterface RemoveStageProps {\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Box p=\"16px\" maxWidth=\"360px\">\r\n        <Text fontSize=\"24px\" bold>\r\n          {t('Remove from Market')}\r\n        </Text>\r\n        <Text mt=\"24px\" color=\"textSubtle\">\r\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\r\n        </Text>\r\n        <Text mt=\"16px\" color=\"textSubtle\">\r\n          {t('Continue?')}\r\n        </Text>\r\n      </Box>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RemoveStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { GreyedOutContainer } from './styles'\r\n\r\ninterface TransferStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  transferAddress: string\r\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\r\n  isInvalidTransferAddress: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst TransferStage: React.FC<TransferStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  transferAddress,\r\n  setTransferAddress,\r\n  isInvalidTransferAddress,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\r\n  const getErrorText = () => {\r\n    if (isInvalidTransferAddress) {\r\n      return t('That’s not a Binance Smart Chain wallet address.')\r\n    }\r\n    if (transferAddressEqualsConnectedAddress) {\r\n      return t('This address is the one that is currently connected')\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\r\n        {t('Transfer to New Wallet')}\r\n      </Text>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Receiving address')}\r\n        </Text>\r\n        <Input\r\n          scale=\"sm\"\r\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\r\n          placeholder={t('Paste BSC address')}\r\n          value={transferAddress}\r\n          onChange={(e) => setTransferAddress(e.target.value)}\r\n        />\r\n        {isInvalidTransferAddress ||\r\n          (transferAddressEqualsConnectedAddress && (\r\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\r\n              {getErrorText()}\r\n            </Text>\r\n          ))}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Text small color=\"textSubtle\">\r\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\r\n        </Text>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransferStage\r\n","import React, { useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { isAddress } from 'utils'\r\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\r\nimport SellStage from './SellStage'\r\nimport SetPriceStage from './SetPriceStage'\r\nimport EditStage from './EditStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\nimport { StyledModal, stagesWithBackButton } from './styles'\r\nimport { SellingStage } from './types'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport RemoveStage from './RemoveStage'\r\nimport TransferStage from './TransferStage'\r\n\r\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\r\n  switch (stage) {\r\n    // Sell flow\r\n    case SellingStage.SELL:\r\n      return t('Details')\r\n    case SellingStage.SET_PRICE:\r\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n      return t('Back')\r\n    // Adjust price flow\r\n    case SellingStage.EDIT:\r\n      return t('Details')\r\n    case SellingStage.ADJUST_PRICE:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_ADJUST_PRICE:\r\n      return t('Confirm transaction')\r\n    // Remove from market flow\r\n    case SellingStage.REMOVE_FROM_MARKET:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n      return t('Confirm transaction')\r\n    // Transfer flow\r\n    case SellingStage.TRANSFER:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_TRANSFER:\r\n      return t('Confirm transaction')\r\n    // Common\r\n    case SellingStage.TX_CONFIRMED:\r\n      return t('Transaction Confirmed')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\r\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n    return t('Your NFT has been returned to your wallet')\r\n  }\r\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n    return t('Your NFT has been transferred to another wallet')\r\n  }\r\n  if (variant === 'sell') {\r\n    return t('Your NFT has been listed for sale!')\r\n  }\r\n  return t('Your NFT listing has been changed.')\r\n}\r\n\r\ninterface SellModalProps extends InjectedModalProps {\r\n  variant: 'sell' | 'edit'\r\n  nftToSell: NftToken\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\r\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\r\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\r\n  const [transferAddress, setTransferAddress] = useState('')\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess } = useToast()\r\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\r\n  const nftMarketContract = useNftMarketContract()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\r\n\r\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\r\n\r\n  const goBack = () => {\r\n    switch (stage) {\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setPrice(nftToSell.marketData.currentAskPrice)\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_ADJUST_PRICE:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        setStage(SellingStage.TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToNextStage = () => {\r\n    switch (stage) {\r\n      case SellingStage.SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\r\n        break\r\n      case SellingStage.EDIT:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.CONFIRM_TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToRemoveFromMarketStage = () => {\r\n    setStage(SellingStage.REMOVE_FROM_MARKET)\r\n  }\r\n\r\n  const continueToTransferStage = () => {\r\n    setStage(SellingStage.TRANSFER)\r\n  }\r\n\r\n  const dispatchSuccessAction = () => {\r\n    switch (stage) {\r\n      // Remove from sale\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.WALLET,\r\n          }),\r\n        )\r\n        break\r\n      // Transfer NFT\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        dispatch(\r\n          removeUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n          }),\r\n        )\r\n        break\r\n      default:\r\n        // Modify listing OR list for sale\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.FORSALE,\r\n          }),\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\r\n        return approvedForContract\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now put your NFT for sale!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\r\n      }\r\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\r\n          account,\r\n          transferAddress,\r\n          nftToSell.tokenId,\r\n        ])\r\n      }\r\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\r\n      const askPrice = parseUnits(price)\r\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      dispatchSuccessAction()\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(SellingStage.TX_CONFIRMED)\r\n    },\r\n  })\r\n\r\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\r\n\r\n  return (\r\n    <StyledModal\r\n      title={modalTitles(stage, t)}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === SellingStage.SELL && (\r\n        <SellStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          continueToTransferStage={continueToTransferStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.SET_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"set\"\r\n          continueToNextStage={continueToNextStage}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"sell\"\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleApprove={handleApprove}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n      {stage === SellingStage.EDIT && (\r\n        <EditStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToAdjustPriceStage={continueToNextStage}\r\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.ADJUST_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"adjust\"\r\n          continueToNextStage={continueToNextStage}\r\n          currentPrice={nftToSell.marketData.currentAskPrice}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\r\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.TRANSFER && (\r\n        <TransferStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          transferAddress={transferAddress}\r\n          setTransferAddress={setTransferAddress}\r\n          isInvalidTransferAddress={isInvalidTransferAddress}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_TRANSFER && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default SellModal\r\n","import React from 'react'\r\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\r\nimport { Profile } from 'state/types'\r\nimport styled from 'styled-components'\r\n\r\nexport interface ProfileAvatarProps {\r\n  profile: Profile\r\n}\r\n\r\nconst TeamAvatar = styled.img`\r\n  border: 1px solid ${({ theme }) => theme.card.background};\r\n  border-radius: 50%;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  width: 37.5%;\r\n  height: 37.5%;\r\n  z-index: 5;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-width: 2px;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div<{ bg: string }>`\r\n  background: url('${({ bg }) => bg}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n// TODO: replace with no profile avatar icon\r\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\r\n  return (\r\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\r\n      {!profile.isActive && <AvatarInactive />}\r\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\r\n    </AvatarWrapper>\r\n  )\r\n}\r\n\r\nexport default ProfileAvatarWithTeam\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useFetchUserNfts = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n","import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { ProfileAvatarFetchStatus } from 'state/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\r\n            <Skeleton />\r\n          ) : (\r\n            <Text lineHeight=\"1.25\">{profileName}</Text>\r\n          )}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import { useReducer } from 'react'\r\n\r\nexport enum Views {\r\n  START = 'start',\r\n  CHANGE = 'change',\r\n  REMOVE = 'remove',\r\n  APPROVE = 'approve',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'set_view'\r\n      view: Views\r\n    }\r\n  | {\r\n      type: 'go_previous'\r\n    }\r\n\r\nexport interface State {\r\n  currentView: Views\r\n  previousView: Views | null\r\n}\r\n\r\nconst reducer = (state: State, action: Actions): State => {\r\n  switch (action.type) {\r\n    case 'set_view':\r\n      return {\r\n        ...state,\r\n        currentView: action.view,\r\n        previousView: state.currentView,\r\n      }\r\n    case 'go_previous':\r\n      return {\r\n        ...state,\r\n        currentView: state.previousView,\r\n        previousView: state.currentView,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport interface UseEditProfileResponse extends State {\r\n  goToStart: () => void\r\n  goToChange: () => void\r\n  goToApprove: () => void\r\n  goToRemove: () => void\r\n  goPrevious: () => void\r\n}\r\n\r\nconst useEditProfile = (): UseEditProfileResponse => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    currentView: Views.START,\r\n    previousView: null,\r\n  })\r\n\r\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\r\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\r\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\r\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\r\n  const goPrevious = () => dispatch({ type: 'go_previous' })\r\n\r\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\r\n}\r\n\r\nexport default useEditProfile\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: ethers.BigNumber.from(0),\r\n    numberCakeToRegister: ethers.BigNumber.from(0),\r\n    numberCakeToUpdate: ethers.BigNumber.from(0),\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\r\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\r\n        >(profileABI, calls)\r\n\r\n        setCosts({\r\n          numberCakeToReactivate,\r\n          numberCakeToRegister,\r\n          numberCakeToUpdate,\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve $MINTS costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return { costs, isLoading }\r\n}\r\n\r\nexport default useGetProfileCosts\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { useCake } from 'hooks/useContract'\r\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface StartPageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n  goToRemove: UseEditProfileResponse['goToRemove']\r\n  goToApprove: UseEditProfileResponse['goToApprove']\r\n}\r\n\r\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\r\n  border-color: ${({ theme }) => theme.colors.failure};\r\n  color: ${({ theme }) => theme.colors.failure};\r\n  margin-bottom: 24px;\r\n\r\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\r\n    border-color: ${({ theme }) => theme.colors.failure};\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div`\r\n  height: 64px;\r\n  width: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 128px;\r\n    width: 128px;\r\n  }\r\n`\r\n\r\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { profile } = useProfile()\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n    isLoading: isProfileCostsLoading,\r\n  } = useGetProfileCosts()\r\n  const [needsApproval, setNeedsApproval] = useState(null)\r\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(minimumCakeRequired)\r\n\r\n  /**\r\n   * Check if the wallet has the required $MINTS allowance to change their profile pic or reactivate\r\n   * If they don't, we send them to the approval screen first\r\n   */\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\r\n      setNeedsApproval(response.lt(minimumCakeRequired))\r\n    }\r\n\r\n    if (account && !isProfileCostsLoading) {\r\n      checkApprovalStatus()\r\n    }\r\n  }, [account, minimumCakeRequired, setNeedsApproval, cakeContract, isProfileCostsLoading])\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <AvatarWrapper>\r\n        <ProfileAvatarWithTeam profile={profile} />\r\n      </AvatarWrapper>\r\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\r\n        <Text as=\"p\" color=\"failure\">\r\n          {!isProfileCostsLoading &&\r\n            !hasMinimumCakeRequired &&\r\n            t('%minimum% $MINTS required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\r\n        </Text>\r\n      </Flex>\r\n      {profile.isActive ? (\r\n        <>\r\n          <Button\r\n            width=\"100%\"\r\n            mb=\"8px\"\r\n            onClick={needsApproval === true ? goToApprove : goToChange}\r\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n          >\r\n            {t('Change Profile Pic')}\r\n          </Button>\r\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\r\n            {t('Remove Profile Pic')}\r\n          </DangerOutline>\r\n        </>\r\n      ) : (\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={needsApproval === true ? goToApprove : goToChange}\r\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n        >\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )}\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StartPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype PauseProfilePageProps = InjectedModalProps\r\n\r\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { profile } = useProfile()\r\n  const {\r\n    costs: { numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const { t } = useTranslation()\r\n  const pancakeProfileContract = useProfileContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  const handleDeactivateProfile = async () => {\r\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      // Re-fetch profile\r\n      await dispatch(fetchProfile(account))\r\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      onDismiss()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t(\r\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\r\n        )}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Cost to reactivate in the future: %cost% $MINTS', { cost: formatBigNumber(numberCakeToReactivate) })}\r\n      </Text>\r\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\r\n        <Flex alignItems=\"center\">\r\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\r\n          <Text ml=\"8px\">{t('I understand')}</Text>\r\n        </Flex>\r\n      </label>\r\n      <Button\r\n        width=\"100%\"\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        onClick={handleDeactivateProfile}\r\n        mb=\"8px\"\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PauseProfilePage\r\n","import React, { useState } from 'react'\r\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation } from 'state/nftMarket/types'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    collectionAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { nfts } = useUserNfts()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\r\n            selectedNft.collectionAddress,\r\n            selectedNft.tokenId,\r\n          ])\r\n        }\r\n\r\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\r\n        {nftsInWallet.map((walletNft) => {\r\n          const handleChange = () => {\r\n            setSelectedNft({\r\n              tokenId: walletNft.tokenId,\r\n              collectionAddress: walletNft.collectionAddress,\r\n            })\r\n          }\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\r\n              value={walletNft.tokenId}\r\n              image={walletNft.image.thumbnail}\r\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })}\r\n      </Box>\r\n      {nfts.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface ApproveCakePageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n}\r\n\r\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const cakeContract = useCake()\r\n  const { toastError } = useToast()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      goToChange()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\r\n        <Text>{formatBigNumber(cost)} $MINTS</Text>\r\n      </Flex>\r\n      <Button\r\n        disabled={isApproving}\r\n        isLoading={isApproving}\r\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={handleApprove}\r\n      >\r\n        {t('Enable')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveCakePage\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport useEditProfile, { Views } from './reducer'\r\nimport StartView from './StartView'\r\nimport PauseProfileView from './PauseProfileView'\r\nimport ChangeProfilePicView from './ChangeProfilePicView'\r\nimport ApproveCakeView from './ApproveCakeView'\r\n\r\ntype EditProfileModalProps = InjectedModalProps\r\n\r\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\r\n  switch (currentView) {\r\n    case Views.START:\r\n      return t('Edit Profile')\r\n    case Views.CHANGE:\r\n      return t('Change Profile Pic')\r\n    case Views.REMOVE:\r\n      return t('Remove Profile Pic')\r\n    case Views.APPROVE:\r\n      return t('Enable $MINTS')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\r\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\r\n  const { t } = useTranslation()\r\n\r\n  const isStartView = currentView === Views.START\r\n  const handleBack = isStartView ? null : () => goPrevious()\r\n\r\n  return (\r\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\r\n      <div style={{ maxWidth: '400px' }}>\r\n        {currentView === Views.START && (\r\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\r\n        )}\r\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\r\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\r\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditProfileModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\r\n\r\nconst GridItem = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nconst LoadingRow: React.FC = () => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <tr>\r\n      <Td>\r\n        <GridItem>\r\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\r\n        </GridItem>\r\n      </Td>\r\n      <Td>\r\n        <GridItem justifyContent=\"flex-end\">\r\n          <Skeleton height={[66, null, 24]} width={64} />\r\n        </GridItem>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={42} width={64} />\r\n            </GridItem>\r\n          </Td>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={48} width={124} />\r\n            </GridItem>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <GridItem justifyContent=\"center\">\r\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\r\n        </GridItem>\r\n      </Td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nexport default TableLoader\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\r\n\r\ninterface ActivityEventTextProps extends TextProps {\r\n  marketEvent: MarketEvent\r\n}\r\n\r\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const events = {\r\n    [MarketEvent.NEW]: {\r\n      text: t('Listed'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.CANCEL]: {\r\n      text: t('Delisted'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.MODIFY]: {\r\n      text: t('Modified'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.BUY]: {\r\n      text: t('Bought'),\r\n      color: 'success',\r\n    },\r\n    [MarketEvent.SELL]: {\r\n      text: t('Sold'),\r\n      color: 'failure',\r\n    },\r\n  }\r\n\r\n  return (\r\n    <Text {...props} color={events[marketEvent].color}>\r\n      {events[marketEvent].text}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default ActivityEventText\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport ActivityEventText from './ActivityEventText'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface MobileModalProps extends InjectedModalProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  localeTimestamp: string\r\n  isUserActivity?: boolean\r\n}\r\n\r\nconst MobileModal: React.FC<MobileModalProps> = ({\r\n  nft,\r\n  activity,\r\n  bnbBusdPrice,\r\n  localeTimestamp,\r\n  onDismiss,\r\n  isUserActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\r\n\r\n  return (\r\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            <Text bold>{nft.name}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <LightGreyCard p=\"16px\">\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\r\n            {priceAsFloat ? (\r\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n                <Text mr=\"4px\" bold>\r\n                  {priceAsFloat}\r\n                </Text>\r\n                <Text color=\"textSubtle\">\r\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })})`}\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </Flex>\r\n          {isUserActivity ? (\r\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('From/To')}\r\n              </Text>\r\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\r\n            </Flex>\r\n          ) : (\r\n            <>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('From')}\r\n                </Text>\r\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\r\n              </Flex>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('To')}\r\n                </Text>\r\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('Date')}\r\n            </Text>\r\n            <Text>{localeTimestamp}</Text>\r\n          </Flex>\r\n        </LightGreyCard>\r\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\r\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            {t('View on BscScan')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MobileModal\r\n","import React from 'react'\r\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n      {price ? (\r\n        <>\r\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\r\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n            <Text maxWidth=\"80px\" bold>\r\n              {price.toLocaleString(undefined, {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 5,\r\n              })}\r\n            </Text>\r\n          </Flex>\r\n          {priceInUsd ? (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n              })})`}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"18px\" width=\"42px\" />\r\n          )}\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ActivityPrice\r\n","import React from 'react'\r\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport MobileModal from './MobileModal'\r\nimport ActivityPrice from './ActivityPrice'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface ActivityRowProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  isUserActivity?: boolean\r\n  isNftActivity?: boolean\r\n}\r\n\r\nconst ActivityRow: React.FC<ActivityRowProps> = ({\r\n  activity,\r\n  bnbBusdPrice,\r\n  nft,\r\n  isUserActivity = false,\r\n  isNftActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\r\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  })\r\n  const [onPresentMobileModal] = useModal(\r\n    <MobileModal\r\n      nft={nft}\r\n      activity={activity}\r\n      localeTimestamp={localeTimestamp}\r\n      bnbBusdPrice={bnbBusdPrice}\r\n      isUserActivity={isUserActivity}\r\n    />,\r\n  )\r\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\r\n  const tokenId =\r\n    nft && isPBCollection\r\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\r\n      : nft\r\n      ? nft.tokenId\r\n      : null\r\n\r\n  return (\r\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\r\n      {!isNftActivity ? (\r\n        <Td\r\n          {...((isXs || isSm) && {\r\n            onClick: (event) => {\r\n              event.stopPropagation()\r\n            },\r\n          })}\r\n        >\r\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\r\n              <RoundedImage\r\n                src={nft?.image.thumbnail}\r\n                alt={nft?.name}\r\n                width={64}\r\n                height={64}\r\n                mr={[0, null, '16px']}\r\n                mb={['8px', null, 0]}\r\n              />\r\n              <Flex flexDirection=\"column\">\r\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\r\n                  {nft?.collectionName}\r\n                </Text>\r\n                <Text textAlign={['center', null, 'left']} bold>\r\n                  {nft?.name}\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          </RouterLink>\r\n        </Td>\r\n      ) : null}\r\n      <Td>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <ActivityEventText marketEvent={activity.marketEvent} />\r\n        </Flex>\r\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\r\n          </Td>\r\n          {isUserActivity ? (\r\n            <Td>\r\n              <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\r\n              </Flex>\r\n            </Td>\r\n          ) : (\r\n            <>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      <Td>\r\n        <Flex justifyContent=\"center\">\r\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\r\n            {localeTimestamp}\r\n          </Text>\r\n        </Flex>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <Td>\r\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Td>\r\n      )}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ActivityRow\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\r\nimport EditProfileModal from '../Profile/components/EditProfileModal'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\r\n\r\nexport const StyledModal = styled(Modal)`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst TextWrapper = styled(Flex)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\ninterface ProfileNftModalProps extends InjectedModalProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\r\n\r\n  return (\r\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex p=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n            <Text bold>{nft.name}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            {/* TODO: Add lowestPrice when available */}\r\n          </Grid>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\r\n          <Flex flex=\"2\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Token ID: %id%', { id: nft.tokenId })}\r\n            </Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" flex=\"3\">\r\n            <Button\r\n              as={Link}\r\n              p=\"0px\"\r\n              height=\"16px\"\r\n              external\r\n              variant=\"text\"\r\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\r\n            >\r\n              {t('View Item')}\r\n            </Button>\r\n            <HorizontalDivider />\r\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\r\n              BscScan\r\n            </LinkExternal>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\r\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\r\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\r\n            {t(\r\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\r\n            )}\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Go to your profile page to continue.')}\r\n          </Text>\r\n        </TextWrapper>\r\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\r\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\r\n            {t('Remove Profile Pic')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ProfileNftModal\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { StepIndicator } from './styles'\r\n\r\ninterface ApproveAndConfirmStageProps {\r\n  variant: 'buy' | 'sell'\r\n  isApproved: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  handleApprove: () => void\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown if user wants to pay with WBNB and contract isn't approved yet\r\n// Sell Flow:\r\n// Shown the first time user puts NFT for sale\r\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\r\n  variant,\r\n  isApproved,\r\n  isApproving,\r\n  isConfirming,\r\n  handleApprove,\r\n  handleConfirm,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex mb=\"8px\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <StepIndicator success={isApproved}>\r\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n                1\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\r\n              {isApproved ? t('Enabled') : t('Enable')}\r\n            </Text>\r\n          </Flex>\r\n          {!isApproved && (\r\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\r\n              {variant === 'buy'\r\n                ? t('Please enable WBNB spending in your wallet')\r\n                : t('Please enable your NFT to be sent to the market')}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isApproving && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      {!isApproved && (\r\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\r\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\r\n        </Button>\r\n      )}\r\n      <Flex alignItems=\"center\" mt=\"8px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <StepIndicator success={!!0} disabled={!isApproved}>\r\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\r\n                2\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveAndConfirmStage\r\n","import React from 'react'\r\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { Divider } from './styles'\r\n\r\ninterface TransactionConfirmedProps {\r\n  txHash: string\r\n  onDismiss: () => void\r\n}\r\n\r\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\r\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\r\n        <Text bold>{t('Transaction Confirmed')}</Text>\r\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\r\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmed\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ConfirmStageProps {\r\n  isConfirming: boolean\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown in case user wants to pay with BNB\r\n// or if user wants to pay with WBNB and it is already approved\r\n// Sell Flow:\r\n// Shown if user adjusts the price or removes NFT from the market\r\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <Text fontSize=\"20px\" bold color=\"secondary\">\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ConfirmStage\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/ApproveConfirmButtons.tsx","components/FoldableSection/FoldableText.tsx","views/Ifos/components/IfoFoldableCard/types.ts","views/Ifos/components/Hero.tsx","views/Ifos/hooks/helpers.ts","views/Ifos/hooks/v2/useGetPublicIfoData.ts","views/Ifos/hooks/useIfoAllowance.ts","views/Ifos/hooks/v3/useGetWalletIfoData.ts","views/Ifos/hooks/useIfoApprove.ts","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetTokenModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/IfoRibbon.tsx","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Ifos/components/IfoPoolVaultCard.tsx","views/Ifos/components/IfoQuestions/config.ts","views/Ifos/components/IfoQuestions/index.tsx","views/Ifos/components/IfoSteps.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/hooks/v1/useGetPublicIfoData.ts","views/Ifos/hooks/v1/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV1Data.tsx","views/Ifos/hooks/v2/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV2Data.tsx","views/Ifos/components/IfoCardV3Data.tsx","views/Ifos/PastIfo.tsx","views/Ifos/index.tsx","hooks/useApproveConfirmTransaction.ts"],"names":["ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","buttonArrangement","ROW","confirmLabel","confirmId","t","useTranslation","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","id","Wrapper","Flex","StyledExpandableLabelWrapper","StyledChildrenFlex","isExpanded","colors","inputSecondary","FoldableText","title","children","props","useState","setIsExpanded","flexDirection","alignItems","pb","fontWeight","expanded","EnableStatus","StyledHero","Box","isDark","StyledHeading","Heading","StyledButton","tertiary","primary","shadows","inset","DesktopButton","StyledSubTitle","Text","Hero","isMobile","useMatchBreakpoints","handleClick","document","getElementById","scrollIntoView","mb","py","minHeight","Container","style","gap","as","bold","variant","getStatus","currentBlock","startBlock","endBlock","TAX_PRECISION","ethers","FixedNumber","from","formatPool","pool","raisingAmountPool","BigNumber","toString","BIG_ZERO","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","cakePriceUsd","usePriceCakeBusd","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","currencyPriceInUSD","tokens","cake","isInitialized","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","thresholdPoints","startBlockNum","endBlockNum","numberPoints","state","setState","fetchIfoData","useCallback","a","multicallv2","ifoV2Abi","name","params","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","divUnsafe","toUnsafeFloat","totalBlocks","prev","BSC_BLOCK_TIME","useIfoAllowance","tokenContract","spenderAddress","dependency","account","useWeb3React","allowance","setAllowance","useEffect","res","console","error","fetch","initialState","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","useGetWalletIfoData","dispatch","useAppDispatch","credit","useIfoPoolCredit","contract","useIfoV2Contract","currencyContract","useERC20","ifoCalls","map","method","fetchIfoPoolUserAndCredit","userInfo","amounts","prevState","resetIfoData","ifoCredit","creditLeft","minus","setPendingTx","poolId","setIsClaimed","useIfoApprove","callWithGasPrice","useCallWithGasPrice","constants","MaxUint256","tx","wait","SmartContractIcon","viewBox","fill","xmlns","d","fillRule","clipRule","FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT","BIG_TEN","AchievementFlex","isFinished","InlinePrize","IfoAchievement","publicIfoData","tokenName","token","toLowerCase","campaignTitle","minLpForAchievement","formatBigNumber","toFixed","p","flex","src","height","mr","ml","fontSize","lineHeight","gt","amount","pt","pl","external","href","articleUrl","getBscScanLink","twitterUrl","telegramUrl","description","PercentageOfTotal","userAmount","totalAmount","percentOfUserDisplay","isGreaterThan","times","toLocaleString","maximumFractionDigits","num","SkeletonCardActions","SkeletonCardTokens","SkeletonCardDetails","TokenSection","primaryToken","secondaryToken","TokenImage","CommitTokenSection","commitToken","equals","cakeBnbLpToken","wbnb","Label","textTransform","Value","wordBreak","OnSaleInfo","saleAmount","distributionRatio","toUpperCase","ratio","MessageText","$isLink","IfoCardTokens","walletIfoData","hasProfile","enableStatus","useTooltip","placement","targetRef","tooltip","tooltipVisible","publicPoolCharacteristics","userPoolCharacteristics","ifoPoolVault","useIfoPoolVault","useIfoWithApr","stakingTokenBalance","userData","useModal","VaultStakeModal","stakingMax","performanceFee","fees","performanceFeeAsDecimal","onPresentStake","message","my","version","getBalanceNumber","ENABLED","mt","IS_ENABLING","decimals","isEqualTo","textAlign","ref","display","marginLeft","renderTokenSection","GetTokenModal","onDismiss","maxWidth","margin","Link","minWidth","multiplierValues","gasPrice","parseUnits","ContributeModal","userCurrencyBalance","onSuccess","value","setValue","raisingTokenContract","valueWithTokenDecimals","DEFAULT_TOKEN_DECIMAL","label","useApproveConfirmTransaction","onRequiresApproval","response","currentAllowance","PoolIds","receipt","transactionHash","isApproved","isConfirmed","handleApprove","handleConfirm","maximumTokenEntry","useMemo","isLessThanOrEqualTo","maximumTokenCommittable","isWarning","formatNumber","getBalanceAmount","flexGrow","split","toLocaleLowerCase","currencyValue","onUserInput","onBlur","balance","multiplierValue","index","scale","length","isNaN","eq","ContributeButton","toastSuccess","useToast","useBlock","useTokenBalance","handleContributeSuccess","txHash","Promise","all","Toast","onPresentContributeModal","onPresentGetTokenModal","isDisabled","isGreaterThanOrEqualTo","ClaimButton","ifoVersion","toastError","isPending","handleClaim","harvest","harvestPool","IfoCardActions","to","nftsBaseUrl","ConnectWalletButton","FooterEntry","small","MaxTokenEntry","maxToken","isCurrencyCake","isV3","tooltipContent","price","useBUSDPrice","dollarValueOfToken","multiplyPriceByAmount","IfoCardDetails","poolCharacteristic","version3MaxTokens","maxLpTokens","totalCommittedPercent","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","pricePerTokenWithFeeToOriginalRatio","plus","pricePerTokenWithFee","tokenOfferingPrice","tokenEntry","paddingTop","raiseAmount","cakeToBurn","StyledCard","Card","SmallCard","config","cardConfig","useProfile","isProfileLoading","GradientText","FlexGap","SoonTimer","timeUntil","getTimePeriods","position","animation","days","hours","minutes","EndInHeading","LiveNowHeading","LiveTimer","BigCurve","$status","input","IfoRibbon","Component","$useDark","$background","Math","min","max","overflow","IfoRibbonEnd","IfoRibbonSoon","IfoRibbonLive","$isCurrent","gradients","bubblegum","dropdown","sm","Header","CardHeader","ifoId","CardsWrapper","xxl","singleCard","StyledCardBody","CardBody","StyledCardFooter","CardFooter","backgroundAlt","StyledNoHatBunny","$isLive","lg","NoHatBunny","isLive","isCurrent","isXs","isSm","isMd","isSmallerThanTablet","alt","IfoCurrentCard","shouldShowBunny","className","bottom","zIndex","FoldableContent","isVisible","IfoCard","fetchPublicIfoData","isPublicIfoDataInitialized","fetchWalletIfoData","resetWalletIfoData","isWalletDataInitialized","DISABLED","setEnableStatus","isRecentlyActive","isActive","fastRefresh","useRefresh","isWindowVisible","useIsWindowVisible","lte","checkAllowance","IfoPoolCard","IfoFoldableCard","isDesktop","borderRadius","IfoLayout","IfoLayoutWrapper","StyledCardMobile","StyledTokenContent","ActionContainer","invertedContrast","IfoPoolVaultCardMobile","userDataLoaded","useActiveWeb3React","creditStartBlock","useIfoPooStartBlock","startBlockTooltip","startBlockTooltipVisible","startBlockTargetRef","cakeAsNumberBalance","cakeAsBigNumber","getDecimalAmount","cakePriceBusd","stakedDollarValue","multipliedBy","stakingToken","Balance","prefix","unit","AprRow","stakedBalance","vaultKey","VaultKey","IfoPool","Stake","UnstakingFeeCountdownRow","ExpandedFooter","IfoPoolVaultCard","CakeVaultCard","showStakedOnly","m","ImageWrapper","DetailsWrapper","IfoQuestions","i","desc","InlineLink","SmallStakePoolCard","cardBorder","background","Step1","flexWrap","alignSelf","Step2","isCommitted","IfoSteps","stepsValidationStatus","getStatusProp","arePreviousValid","every","slice","Boolean","renderCardBody","step","isStepValid","RouterLink","_","statusFirstPart","statusSecondPart","activeIfo","ifosConfig","find","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV3Data","ifoV1Abi","raisingAmount","useIfoV1Contract","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","claimed","IfoCardV1Data","useGetPublicIfoV1Data","useGetWalletIfoV1Data","IfoCardV2Data","useGetWalletIfoV2Data","IfoCardV3Data","inactiveIfo","filter","PastIfo","Ifos","useRouteMatch","path","isExact","useFetchIfoPool","useFetchPublicPoolsData","useFetchUserPools","items","activeItem","exact","CurrentIfo","approvalState","confirmState","reducer","actions","type","noop","onApproveSuccess","useReducer","handlePreApprove","useRef","current","then","result","hasApproveFailed","hasConfirmFailed"],"mappings":"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","file":"static/js/25.878416ed.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ExpandableLabel, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FoldableTextProps extends FlexProps {\r\n  title?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledExpandableLabelWrapper = styled(Flex)`\r\n  button {\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst StyledChildrenFlex = styled(Flex)<{ isExpanded?: boolean }>`\r\n  overflow: hidden;\r\n  height: ${({ isExpanded }) => (isExpanded ? '100%' : '0px')};\r\n  padding-bottom: ${({ isExpanded }) => (isExpanded ? '16px' : '0px')};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n`\r\n\r\nconst FoldableText: React.FC<FoldableTextProps> = ({ title, children, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  return (\r\n    <Wrapper {...props} flexDirection=\"column\" onClick={() => setIsExpanded(!isExpanded)}>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" pb=\"16px\">\r\n        <Text fontWeight=\"bold\">{title}</Text>\r\n        <StyledExpandableLabelWrapper>\r\n          <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n            {isExpanded ? t('Hide') : t('Details')}\r\n          </ExpandableLabel>\r\n        </StyledExpandableLabelWrapper>\r\n      </Flex>\r\n      <StyledChildrenFlex isExpanded={isExpanded} flexDirection=\"column\">\r\n        {children}\r\n      </StyledChildrenFlex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FoldableText\r\n","export enum EnableStatus {\r\n  ENABLED = 'enabled',\r\n  DISABLED = 'disabled',\r\n  IS_ENABLING = 'is_enabling',\r\n}\r\n\r\nexport default EnableStatus\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Heading, Text, Button, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport Container from 'components/Layout/Container'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledHero = styled(Box)`\r\n  background-image: url('/images/ifos/assets/ifo-banner-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\r\n  background-position: top, center;\r\n  background-repeat: no-repeat;\r\n  background-size: auto 100%;\r\n`\r\n\r\nconst StyledHeading = styled(Heading)`\r\n  font-size: 40px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    font-size: 64px;\r\n  }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.colors.tertiary};\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 4px 13px;\r\n  height: auto;\r\n  text-transform: uppercase;\r\n  align-self: flex-start;\r\n  font-size: 12px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border-radius: 8px;\r\n  margin-left: 8px;\r\n`\r\n\r\nconst DesktopButton = styled(Button)`\r\n  align-self: flex-end;\r\n`\r\n\r\nconst StyledSubTitle = styled(Text)`\r\n  font-size: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    font-size: 20px;\r\n  }\r\n`\r\n\r\nconst Hero = () => {\r\n  const { t } = useTranslation()\r\n\r\n  const { isMobile } = useMatchBreakpoints()\r\n\r\n  const handleClick = () => {\r\n    document.getElementById('ifo-how-to')?.scrollIntoView()\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"8px\">\r\n      <StyledHero py={['16px', '16px', '32px']} minHeight={['212px', '212px', '197px']}>\r\n        <Container>\r\n          <Flex\r\n            justifyContent=\"space-between\"\r\n            flexDirection={['column', 'column', 'column', 'row']}\r\n            style={{ gap: '4px' }}\r\n          >\r\n            <Box>\r\n              <StyledHeading as=\"h1\" mb={['12px', '12px', '16px']}>\r\n                {t('IFO: Initial Farm Offerings')}\r\n              </StyledHeading>\r\n              <StyledSubTitle bold>\r\n                {t('Buy new tokens launching on Binance Smart Chain')}\r\n                {isMobile && <StyledButton onClick={handleClick}>{t('How does it work?')}</StyledButton>}\r\n              </StyledSubTitle>\r\n            </Box>\r\n            {!isMobile && (\r\n              <DesktopButton onClick={handleClick} variant=\"subtle\">\r\n                {t('How does it work?')}\r\n              </DesktopButton>\r\n            )}\r\n          </Flex>\r\n        </Container>\r\n      </StyledHero>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import { IfoStatus } from 'config/constants/types'\r\n\r\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\r\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\r\n  // making the UI change to an inaccurate status\r\n  if (currentBlock === 0) {\r\n    return 'idle'\r\n  }\r\n\r\n  if (currentBlock < startBlock) {\r\n    return 'coming_soon'\r\n  }\r\n\r\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\r\n    return 'live'\r\n  }\r\n\r\n  if (currentBlock > endBlock) {\r\n    return 'finished'\r\n  }\r\n\r\n  return 'idle'\r\n}\r\n\r\nexport default null\r\n","import BigNumber from 'bignumber.js'\r\nimport { useState, useCallback } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Ifo, IfoStatus } from 'config/constants/types'\r\nimport { ethers } from 'ethers'\r\nimport { useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\r\n// 1,000,000,000 / 100\r\nconst TAX_PRECISION = ethers.FixedNumber.from(10000000000)\r\n\r\nconst formatPool = (pool) => ({\r\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\r\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\r\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\r\n  hasTax: pool ? pool[3] : false,\r\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\r\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\r\n})\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const currencyPriceInUSD = ifo.currency === tokens.cake ? cakePriceUsd : lpTokenPriceInUsd\r\n\r\n  const [state, setState] = useState({\r\n    isInitialized: false,\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    poolBasic: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    poolUnlimited: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    thresholdPoints: undefined,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: 0,\r\n  })\r\n\r\n  const fetchIfoData = useCallback(\r\n    async (currentBlock: number) => {\r\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints, thresholdPoints] =\r\n        await multicallv2(ifoV2Abi, [\r\n          {\r\n            address,\r\n            name: 'startBlock',\r\n          },\r\n          {\r\n            address,\r\n            name: 'endBlock',\r\n          },\r\n          {\r\n            address,\r\n            name: 'viewPoolInformation',\r\n            params: [0],\r\n          },\r\n          {\r\n            address,\r\n            name: 'viewPoolInformation',\r\n            params: [1],\r\n          },\r\n          {\r\n            address,\r\n            name: 'viewPoolTaxRateOverflow',\r\n            params: [1],\r\n          },\r\n          {\r\n            address,\r\n            name: 'numberPoints',\r\n          },\r\n          {\r\n            address,\r\n            name: 'thresholdPoints',\r\n          },\r\n        ])\r\n\r\n      const poolBasicFormatted = formatPool(poolBasic)\r\n      const poolUnlimitedFormatted = formatPool(poolUnlimited)\r\n\r\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n      const taxRateNum = taxRate ? ethers.FixedNumber.from(taxRate[0]).divUnsafe(TAX_PRECISION).toUnsafeFloat() : 0\r\n\r\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n      const totalBlocks = endBlockNum - startBlockNum\r\n      const blocksRemaining = endBlockNum - currentBlock\r\n\r\n      // Calculate the total progress until finished or until start\r\n      const progress =\r\n        currentBlock > startBlockNum\r\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isInitialized: true,\r\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n        poolBasic: { ...poolBasicFormatted, taxRate: 0 },\r\n        poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\r\n        status,\r\n        progress,\r\n        blocksRemaining,\r\n        startBlockNum,\r\n        endBlockNum,\r\n        thresholdPoints: thresholdPoints && thresholdPoints[0],\r\n        numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\r\n      }))\r\n    },\r\n    [releaseBlockNumber, address],\r\n  )\r\n\r\n  return { ...state, currencyPriceInUSD, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'ethers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\n// Retrieve IFO allowance\r\nconst useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.allowance(account, spenderAddress)\r\n        setAllowance(new BigNumber(res.toString()))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetch()\r\n    }\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\nexport default useIfoAllowance\r\n","import { useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { useIfoPoolCredit } from 'state/pools/hooks'\r\nimport { fetchIfoPoolUserAndCredit } from 'state/pools'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\nconst initialState = {\r\n  isInitialized: false,\r\n  poolBasic: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n  poolUnlimited: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>(initialState)\r\n  const dispatch = useAppDispatch()\r\n  const credit = useIfoPoolCredit()\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(currency.address)\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    dispatch(fetchIfoPoolUserAndCredit({ account }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isInitialized: true,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address, dispatch])\r\n\r\n  const resetIfoData = useCallback(() => {\r\n    setState({ ...initialState })\r\n  }, [])\r\n\r\n  const ifoCredit = {\r\n    credit,\r\n    creditLeft: credit\r\n      .minus(state.poolBasic.amountTokenCommittedInLP)\r\n      .minus(state.poolUnlimited.amountTokenCommittedInLP),\r\n  }\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData, ifoCredit }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const onApprove = useCallback(async (): Promise<ethers.providers.TransactionReceipt> => {\r\n    const tx = await callWithGasPrice(tokenContract, 'approve', [spenderAddress, ethers.constants.MaxUint256])\r\n    return tx.wait()\r\n  }, [spenderAddress, tokenContract, callWithGasPrice])\r\n\r\n  return onApprove\r\n}\r\n\r\nexport default useIfoApprove\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Flex,\r\n  Image,\r\n  Text,\r\n  PrizeIcon,\r\n  Skeleton,\r\n  LanguageIcon,\r\n  SvgProps,\r\n  Svg,\r\n  TwitterIcon,\r\n  Link,\r\n  TelegramIcon,\r\n} from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\nimport { Ifo } from 'config/constants/types'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { FlexGap } from 'components/Layout/Flex'\r\n\r\nconst SmartContractIcon: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\r\n      <path d=\"M10.037 6a.75.75 0 000 1.5h7.5a.75.75 0 000-1.5h-7.5zM9.287 9.75a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM10.037 12a.75.75 0 000 1.5h7.5a.75.75 0 000-1.5h-7.5z\" />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M5.287 4a2 2 0 012-2h13a2 2 0 012 2v15c0 1.66-1.34 3-3 3h-14c-1.66 0-3-1.34-3-3v-2c0-.55.45-1 1-1h2V4zm0 16h11v-2h-12v1c0 .55.45 1 1 1zm14 0c.55 0 1-.45 1-1V4h-13v12h10c.55 0 1 .45 1 1v2c0 .55.45 1 1 1z\"\r\n      />\r\n    </Svg>\r\n  )\r\n}\r\n\r\nconst FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nconst Container = styled(Flex)`\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: left;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n    align-items: initial;\r\n  }\r\n`\r\n\r\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\r\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\r\n  text-align: left;\r\n`\r\n\r\nconst InlinePrize = styled(Flex)`\r\n  display: inline-flex;\r\n  vertical-align: top;\r\n`\r\n\r\nconst IfoAchievement: React.FC<Props> = ({ ifo, publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const tokenName = ifo.token.symbol?.toLowerCase()\r\n  const campaignTitle = ifo.name\r\n  const minLpForAchievement = publicIfoData.thresholdPoints\r\n    ? formatBigNumber(publicIfoData.thresholdPoints, 3)\r\n    : FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT.div(publicIfoData.currencyPriceInUSD).toNumber().toFixed(3)\r\n\r\n  return (\r\n    <Container p=\"16px\" pb=\"32px\">\r\n      <AchievementFlex isFinished={publicIfoData.status === 'finished'} alignItems=\"flex-start\" flex={1}>\r\n        <Image src={`/images/achievements/ifo-${tokenName}.svg`} width={56} height={56} mr=\"8px\" />\r\n        <Flex flexDirection=\"column\" ml=\"8px\">\r\n          <Text color=\"secondary\" fontSize=\"12px\">\r\n            {`${t('Achievement')}:`}\r\n          </Text>\r\n          <Flex>\r\n            <Text bold mr=\"8px\" lineHeight={1.2}>\r\n              {t('IFO Shopper: %title%', { title: campaignTitle })}\r\n              <InlinePrize alignItems=\"center\" ml=\"8px\">\r\n                <PrizeIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\r\n                <Text lineHeight={1.2} color=\"textSubtle\">\r\n                  {publicIfoData.numberPoints}\r\n                </Text>\r\n              </InlinePrize>\r\n            </Text>\r\n          </Flex>\r\n          {publicIfoData.currencyPriceInUSD.gt(0) ? (\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Commit ~%amount% %symbol% in total to earn!', {\r\n                amount: minLpForAchievement,\r\n                symbol: ifo.currency === tokens.cake ? '$MINTS' : 'LP',\r\n              })}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton minHeight={18} width={80} />\r\n          )}\r\n          <FlexGap gap=\"16px\" pt=\"24px\" pl=\"4px\">\r\n            <Link external href={ifo.articleUrl}>\r\n              <LanguageIcon color=\"textSubtle\" />\r\n            </Link>\r\n            <Link external href={getBscScanLink(ifo.address, 'address')}>\r\n              <SmartContractIcon color=\"textSubtle\" />\r\n            </Link>\r\n            {ifo.twitterUrl && (\r\n              <Link external href={ifo.twitterUrl}>\r\n                <TwitterIcon color=\"textSubtle\" />\r\n              </Link>\r\n            )}\r\n            {ifo.telegramUrl && (\r\n              <Link external href={ifo.telegramUrl}>\r\n                <TelegramIcon color=\"textSubtle\" />\r\n              </Link>\r\n            )}\r\n          </FlexGap>\r\n        </Flex>\r\n      </AchievementFlex>\r\n      {ifo.description && (\r\n        <Flex alignItems=\"flex-end\" flexDirection=\"column\" flex={1} pl=\"16px\">\r\n          <Text fontSize=\"14px\" lineHeight={1.2}>\r\n            {ifo.description}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default IfoAchievement\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface PercentageOfTotalProps extends TextProps {\r\n  userAmount: BigNumber\r\n  totalAmount: BigNumber\r\n}\r\n\r\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const percentOfUserContribution = totalAmount.isGreaterThan(0) ? userAmount.div(totalAmount).times(100).toNumber() : 0\r\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\r\n\r\n  return (\r\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\r\n      {t('%num% of total', { num: percentOfUserDisplay })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default PercentageOfTotal\r\n","import React from 'react'\r\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport const SkeletonCardActions = () => {\r\n  return <Skeleton height=\"48px\" />\r\n}\r\n\r\nexport const SkeletonCardTokens = () => {\r\n  return (\r\n    <div>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\r\n        <Skeleton width=\"90%\" />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\r\n        <Skeleton width=\"90%\" />\r\n      </Flex>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SkeletonCardDetails = () => {\r\n  return (\r\n    <div>\r\n      <Skeleton mb=\"8px\" />\r\n      <Skeleton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default null\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport {\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  CheckmarkCircleIcon,\r\n  FlexProps,\r\n  HelpIcon,\r\n  useTooltip,\r\n  Button,\r\n  AutoRenewIcon,\r\n  BunnyPlaceholderIcon,\r\n  Message,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport tokens from 'config/constants/tokens'\r\nimport { cakeBnbLpToken } from 'config/constants/ifo'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\r\nimport VaultStakeModal from 'views/Pools/components/CakeVaultCard/VaultStakeModal'\r\nimport { useIfoPoolVault, useIfoPoolCredit, useIfoWithApr } from 'state/pools/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { EnableStatus } from '../types'\r\nimport PercentageOfTotal from './PercentageOfTotal'\r\nimport { SkeletonCardTokens } from './Skeletons'\r\n\r\ninterface TokenSectionProps extends FlexProps {\r\n  primaryToken?: Token\r\n  secondaryToken?: Token\r\n}\r\n\r\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\r\n  const renderTokenComponent = () => {\r\n    if (!primaryToken) {\r\n      return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\r\n    }\r\n\r\n    if (primaryToken && secondaryToken) {\r\n      return (\r\n        <TokenPairImage\r\n          variant=\"inverted\"\r\n          primaryToken={primaryToken}\r\n          height={32}\r\n          width={32}\r\n          secondaryToken={secondaryToken}\r\n          mr=\"16px\"\r\n        />\r\n      )\r\n    }\r\n\r\n    return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\r\n  }\r\n\r\n  return (\r\n    <Flex {...props}>\r\n      {renderTokenComponent()}\r\n      <div>{children}</div>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst CommitTokenSection: React.FC<TokenSectionProps & { commitToken: Token }> = ({ commitToken, ...props }) => {\r\n  if (commitToken.equals(cakeBnbLpToken)) {\r\n    return <TokenSection primaryToken={tokens.cake} secondaryToken={tokens.wbnb} {...props} />\r\n  }\r\n  return <TokenSection primaryToken={commitToken} {...props} />\r\n}\r\n\r\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\r\n\r\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\r\n\r\ninterface IfoCardTokensProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  hasProfile: boolean\r\n  isLoading: boolean\r\n  onApprove: () => Promise<any>\r\n  enableStatus: EnableStatus\r\n}\r\n\r\nconst OnSaleInfo = ({ token, saleAmount, distributionRatio }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <TokenSection primaryToken={token}>\r\n      <Flex flexDirection=\"column\">\r\n        <Label>{t('On sale').toUpperCase()}</Label>\r\n        <Value>{saleAmount}</Value>\r\n        <Text fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('%ratio%% of total sale', { ratio: distributionRatio })}\r\n        </Text>\r\n      </Flex>\r\n    </TokenSection>\r\n  )\r\n}\r\n\r\nconst MessageText = styled(Text)<{ $isLink?: boolean }>`\r\n  ${({ $isLink }) =>\r\n    $isLink &&\r\n    `\r\n    text-decoration: underline;\r\n    font-weight: bold;\r\n  `}\r\n  font-size: 14px;\r\n`\r\n\r\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  hasProfile,\r\n  isLoading,\r\n  onApprove,\r\n  enableStatus,\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\r\n      'Sorry, you didn’t contribute enough $MINTS to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your $MINTS.',\r\n    ),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency, token } = ifo\r\n  const { hasClaimed } = userPoolCharacteristics\r\n  const distributionRatio = ifo[poolId].distributionRatio * 100\r\n\r\n  const ifoPoolVault = useIfoPoolVault()\r\n  const { pool } = useIfoWithApr()\r\n  const credit = useIfoPoolCredit()\r\n\r\n  const stakingTokenBalance = pool?.userData?.stakingTokenBalance\r\n    ? new BigNumber(pool.userData.stakingTokenBalance)\r\n    : BIG_ZERO\r\n\r\n  const [onPresentStake] = useModal(\r\n    <VaultStakeModal\r\n      stakingMax={stakingTokenBalance}\r\n      performanceFee={ifoPoolVault.fees.performanceFeeAsDecimal}\r\n      pool={pool}\r\n    />,\r\n  )\r\n\r\n  const renderTokenSection = () => {\r\n    if (isLoading) {\r\n      return <SkeletonCardTokens />\r\n    }\r\n    if (!account) {\r\n      return <OnSaleInfo token={token} distributionRatio={distributionRatio} saleAmount={ifo[poolId].saleAmount} />\r\n    }\r\n\r\n    let message\r\n\r\n    if (account && !hasProfile) {\r\n      message = (\r\n        <Message my=\"24px\" p=\"8px\" variant=\"warning\">\r\n          <Box>\r\n            <MessageText as=\"span\" color=\"#D67E0A\">\r\n              {publicIfoData.status === 'finished'\r\n                ? t('Activate MintySwap Profile to take part in next IFO‘s!')\r\n                : t('You need an active MintySwap Profile to take part in an IFO!')}\r\n            </MessageText>{' '}\r\n            <MessageText as=\"a\" $isLink color=\"#D67E0A\" href=\"#ifo-how-to\">\r\n              {t('How does it work?')} »\r\n            </MessageText>\r\n          </Box>\r\n        </Message>\r\n      )\r\n    }\r\n\r\n    if (ifo.version === 3 && getBalanceNumber(credit) === 0) {\r\n      message = (\r\n        <Message my=\"24px\" p=\"8px\" variant=\"danger\">\r\n          <Box>\r\n            <MessageText as=\"span\" color=\"failure\">\r\n              {t('You don’t have any average $MINTS balance available to commit in the IFO $MINTS pool.')}\r\n            </MessageText>{' '}\r\n            <MessageText as=\"a\" $isLink color=\"failure\" fontWeight={700} href=\"#ifo-how-to\">\r\n              {t('How does it work?')} »\r\n            </MessageText>\r\n          </Box>\r\n        </Message>\r\n      )\r\n    }\r\n    if (account && !hasProfile) {\r\n      return (\r\n        <>\r\n          <OnSaleInfo token={token} distributionRatio={distributionRatio} saleAmount={ifo[poolId].saleAmount} />\r\n          {message}\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label>{t('On sale')}</Label>\r\n            <Value>{ifo[poolId].saleAmount}</Value>\r\n          </TokenSection>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\r\n            {t('%ratio%% of total sale', { ratio: distributionRatio })}\r\n          </Text>\r\n          {message}\r\n          {enableStatus !== EnableStatus.ENABLED && account && (\r\n            <Button\r\n              width=\"100%\"\r\n              mt=\"16px\"\r\n              onClick={onApprove}\r\n              isLoading={enableStatus === EnableStatus.IS_ENABLING}\r\n              endIcon={enableStatus === EnableStatus.IS_ENABLING ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            >\r\n              {t('Enable')}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'live') {\r\n      return (\r\n        <>\r\n          <CommitTokenSection commitToken={ifo.currency} mb=\"24px\">\r\n            <Label>{t('Your %symbol% committed', { symbol: currency.symbol })}</Label>\r\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\r\n            <PercentageOfTotal\r\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\r\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\r\n            />\r\n          </CommitTokenSection>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label>{t('%symbol% to receive', { symbol: token.symbol })}</Label>\r\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\r\n          </TokenSection>\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'finished') {\r\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\r\n        <Flex flexDirection=\"column\" alignItems=\"center\">\r\n          <BunnyPlaceholderIcon width={80} mb=\"16px\" />\r\n          <Text fontWeight={600}>{t('You didn’t participate in this sale!')}</Text>\r\n          <Text textAlign=\"center\" fontSize=\"14px\">\r\n            {t('To participate in the next IFO, stake some $MINTS in the IFO $MINTS pool!')}\r\n          </Text>\r\n          <MessageText as=\"a\" $isLink href=\"#ifo-how-to\" color=\"primary\" textAlign=\"center\">\r\n            {t('How does it work?')} »\r\n          </MessageText>\r\n          <Button mt=\"24px\" onClick={onPresentStake}>\r\n            {t('Stake $MINTS in IFO pool')}\r\n          </Button>\r\n        </Flex>\r\n      ) : (\r\n        <>\r\n          <CommitTokenSection commitToken={ifo.currency} mb=\"24px\">\r\n            <Label>\r\n              {t(hasClaimed ? 'Your %symbol% RECLAIMED' : 'Your %symbol% TO RECLAIM', { symbol: currency.symbol })}\r\n            </Label>\r\n            <Flex alignItems=\"center\">\r\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\r\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\r\n            </Flex>\r\n            <PercentageOfTotal\r\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\r\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\r\n            />\r\n          </CommitTokenSection>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label> {t(hasClaimed ? '%symbol% received' : '%symbol% to receive', { symbol: token.symbol })}</Label>\r\n            <Flex alignItems=\"center\">\r\n              <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\r\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\r\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\r\n                  <HelpIcon />\r\n                </div>\r\n              )}\r\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\r\n            </Flex>\r\n          </TokenSection>\r\n        </>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <Box>\r\n      {tooltipVisible && tooltip}\r\n      {renderTokenSection()}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default IfoCardTokens\r\n","import React from 'react'\r\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface Props {\r\n  currency: Token\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst GetTokenModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Modal title={t('%symbol% required', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"288px\">\r\n        <Image src={`/images/tokens/${currency.address}.svg`} width={72} height={72} margin=\"auto\" mb=\"24px\" />\r\n        <Text mb=\"16px\">\r\n          {t('You’ll need %symbol% tokens to participate in the IFO!', { symbol: currency.symbol })}\r\n        </Text>\r\n        <Text mb=\"24px\">\r\n          {t('Get %symbol%, or make sure your tokens aren’t staked somewhere else.', { symbol: currency.symbol })}\r\n        </Text>\r\n        <Button\r\n          as={Link}\r\n          external\r\n          href={`/swap?outputCurrency=${currency.address}`}\r\n          endIcon={<OpenNewIcon color=\"white\" />}\r\n          minWidth=\"100%\" // Bypass the width=\"fit-content\" on Links\r\n        >\r\n          {t('Get %symbol%', { symbol: currency.symbol })}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GetTokenModal\r\n","import React, { useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport {\r\n  Modal,\r\n  ModalBody,\r\n  Text,\r\n  Image,\r\n  Button,\r\n  BalanceInput,\r\n  Flex,\r\n  useTooltip,\r\n  TooltipText,\r\n  Box,\r\n  Link,\r\n} from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport tokens from 'config/constants/tokens'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  userCurrencyBalance: BigNumber\r\n  creditLeft: BigNumber\r\n  onSuccess: (amount: BigNumber, txHash: string) => void\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = parseUnits('10', 'gwei').toString()\r\n\r\nconst ContributeModal: React.FC<Props> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  userCurrencyBalance,\r\n  creditLeft,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency } = ifo\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { contract } = walletIfoData\r\n  const [value, setValue] = useState('')\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const raisingTokenContract = useERC20(currency.address)\r\n  const { t } = useTranslation()\r\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\r\n  const label = currency === tokens.cake ? t('Max. $MINTS entry') : t('Max. token entry')\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await raisingTokenContract.allowance(account, contract.address)\r\n          const currentAllowance = new BigNumber(response.toString())\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return callWithGasPrice(raisingTokenContract, 'approve', [contract.address, ethers.constants.MaxUint256], {\r\n          gasPrice,\r\n        })\r\n      },\r\n      onConfirm: () => {\r\n        return callWithGasPrice(\r\n          contract,\r\n          'depositPool',\r\n          [valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1],\r\n          {\r\n            gasPrice,\r\n          },\r\n        )\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        await onSuccess(valueWithTokenDecimals, receipt.transactionHash)\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  // in v3 max token entry is based on ifo credit and hard cap limit per user minus amount already committed\r\n  const maximumTokenEntry = useMemo(() => {\r\n    if (!creditLeft) {\r\n      return limitPerUserInLP.minus(amountTokenCommittedInLP)\r\n    }\r\n    if (limitPerUserInLP.isGreaterThan(0)) {\r\n      return limitPerUserInLP.isLessThanOrEqualTo(creditLeft) ? limitPerUserInLP : creditLeft\r\n    }\r\n    return creditLeft\r\n  }, [creditLeft, limitPerUserInLP, amountTokenCommittedInLP])\r\n\r\n  // include user balance for input\r\n  const maximumTokenCommittable = useMemo(() => {\r\n    return maximumTokenEntry.isLessThanOrEqualTo(userCurrencyBalance) ? maximumTokenEntry : userCurrencyBalance\r\n  }, [maximumTokenEntry, userCurrencyBalance])\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    poolId === PoolIds.poolBasic\r\n      ? t(\r\n          'For the basic sale, Max $MINTS entry is capped by minimum between your average $MINTS balance in the IFO $MINTS pool, or the pool’s hard cap. To increase the max entry, Stake more $MINTS into the IFO $MINTS pool',\r\n        )\r\n      : t(\r\n          'For the unlimited sale, Max $MINTS entry is capped by your average $MINTS balance in the IFO $MINTS pool. To increase the max entry, Stake more $MINTS into the IFO $MINTS pool',\r\n        ),\r\n    {},\r\n  )\r\n\r\n  const isWarning =\r\n    valueWithTokenDecimals.isGreaterThan(userCurrencyBalance) || valueWithTokenDecimals.isGreaterThan(maximumTokenEntry)\r\n\r\n  return (\r\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"360px\">\r\n        <Box p=\"2px\">\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            {tooltipVisible && tooltip}\r\n            <TooltipText ref={targetRef}>{label}:</TooltipText>\r\n            <Text>{`${formatNumber(getBalanceAmount(maximumTokenEntry, currency.decimals).toNumber(), 3, 3)} ${\r\n              ifo.currency.symbol\r\n            }`}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n            <Text>{t('Commit')}:</Text>\r\n            <Flex flexGrow={1} justifyContent=\"flex-end\">\r\n              <Image\r\n                src={\r\n                  ifo.currency.symbol === '$MINTS'\r\n                    ? '/images/cake.svg'\r\n                    : `/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`\r\n                }\r\n                width={24}\r\n                height={24}\r\n              />\r\n              <Text ml=\"4px\">{currency.symbol}</Text>\r\n            </Flex>\r\n          </Flex>\r\n          <BalanceInput\r\n            value={value}\r\n            currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\r\n            onUserInput={setValue}\r\n            isWarning={isWarning}\r\n            decimals={currency.decimals}\r\n            onBlur={() => {\r\n              if (isWarning) {\r\n                // auto adjust to max value\r\n                setValue(getBalanceAmount(maximumTokenCommittable).toString())\r\n              }\r\n            }}\r\n            mb=\"8px\"\r\n          />\r\n          {isWarning && (\r\n            <Text\r\n              color={valueWithTokenDecimals.isGreaterThan(userCurrencyBalance) ? 'failure' : 'warning'}\r\n              textAlign=\"right\"\r\n              fontSize=\"12px\"\r\n              mb=\"8px\"\r\n            >\r\n              {valueWithTokenDecimals.isGreaterThan(userCurrencyBalance)\r\n                ? t('Insufficient Balance')\r\n                : t('Exceeded max $MINTS entry')}\r\n            </Text>\r\n          )}\r\n          <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n            {t('Balance: %balance%', {\r\n              balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\r\n            })}\r\n          </Text>\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            {multiplierValues.map((multiplierValue, index) => (\r\n              <Button\r\n                key={multiplierValue}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={() => setValue(getBalanceAmount(maximumTokenCommittable.times(multiplierValue)).toString())}\r\n                mr={index < multiplierValues.length - 1 ? '8px' : 0}\r\n              >\r\n                {multiplierValue * 100}%\r\n              </Button>\r\n            ))}\r\n          </Flex>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n            {t(\r\n              'If you don’t commit enough $MINTS, you may not receive any IFO tokens at all and will only receive a full refund of your $MINTS.',\r\n            )}\r\n            <Link\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              href=\"https://docs.pancakeswap.finance/products/ifo-initial-farm-offering\"\r\n              external\r\n            >\r\n              {t('Read more')}\r\n            </Link>\r\n          </Text>\r\n          <ApproveConfirmButtons\r\n            isApproveDisabled={isConfirmed || isConfirming || isApproved}\r\n            isApproving={isApproving}\r\n            isConfirmDisabled={\r\n              !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0) || isWarning\r\n            }\r\n            isConfirming={isConfirming}\r\n            onApprove={handleApprove}\r\n            onConfirm={handleConfirm}\r\n          />\r\n        </Box>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ContributeModal\r\n","import React from 'react'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport GetTokenModal from './GetTokenModal'\r\nimport ContributeModal from './ContributeModal'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const { currentBlock } = useBlock()\r\n  const { balance: userCurrencyBalance } = useTokenBalance(ifo.currency.address)\r\n\r\n  // Refetch all the data, and display a message when fetching is done\r\n  const handleContributeSuccess = async (amount: BigNumber, txHash: string) => {\r\n    await Promise.all([publicIfoData.fetchIfoData(currentBlock), walletIfoData.fetchIfoData()])\r\n    toastSuccess(\r\n      t('Success!'),\r\n      <ToastDescriptionWithTx txHash={txHash}>\r\n        {t('You have contributed %amount% $MINTS to this IFO!', {\r\n          amount: getBalanceNumber(amount),\r\n        })}\r\n      </ToastDescriptionWithTx>,\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <ContributeModal\r\n      poolId={poolId}\r\n      creditLeft={walletIfoData.ifoCredit?.creditLeft}\r\n      ifo={ifo}\r\n      publicIfoData={publicIfoData}\r\n      walletIfoData={walletIfoData}\r\n      onSuccess={handleContributeSuccess}\r\n      userCurrencyBalance={userCurrencyBalance}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  const [onPresentGetTokenModal] = useModal(<GetTokenModal currency={ifo.currency} />, false)\r\n\r\n  const isDisabled =\r\n    isPendingTx ||\r\n    (walletIfoData.ifoCredit?.creditLeft && walletIfoData.ifoCredit?.creditLeft.isLessThanOrEqualTo(0)) ||\r\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\r\n\r\n  return (\r\n    <Button\r\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetTokenModal : onPresentContributeModal}\r\n      width=\"100%\"\r\n      disabled={isDisabled}\r\n    >\r\n      {isDisabled ? t('Max. Committed') : t('Commit $MINTS')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ContributeButton\r\n","import React from 'react'\r\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\r\nimport { PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifoVersion: number\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\r\n\r\n  const handleClaim = async () => {\r\n    try {\r\n      let txHash\r\n      setPendingTx(true)\r\n\r\n      if (ifoVersion === 1) {\r\n        const tx = await walletIfoData.contract.harvest()\r\n        const receipt = await tx.wait()\r\n        txHash = receipt.transactionHash\r\n      } else {\r\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\r\n        const receipt = await tx.wait()\r\n        txHash = receipt.transactionHash\r\n      }\r\n\r\n      walletIfoData.setIsClaimed(poolId)\r\n      toastSuccess(\r\n        t('Success!'),\r\n        <ToastDescriptionWithTx txHash={txHash}>\r\n          {t('You have successfully claimed your rewards.')}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(error)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClaim}\r\n      disabled={userPoolCharacteristics.isPendingTx}\r\n      width=\"100%\"\r\n      isLoading={userPoolCharacteristics.isPendingTx}\r\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n    >\r\n      {t('Claim')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Button } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport ContributeButton from './ContributeButton'\r\nimport ClaimButton from './ClaimButton'\r\nimport { SkeletonCardActions } from './Skeletons'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  hasProfile: boolean\r\n  isLoading: boolean\r\n}\r\n\r\nconst IfoCardActions: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData, hasProfile, isLoading }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  if (isLoading) {\r\n    return <SkeletonCardActions />\r\n  }\r\n\r\n  if (!account) {\r\n    return <ConnectWalletButton width=\"100%\" />\r\n  }\r\n\r\n  if (!hasProfile) {\r\n    return (\r\n      <Button as={Link} to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} width=\"100%\">\r\n        {t('Activate your Profile')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {publicIfoData.status === 'live' && (\r\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n      )}\r\n      {publicIfoData.status === 'finished' &&\r\n        !userPoolCharacteristics.hasClaimed &&\r\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\r\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\r\n          <ClaimButton poolId={poolId} ifoVersion={ifo.version} walletIfoData={walletIfoData} />\r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IfoCardActions\r\n","import React, { ReactNode } from 'react'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Text, Flex, Box, Skeleton, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport useBUSDPrice from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SkeletonCardDetails } from './Skeletons'\r\n\r\nexport interface IfoCardDetailsProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nexport interface FooterEntryProps {\r\n  label: ReactNode\r\n  value: string | number\r\n}\r\n\r\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text small color=\"textSubtle\">\r\n        {label}\r\n      </Text>\r\n      {value ? (\r\n        <Text small textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      ) : (\r\n        <Skeleton height={21} width={80} />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst MaxTokenEntry = ({ maxToken, ifo, poolId }: { maxToken: number; ifo: Ifo; poolId: PoolIds }) => {\r\n  const isCurrencyCake = ifo.currency === tokens.cake\r\n  const isV3 = ifo.version === 3\r\n  const { t } = useTranslation()\r\n\r\n  const tooltipContent =\r\n    poolId === PoolIds.poolBasic\r\n      ? t(\r\n          'For the basic sale, Max $MINTS entry is capped by minimum between your average $MINTS balance in the IFO $MINTS pool, or the pool’s hard cap. To increase the max entry, Stake more $MINTS into the IFO $MINTS pool',\r\n        )\r\n      : t(\r\n          'For the unlimited sale, Max $MINTS entry is capped by your average $MINTS balance in the IFO $MINTS pool. To increase the max entry, Stake more $MINTS into the IFO CAEK pool',\r\n        )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n  const label = isCurrencyCake ? t('Max. $MINTS entry') : t('Max. token entry')\r\n  const price = useBUSDPrice(ifo.currency)\r\n\r\n  const dollarValueOfToken = multiplyPriceByAmount(price, maxToken, ifo.currency.decimals)\r\n\r\n  if (!isV3 && poolId === PoolIds.poolUnlimited) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isV3 && tooltipVisible && tooltip}\r\n      <FooterEntry\r\n        label={\r\n          isV3 ? (\r\n            <TooltipText small color=\"textSubtle\" ref={targetRef}>\r\n              {label}\r\n            </TooltipText>\r\n          ) : (\r\n            label\r\n          )\r\n        }\r\n        value={`${formatNumber(maxToken, 3, 3)} ${!isCurrencyCake ? ifo.currency.symbol : ''} ${\r\n          dollarValueOfToken > 0 ? ` ~($${dollarValueOfToken.toFixed(0)})` : ''\r\n        }`}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, currencyPriceInUSD } = publicIfoData\r\n  const poolCharacteristic = publicIfoData[poolId]\r\n\r\n  let version3MaxTokens = walletIfoData.ifoCredit?.creditLeft\r\n    ? // if creditLeft > limit show limit else show creditLeft\r\n      walletIfoData.ifoCredit.creditLeft.gt(poolCharacteristic.limitPerUserInLP)\r\n      ? poolCharacteristic.limitPerUserInLP\r\n      : walletIfoData.ifoCredit.creditLeft\r\n    : null\r\n\r\n  // unlimited pool just show the credit left\r\n  version3MaxTokens = poolId === PoolIds.poolUnlimited ? walletIfoData.ifoCredit?.creditLeft : version3MaxTokens\r\n\r\n  /* Format start */\r\n  const maxLpTokens =\r\n    ifo.version === 3\r\n      ? version3MaxTokens\r\n        ? getBalanceNumber(version3MaxTokens, ifo.currency.decimals)\r\n        : 0\r\n      : getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\r\n  const taxRate = `${poolCharacteristic.taxRate}%`\r\n\r\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\r\n    .div(poolCharacteristic.raisingAmountPool)\r\n    .times(100)\r\n    .toFixed(2)\r\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\r\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\r\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\r\n\r\n  const sumTaxesOverflow = poolCharacteristic.totalAmountPool.times(poolCharacteristic.taxRate).times(0.01)\r\n  const pricePerTokenWithFeeToOriginalRatio = sumTaxesOverflow\r\n    .plus(poolCharacteristic.raisingAmountPool)\r\n    .div(poolCharacteristic.offeringAmountPool)\r\n    .div(poolCharacteristic.raisingAmountPool.div(poolCharacteristic.offeringAmountPool))\r\n  const pricePerTokenWithFee = `~$${formatNumber(\r\n    pricePerTokenWithFeeToOriginalRatio.times(ifo.tokenOfferingPrice).toNumber(),\r\n    0,\r\n    2,\r\n  )}`\r\n\r\n  const tokenEntry = <MaxTokenEntry poolId={poolId} ifo={ifo} maxToken={maxLpTokens} />\r\n\r\n  /* Format end */\r\n  const renderBasedOnIfoStatus = () => {\r\n    if (status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          {tokenEntry}\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          {ifo[poolId].cakeToBurn !== '$0' && <FooterEntry label={t('$MINTS to burn:')} value={ifo[poolId].cakeToBurn} />}\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'live') {\r\n      return (\r\n        <>\r\n          {tokenEntry}\r\n          {poolId === PoolIds.poolBasic && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n              value={`$${ifo.tokenOfferingPrice}`}\r\n            />\r\n          )}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          {poolId === PoolIds.poolUnlimited && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol% with fee:', { symbol: ifo.token.symbol })}\r\n              value={pricePerTokenWithFee}\r\n            />\r\n          )}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'finished') {\r\n      return (\r\n        <>\r\n          {tokenEntry}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          {ifo[poolId].cakeToBurn !== '$0' && <FooterEntry label={t('$MINTS to burn:')} value={ifo[poolId].cakeToBurn} />}\r\n          {ifo.version > 1 && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n              value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\r\n            />\r\n          )}\r\n          {ifo.version > 1 && poolId === PoolIds.poolUnlimited && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol% with fee:', { symbol: ifo.token.symbol })}\r\n              value={pricePerTokenWithFee}\r\n            />\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    return <SkeletonCardDetails />\r\n  }\r\n\r\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\r\n}\r\n\r\nexport default IfoCardDetails\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { Box, Card, CardBody, CardHeader, Flex, HelpIcon, Text, useTooltip } from '@pancakeswap/uikit'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { EnableStatus } from '../types'\r\nimport IfoCardTokens from './IfoCardTokens'\r\nimport IfoCardActions from './IfoCardActions'\r\nimport IfoCardDetails from './IfoCardDetails'\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: none;\r\n  max-width: 368px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  height: fit-content;\r\n`\r\n\r\ninterface IfoCardProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  onApprove: () => Promise<any>\r\n  enableStatus: EnableStatus\r\n}\r\n\r\nconst cardConfig = (\r\n  t: ContextApi['t'],\r\n  poolId: PoolIds,\r\n): {\r\n  title: string\r\n  variant: 'blue' | 'violet'\r\n  tooltip: string\r\n} => {\r\n  switch (poolId) {\r\n    case PoolIds.poolBasic:\r\n      return {\r\n        title: t('Basic Sale'),\r\n        variant: 'blue',\r\n        tooltip: t(\r\n          'Every person can only commit a limited amount, but may expect a higher return per token committed.',\r\n        ),\r\n      }\r\n    case PoolIds.poolUnlimited:\r\n      return {\r\n        title: t('Unlimited Sale'),\r\n        variant: 'violet',\r\n        tooltip: t('No limits on the amount you can commit. Additional fee applies when claiming.'),\r\n      }\r\n    default:\r\n      return { title: '', variant: 'blue', tooltip: '' }\r\n  }\r\n}\r\n\r\nconst SmallCard: React.FC<IfoCardProps> = ({ poolId, ifo, publicIfoData, walletIfoData, onApprove, enableStatus }) => {\r\n  const { t } = useTranslation()\r\n  const config = cardConfig(t, poolId)\r\n  const { hasProfile, isLoading: isProfileLoading } = useProfile()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(config.tooltip, { placement: 'bottom' })\r\n\r\n  const isLoading = isProfileLoading || publicIfoData.status === 'idle'\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <StyledCard>\r\n        <CardHeader p=\"16px 24px\" variant={config.variant}>\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text bold fontSize=\"20px\" lineHeight={1}>\r\n              {config.title}\r\n            </Text>\r\n            <div ref={targetRef}>\r\n              <HelpIcon />\r\n            </div>\r\n          </Flex>\r\n        </CardHeader>\r\n        <CardBody p=\"12px\">\r\n          <IfoCardTokens\r\n            poolId={poolId}\r\n            ifo={ifo}\r\n            publicIfoData={publicIfoData}\r\n            walletIfoData={walletIfoData}\r\n            hasProfile={hasProfile}\r\n            isLoading={isLoading}\r\n            onApprove={onApprove}\r\n            enableStatus={enableStatus}\r\n          />\r\n          <Box mt=\"24px\">\r\n            <IfoCardActions\r\n              poolId={poolId}\r\n              ifo={ifo}\r\n              publicIfoData={publicIfoData}\r\n              walletIfoData={walletIfoData}\r\n              hasProfile={hasProfile}\r\n              isLoading={isLoading}\r\n            />\r\n          </Box>\r\n          <IfoCardDetails poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n        </CardBody>\r\n      </StyledCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SmallCard\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\n\r\ninterface Props {\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nconst GradientText = styled(Heading)`\r\n  background: -webkit-linear-gradient(#ffd800, #eb8c00);\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);\r\n`\r\n\r\nconst FlexGap = styled(Flex)<{ gap: string }>`\r\n  gap: ${({ gap }) => gap};\r\n`\r\n\r\nexport const SoonTimer: React.FC<Props> = ({ publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, secondsUntilStart } = publicIfoData\r\n  const timeUntil = getTimePeriods(secondsUntilStart)\r\n  return (\r\n    <Flex justifyContent=\"center\" position=\"relative\">\r\n      {status === 'idle' ? (\r\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\r\n      ) : (\r\n        <>\r\n          <FlexGap gap=\"8px\" alignItems=\"center\">\r\n            <Heading as=\"h3\" scale=\"lg\" color=\"secondary\">\r\n              {t('Start in')}\r\n            </Heading>\r\n            <FlexGap gap=\"4px\" alignItems=\"baseline\">\r\n              {timeUntil.days && (\r\n                <>\r\n                  <Heading scale=\"lg\" color=\"secondary\">\r\n                    {timeUntil.days}\r\n                  </Heading>\r\n                  <Text color=\"secondary\">d</Text>\r\n                </>\r\n              )}\r\n              {timeUntil.hours && (\r\n                <>\r\n                  <Heading color=\"secondary\" scale=\"lg\">\r\n                    {timeUntil.hours}\r\n                  </Heading>\r\n                  <Text color=\"secondary\">h</Text>\r\n                </>\r\n              )}\r\n              {timeUntil.minutes && (\r\n                <>\r\n                  <Heading color=\"secondary\" scale=\"lg\">\r\n                    {timeUntil.minutes}\r\n                  </Heading>\r\n                  <Text color=\"secondary\">m</Text>\r\n                </>\r\n              )}\r\n            </FlexGap>\r\n          </FlexGap>\r\n        </>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst EndInHeading = styled(Heading)`\r\n  color: white;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  line-height: 1.1;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst LiveNowHeading = styled(EndInHeading)`\r\n  color: white;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    background: -webkit-linear-gradient(#ffd800, #eb8c00);\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);\r\n  }\r\n`\r\n\r\nconst LiveTimer: React.FC<Props> = ({ publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, secondsUntilEnd } = publicIfoData\r\n  const timeUntil = getTimePeriods(secondsUntilEnd)\r\n  return (\r\n    <Flex justifyContent=\"center\" position=\"relative\">\r\n      {status === 'idle' ? (\r\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\r\n      ) : (\r\n        <>\r\n          <PocketWatchIcon width=\"42px\" mr=\"8px\" />\r\n          <FlexGap gap=\"8px\" alignItems=\"center\">\r\n            <LiveNowHeading as=\"h3\">{`${t('Live Now').toUpperCase()}!`}</LiveNowHeading>\r\n            <EndInHeading as=\"h3\" scale=\"lg\" color=\"white\">\r\n              {t('Ends in')}\r\n            </EndInHeading>\r\n            <FlexGap gap=\"4px\" alignItems=\"baseline\">\r\n              {timeUntil.days && (\r\n                <>\r\n                  <GradientText scale=\"lg\">{timeUntil.days}</GradientText>\r\n                  <Text color=\"white\">d</Text>\r\n                </>\r\n              )}\r\n              {timeUntil.hours && (\r\n                <>\r\n                  <GradientText scale=\"lg\">{timeUntil.hours}</GradientText>\r\n                  <Text color=\"white\">h</Text>\r\n                </>\r\n              )}\r\n              {timeUntil.minutes && (\r\n                <>\r\n                  <GradientText scale=\"lg\">{timeUntil.minutes}</GradientText>\r\n                  <Text color=\"white\">m</Text>\r\n                </>\r\n              )}\r\n            </FlexGap>\r\n          </FlexGap>\r\n        </>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default LiveTimer\r\n","import { Box, Flex, Heading, Progress, ProgressBar } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { PublicIfoData } from '../../types'\r\nimport LiveTimer, { SoonTimer } from './Timer'\r\n\r\nconst BigCurve = styled(Box)<{ $status: PublicIfoData['status'] }>`\r\n  width: 150%;\r\n  position: absolute;\r\n  top: -150%;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    border-radius: 50%;\r\n  }\r\n\r\n  ${({ $status, theme }) => {\r\n    switch ($status) {\r\n      case 'coming_soon':\r\n        return `\r\n          background: ${theme.colors.tertiary};\r\n        `\r\n      case 'live':\r\n        return `\r\n          background: linear-gradient(#8051D6 100%, #492286 100%);\r\n        `\r\n      case 'finished':\r\n        return `\r\n          background: ${theme.colors.input};\r\n        `\r\n      default:\r\n        return ''\r\n    }\r\n  }}\r\n`\r\n\r\nexport const IfoRibbon = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\r\n  const { status } = publicIfoData\r\n\r\n  let Component\r\n  if (status === 'finished') {\r\n    Component = <IfoRibbonEnd />\r\n  } else if (status === 'live') {\r\n    Component = <IfoRibbonLive publicIfoData={publicIfoData} />\r\n  } else if (status === 'coming_soon') {\r\n    Component = <IfoRibbonSoon publicIfoData={publicIfoData} />\r\n  }\r\n\r\n  if (status === 'idle') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {status === 'live' && (\r\n        <Progress variant=\"flat\">\r\n          <ProgressBar\r\n            $useDark\r\n            $background=\"linear-gradient(273deg, #ffd800 -2.87%, #eb8c00 113.73%)\"\r\n            style={{ width: `${Math.min(Math.max(publicIfoData.progress, 0), 100)}%` }}\r\n          />\r\n        </Progress>\r\n      )}\r\n      <Flex\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        flexDirection=\"column\"\r\n        minHeight={['48px', '48px', '48px', '75px']}\r\n        position=\"relative\"\r\n        overflow=\"hidden\"\r\n      >\r\n        {Component}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoRibbonEnd = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <BigCurve $status=\"finished\" />\r\n      <Box position=\"relative\">\r\n        <Heading as=\"h3\" scale=\"lg\" color=\"textSubtle\">\r\n          {t('Sale Finished!')}\r\n        </Heading>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoRibbonSoon = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\r\n  return (\r\n    <>\r\n      <BigCurve $status=\"coming_soon\" />\r\n      <Box position=\"relative\">\r\n        <Heading as=\"h3\" scale=\"lg\" color=\"secondary\">\r\n          <SoonTimer publicIfoData={publicIfoData} />\r\n        </Heading>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoRibbonLive = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\r\n  return (\r\n    <>\r\n      <BigCurve $status=\"live\" />\r\n      <Box position=\"relative\">\r\n        <LiveTimer publicIfoData={publicIfoData} />\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n","import {\r\n  Box,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  ExpandableLabel,\r\n  ExpandableButton,\r\n  useMatchBreakpoints,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport useToast from 'hooks/useToast'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport styled from 'styled-components'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport useIsWindowVisible from '../../../../hooks/useIsWindowVisible'\r\nimport useIfoApprove from '../../hooks/useIfoApprove'\r\nimport IfoAchievement from './Achievement'\r\nimport IfoPoolCard from './IfoPoolCard'\r\nimport { EnableStatus } from './types'\r\nimport { IfoRibbon } from './IfoRibbon'\r\n\r\ninterface IfoFoldableCardProps {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst StyledCard = styled(Card)<{ $isCurrent?: boolean }>`\r\n  width: 100%;\r\n  margin: auto;\r\n  border-top-left-radius: 32px;\r\n  border-top-right-radius: 32px;\r\n\r\n  ${({ $isCurrent }) =>\r\n    $isCurrent &&\r\n    `\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n  > div {\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0;\r\n  }\r\n  `}\r\n\r\n  > div {\r\n    background: ${({ theme, $isCurrent }) => ($isCurrent ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-top-left-radius: 32px;\r\n    border-top-right-radius: 32px;\r\n\r\n    > div {\r\n      border-top-left-radius: 32px;\r\n      border-top-right-radius: 32px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Header = styled(CardHeader)<{ ifoId: string; $isCurrent?: boolean }>`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  height: ${({ $isCurrent }) => ($isCurrent ? '64px' : '112px')};\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  border-top-left-radius: 32px;\r\n  border-top-right-radius: 32px;\r\n  background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.svg'), url('/images/ifos/${ifoId}-bg.png')`};\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 112px;\r\n  }\r\n`\r\n\r\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\r\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\r\n  }\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  padding: 24px 16px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    padding: 24px;\r\n  }\r\n`\r\n\r\nconst StyledCardFooter = styled(CardFooter)`\r\n  padding: 0;\r\n  background: ${({ theme }) => theme.colors.backgroundAlt};\r\n  text-align: center;\r\n`\r\n\r\nconst StyledNoHatBunny = styled.div<{ $isLive: boolean; $isCurrent?: boolean }>`\r\n  position: absolute;\r\n  left: -24px;\r\n  z-index: 1;\r\n  top: 33px;\r\n\r\n  > img {\r\n    width: 78px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    top: ${({ $isLive }) => ($isLive ? '46px' : '33px')};\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    left: auto;\r\n    top: ${({ $isLive }) => ($isLive ? '61px' : '48px')};\r\n    right: ${({ $isCurrent }) => ($isCurrent ? '17px' : '90px')};\r\n\r\n    > img {\r\n      width: 123px;\r\n    }\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    right: ${({ $isCurrent }) => ($isCurrent ? '67px' : '90px')};\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    right: 90px;\r\n  }\r\n`\r\n\r\nconst NoHatBunny = ({ isLive, isCurrent }: { isLive?: boolean; isCurrent?: boolean }) => {\r\n  const { isXs, isSm, isMd } = useMatchBreakpoints()\r\n  const isSmallerThanTablet = isXs || isSm || isMd\r\n  if (isSmallerThanTablet && isLive) return null\r\n  return (\r\n    <StyledNoHatBunny $isLive={isLive} $isCurrent={isCurrent}>\r\n      <img\r\n        src={`/images/ifos/assets/bunnypop-${!isSmallerThanTablet ? 'right' : 'left'}.png`}\r\n        width={123}\r\n        height={162}\r\n        alt=\"bunny\"\r\n      />\r\n    </StyledNoHatBunny>\r\n  )\r\n}\r\n\r\n// Active Ifo\r\nexport const IfoCurrentCard = ({\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n}: {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { isMobile } = useMatchBreakpoints()\r\n\r\n  const shouldShowBunny = publicIfoData.status === 'live' || publicIfoData.status === 'coming_soon'\r\n\r\n  return (\r\n    <>\r\n      {isMobile && (\r\n        <Box\r\n          className=\"sticky-header\"\r\n          position=\"sticky\"\r\n          bottom=\"48px\"\r\n          width=\"100%\"\r\n          zIndex={6}\r\n          maxWidth={['400px', '400px', '400px', '100%']}\r\n        >\r\n          <Header $isCurrent ifoId={ifo.id} />\r\n          <IfoRibbon publicIfoData={publicIfoData} />\r\n          {shouldShowBunny && <NoHatBunny isLive={publicIfoData.status === 'live'} />}\r\n        </Box>\r\n      )}\r\n      <Box position=\"relative\" width=\"100%\" maxWidth={['400px', '400px', '400px', '100%']}>\r\n        {!isMobile && shouldShowBunny && <NoHatBunny isCurrent isLive={publicIfoData.status === 'live'} />}\r\n        <StyledCard $isCurrent>\r\n          {!isMobile && (\r\n            <>\r\n              <Header $isCurrent ifoId={ifo.id} />\r\n              <IfoRibbon publicIfoData={publicIfoData} />\r\n            </>\r\n          )}\r\n          <IfoCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n          <StyledCardFooter>\r\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n              {isExpanded ? t('Hide') : t('Details')}\r\n            </ExpandableLabel>\r\n            {isExpanded && <IfoAchievement ifo={ifo} publicIfoData={publicIfoData} />}\r\n          </StyledCardFooter>\r\n        </StyledCard>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst FoldableContent = styled.div<{ isVisible: boolean }>`\r\n  display: ${({ isVisible }) => (isVisible ? 'block' : 'none')};\r\n`\r\n\r\n// Past Ifo\r\nconst IfoFoldableCard = ({\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n}: {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      {isExpanded && isDesktop && <NoHatBunny isLive={false} />}\r\n      <Box as={StyledCard} borderRadius=\"32px\">\r\n        <Box position=\"relative\">\r\n          <Header ifoId={ifo.id}>\r\n            <ExpandableButton expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)} />\r\n          </Header>\r\n          {isExpanded && (\r\n            <>\r\n              <IfoRibbon publicIfoData={publicIfoData} />\r\n            </>\r\n          )}\r\n        </Box>\r\n        <FoldableContent isVisible={isExpanded}>\r\n          <IfoCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n          <IfoAchievement ifo={ifo} publicIfoData={publicIfoData} />\r\n        </FoldableContent>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst IfoCard: React.FC<IfoFoldableCardProps> = ({ ifo, publicIfoData, walletIfoData }) => {\r\n  const { currentBlock } = useBlock()\r\n  const { fetchIfoData: fetchPublicIfoData, isInitialized: isPublicIfoDataInitialized, secondsUntilEnd } = publicIfoData\r\n  const {\r\n    contract,\r\n    fetchIfoData: fetchWalletIfoData,\r\n    resetIfoData: resetWalletIfoData,\r\n    isInitialized: isWalletDataInitialized,\r\n  } = walletIfoData\r\n  const [enableStatus, setEnableStatus] = useState(EnableStatus.DISABLED)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const raisingTokenContract = useERC20(ifo.currency.address)\r\n  // Continue to fetch 2 more minutes to get latest data\r\n  const isRecentlyActive =\r\n    (publicIfoData.status !== 'finished' || (publicIfoData.status === 'finished' && secondsUntilEnd >= -120)) &&\r\n    ifo.isActive\r\n  const onApprove = useIfoApprove(raisingTokenContract, contract.address)\r\n  const { toastSuccess } = useToast()\r\n  const { fastRefresh } = useRefresh()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  useEffect(() => {\r\n    if (isRecentlyActive || !isPublicIfoDataInitialized) {\r\n      fetchPublicIfoData(currentBlock)\r\n    }\r\n  }, [isRecentlyActive, isPublicIfoDataInitialized, fetchPublicIfoData, currentBlock])\r\n\r\n  useEffect(() => {\r\n    if (isWindowVisible && (isRecentlyActive || !isWalletDataInitialized)) {\r\n      if (account) {\r\n        fetchWalletIfoData()\r\n      }\r\n    }\r\n\r\n    if (!account && isWalletDataInitialized) {\r\n      resetWalletIfoData()\r\n    }\r\n  }, [\r\n    isWindowVisible,\r\n    account,\r\n    isRecentlyActive,\r\n    isWalletDataInitialized,\r\n    fetchWalletIfoData,\r\n    resetWalletIfoData,\r\n    fastRefresh,\r\n  ])\r\n\r\n  const handleApprove = async () => {\r\n    try {\r\n      setEnableStatus(EnableStatus.IS_ENABLING)\r\n\r\n      const receipt = await onApprove()\r\n\r\n      setEnableStatus(EnableStatus.ENABLED)\r\n      toastSuccess(\r\n        t('Successfully Enabled!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n          {t('You can now participate in the %symbol% IFO.', { symbol: ifo.token.symbol })}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      setEnableStatus(EnableStatus.DISABLED)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const checkAllowance = async () => {\r\n      try {\r\n        const response = await raisingTokenContract.allowance(account, contract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setEnableStatus(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\r\n      } catch (error) {\r\n        setEnableStatus(EnableStatus.DISABLED)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      checkAllowance()\r\n    }\r\n  }, [account, raisingTokenContract, contract, setEnableStatus])\r\n\r\n  return (\r\n    <>\r\n      <StyledCardBody>\r\n        <CardsWrapper singleCard={!publicIfoData.poolBasic || !walletIfoData.poolBasic}>\r\n          {publicIfoData.poolBasic && walletIfoData.poolBasic && (\r\n            <IfoPoolCard\r\n              poolId={PoolIds.poolBasic}\r\n              ifo={ifo}\r\n              publicIfoData={publicIfoData}\r\n              walletIfoData={walletIfoData}\r\n              onApprove={handleApprove}\r\n              enableStatus={enableStatus}\r\n            />\r\n          )}\r\n          <IfoPoolCard\r\n            poolId={PoolIds.poolUnlimited}\r\n            ifo={ifo}\r\n            publicIfoData={publicIfoData}\r\n            walletIfoData={walletIfoData}\r\n            onApprove={handleApprove}\r\n            enableStatus={enableStatus}\r\n          />\r\n        </CardsWrapper>\r\n      </StyledCardBody>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IfoFoldableCard\r\n","import { Box } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst IfoLayout = styled(Box)`\r\n  display: grid;\r\n  > div:not(.sticky-header) {\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\nexport const IfoLayoutWrapper = styled(IfoLayout)`\r\n  column-gap: 32px;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: minmax(300px, 1fr) minmax(462px, 2fr);\r\n  }\r\n\r\n  > div {\r\n    margin: 0 auto;\r\n    align-items: flex-start;\r\n  }\r\n`\r\n\r\nexport default IfoLayout\r\n","import {\r\n  useMatchBreakpoints,\r\n  Card,\r\n  CardHeader,\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  ExpandableButton,\r\n  CardBody,\r\n  HelpIcon,\r\n  useTooltip,\r\n  LinkExternal,\r\n  Link,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport React, { useState } from 'react'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useIfoPoolVault, useIfoPoolCredit, useIfoWithApr, useIfoPooStartBlock } from 'state/pools/hooks'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport CakeVaultCard from 'views/Pools/components/CakeVaultCard'\r\nimport ExpandedFooter from 'views/Pools/components/PoolCard/CardFooter/ExpandedFooter'\r\nimport { IfoVaultCardAvgBalance } from 'views/Pools/components/CakeVaultCard/VaultCardActions'\r\nimport AprRow from 'views/Pools/components/PoolCard/AprRow'\r\nimport Staked from 'views/Pools/components/PoolsTable/ActionPanel/Stake'\r\nimport { CompoundingPoolTag } from 'components/Tags'\r\nimport { ActionContainer } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\r\nimport { VaultKey } from 'state/types'\r\nimport UnstakingFeeCountdownRow from 'views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitCountdownRow from 'views/Pools/components/CakeVaultCard/RecentCakeProfitRow'\r\nimport { getBscScanLink } from 'utils'\r\n\r\nconst StyledCardMobile = styled(Card)`\r\n  max-width: 400px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledTokenContent = styled(Flex)`\r\n  ${Text} {\r\n    line-height: 1.2;\r\n    white-space: nowrap;\r\n  }\r\n`\r\n\r\nconst StyledCardFooter = styled(Box)`\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  display: grid;\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  gap: 16px;\r\n  ${ActionContainer} {\r\n    margin: 0;\r\n    background-color: ${({ theme }) => theme.colors.invertedContrast};\r\n  }\r\n`\r\n\r\nconst IfoPoolVaultCardMobile: React.FC = () => {\r\n  const { pool, userDataLoaded } = useIfoWithApr()\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const credit = useIfoPoolCredit()\r\n  const {\r\n    fees: { performanceFeeAsDecimal },\r\n  } = useIfoPoolVault()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const creditStartBlock = useIfoPooStartBlock()\r\n  const {\r\n    tooltip: startBlockTooltip,\r\n    tooltipVisible: startBlockTooltipVisible,\r\n    targetRef: startBlockTargetRef,\r\n  } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The start block of the current calculation period. Your average IFO $MINTS Pool staking balance is calculated throughout this period.',\r\n        )}\r\n      </Text>\r\n      <LinkExternal href=\"https://medium.com/pancakeswap/initial-farm-offering-ifo-3-0-ifo-staking-pool-622d8bd356f1\">\r\n        {t('Check out our Medium article for more details.')}\r\n      </LinkExternal>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  // TODO: refactor this is use everywhere\r\n  const cakeAsNumberBalance = getBalanceNumber(credit)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance))\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0)\r\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), pool.stakingToken.decimals)\r\n    : 0\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.'),\r\n    {\r\n      placement: 'bottom',\r\n    },\r\n  )\r\n  return (\r\n    <StyledCardMobile isActive>\r\n      <CardHeader p=\"16px\">\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <StyledTokenContent alignItems=\"center\" flex={1}>\r\n            <TokenPairImage width={24} height={24} primaryToken={tokens.cake} secondaryToken={tokens.cake} />\r\n            <Box ml=\"8px\">\r\n              <Text fontSize=\"12px\" bold color=\"secondary\" textTransform=\"uppercase\">\r\n                {t('Staked')}\r\n              </Text>\r\n              <Text small bold>\r\n                IFO $MINTS\r\n              </Text>\r\n              <Text color=\"textSubtle\" fontSize=\"12px\">\r\n                {t('Stake')} $MINTS\r\n              </Text>\r\n            </Box>\r\n          </StyledTokenContent>\r\n          <StyledTokenContent flexDirection=\"column\" flex={1}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Avg Balance')}\r\n            </Text>\r\n            <Balance small bold decimals={3} value={cakeAsNumberBalance} />\r\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\r\n          </StyledTokenContent>\r\n          <ExpandableButton expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)} />\r\n        </Flex>\r\n      </CardHeader>\r\n      {isExpanded && (\r\n        <>\r\n          <StyledCardBody>\r\n            <AprRow pool={pool} stakedBalance={cakeAsBigNumber} performanceFee={performanceFeeAsDecimal} />\r\n            {pool.vaultKey === VaultKey.IfoPool && (\r\n              <Flex mt=\"8px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\">{t('Credit calculation starts:')}</Text>\r\n                <Flex mr=\"6px\" alignItems=\"center\">\r\n                  <Link external href={getBscScanLink(creditStartBlock, 'block')} mr=\"4px\" fontSize=\"14px\">\r\n                    {creditStartBlock}\r\n                  </Link>\r\n                  <span ref={startBlockTargetRef}>\r\n                    <HelpIcon color=\"textSubtle\" />\r\n                  </span>\r\n                </Flex>\r\n                {startBlockTooltipVisible && startBlockTooltip}\r\n              </Flex>\r\n            )}\r\n            <ActionContainer>\r\n              <IfoVaultCardAvgBalance pool={pool} />\r\n            </ActionContainer>\r\n            <Staked pool={pool} userDataLoaded={userDataLoaded} />\r\n            <ActionContainer>\r\n              <Box>\r\n                <RecentCakeProfitCountdownRow vaultKey={VaultKey.IfoPool} />\r\n              </Box>\r\n              <Box mt=\"8px\">\r\n                <UnstakingFeeCountdownRow vaultKey={VaultKey.IfoPool} />\r\n              </Box>\r\n            </ActionContainer>\r\n          </StyledCardBody>\r\n          <StyledCardFooter>\r\n            <ExpandedFooter account={account} pool={pool} />\r\n            <Flex alignItems=\"center\">\r\n              <CompoundingPoolTag />\r\n              {tooltipVisible && tooltip}\r\n              <Flex ref={targetRef}>\r\n                <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n              </Flex>\r\n            </Flex>\r\n          </StyledCardFooter>\r\n        </>\r\n      )}\r\n    </StyledCardMobile>\r\n  )\r\n}\r\n\r\nconst IfoPoolVaultCard = () => {\r\n  const { pool } = useIfoWithApr()\r\n  const { isMd, isXs, isSm } = useMatchBreakpoints()\r\n  const isSmallerThanTablet = isMd || isXs || isSm\r\n  if (isSmallerThanTablet) {\r\n    return <IfoPoolVaultCardMobile />\r\n  }\r\n\r\n  return <CakeVaultCard pool={pool} showStakedOnly={false} m=\"auto\" />\r\n}\r\n\r\nexport default IfoPoolVaultCard\r\n","import { ContextApi } from 'contexts/Localization/types'\r\n\r\nconst config = (t: ContextApi['t']) => {\r\n  return [\r\n    {\r\n      title: t('What’s the difference between a Basic Sale and Unlimited Sale?'),\r\n      description: [\r\n        t(\r\n          'In the Basic Sale, every user can commit a maximum of about 100 USD worth of $MINTS. We calculate the maximum $MINTS amount about 30 minutes before each IFO. The Basic Sale has no participation fee.',\r\n        ),\r\n        t(\r\n          'In the Unlimited Sale, there’s no limit to the amount of $MINTS you can commit. However, there’s a fee for participation: see below.',\r\n        ),\r\n      ],\r\n    },\r\n    {\r\n      title: t('Which sale should I commit to? Can I do both?'),\r\n      description: [\r\n        t(\r\n          'You can choose one or both at the same time! If you’re only committing a small amount, we recommend the Basic Sale first. Just remember you need a MintySwap Profile in order to participate.',\r\n        ),\r\n      ],\r\n    },\r\n    {\r\n      title: t('How much is the participation fee?'),\r\n      description: [\r\n        t('There’s only a participation fee for the Unlimited Sale: there’s no fee for the Basic Sale.'),\r\n        t('The fee will start at 1%.'),\r\n        t(\r\n          'The 1% participation fee decreases in cliffs, based on the percentage of overflow from the “Unlimited” portion of the sale.',\r\n        ),\r\n      ],\r\n    },\r\n    {\r\n      title: t('Where does the participation fee go?'),\r\n      description: [t('The $MINTS from the participation fee will be thrown into the weekly token burn.')],\r\n    },\r\n    {\r\n      title: t('How can I get an achievement for participating in the IFO?'),\r\n      description: [\r\n        t('You need to contribute a minimum of about 10 USD worth of $MINTS to either sale.'),\r\n        t(\r\n          'You can contribute to one or both, it doesn’t matter: only your overall contribution is counted for the achievement.',\r\n        ),\r\n      ],\r\n    },\r\n  ]\r\n}\r\nexport default config\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Heading, Card, CardHeader, CardBody, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport FoldableText from 'components/FoldableSection/FoldableText'\r\nimport config from './config'\r\n\r\nconst ImageWrapper = styled.div`\r\n  flex: none;\r\n  order: 2;\r\n  max-width: 414px;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst DetailsWrapper = styled.div`\r\n  order: 1;\r\n  margin-bottom: 40px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    order: 2;\r\n    margin-bottom: 0;\r\n    margin-left: 40px;\r\n  }\r\n`\r\n\r\nconst IfoQuestions = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems={['center', null, null, 'start']} flexDirection={['column', null, null, 'row']}>\r\n      <ImageWrapper>\r\n        <img src=\"/images/ifos/ifo-bunny.png\" alt=\"ifo bunny\" width=\"414px\" height=\"500px\" />\r\n      </ImageWrapper>\r\n      <DetailsWrapper>\r\n        <Card>\r\n          <CardHeader>\r\n            <Heading scale=\"lg\" color=\"secondary\">\r\n              {t('Details')}\r\n            </Heading>\r\n          </CardHeader>\r\n          <CardBody>\r\n            {config(t).map(({ title, description }, i, { length }) => (\r\n              <FoldableText key={title} id={title} mb={i + 1 === length ? '' : '24px'} title={title}>\r\n                {description.map((desc) => {\r\n                  return (\r\n                    <Text key={desc} color=\"textSubtle\" as=\"p\">\r\n                      {desc}\r\n                    </Text>\r\n                  )\r\n                })}\r\n              </FoldableText>\r\n            ))}\r\n          </CardBody>\r\n        </Card>\r\n      </DetailsWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default IfoQuestions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport every from 'lodash/every'\r\nimport {\r\n  Stepper,\r\n  Step,\r\n  StepStatus,\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Text,\r\n  Button,\r\n  Box,\r\n  CheckmarkIcon,\r\n  Flex,\r\n  useTooltip,\r\n  TooltipText,\r\n  PancakeRoundIcon,\r\n  Skeleton,\r\n  useModal,\r\n  Link,\r\n} from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Ifo } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport Container from 'components/Layout/Container'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { FlexGap } from 'components/Layout/Flex'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport VaultStakeModal from 'views/Pools/components/CakeVaultCard/VaultStakeModal'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useIfoPoolVault, useIfoPoolCredit, useIfoWithApr } from 'state/pools/hooks'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n  walletIfoData: WalletIfoData\r\n  isLive?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Container)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  margin-left: -16px;\r\n  margin-right: -16px;\r\n  padding-top: 48px;\r\n  padding-bottom: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: -24px;\r\n    margin-right: -24px;\r\n  }\r\n`\r\n\r\nconst InlineLink = styled(Link)`\r\n  display: inline;\r\n`\r\n\r\nconst SmallStakePoolCard = styled(Box)`\r\n  margin-top: 16px;\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n`\r\n\r\nconst Step1 = ({ hasProfile }: { hasProfile: boolean }) => {\r\n  const { t } = useTranslation()\r\n  const ifoPoolVault = useIfoPoolVault()\r\n  const credit = useIfoPoolCredit()\r\n  const { pool } = useIfoWithApr()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Box>\r\n      <span>\r\n        {t(\r\n          'Average pool balance is calculated by average block balance in the IFO pool in over the staking period announced with each IFO proposal.',\r\n        )}\r\n      </span>{' '}\r\n      <InlineLink\r\n        external\r\n        href=\"https://medium.com/pancakeswap/initial-farm-offering-ifo-3-0-ifo-staking-pool-622d8bd356f1\"\r\n      >\r\n        {t('Please refer to our blog post for more details.')}\r\n      </InlineLink>\r\n    </Box>,\r\n    {},\r\n  )\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0) && credit ? getBalanceNumber(credit.multipliedBy(cakePriceBusd), 18) : 0\r\n\r\n  const stakingTokenBalance = pool?.userData?.stakingTokenBalance\r\n    ? new BigNumber(pool.userData.stakingTokenBalance)\r\n    : BIG_ZERO\r\n\r\n  const [onPresentStake] = useModal(\r\n    <VaultStakeModal\r\n      stakingMax={stakingTokenBalance}\r\n      performanceFee={ifoPoolVault.fees.performanceFeeAsDecimal}\r\n      pool={pool}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <CardBody>\r\n      {tooltipVisible && tooltip}\r\n      <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n        {t('Stake $MINTS in IFO pool')}\r\n      </Heading>\r\n      <Box>\r\n        <Text color=\"textSubtle\" small>\r\n          {t(\r\n            'The maximum amount of $MINTS user can commit to all the sales combined, is equal to the average $MINTS balance in the IFO $MINTS pool prior to the IFO. Stake more $MINTS to increase the maximum $MINTS you can commit to the sale. Missed this IFO? You can keep staking in the IFO $MINTS Pool to join the next IFO sale.',\r\n          )}\r\n        </Text>\r\n        <TooltipText as=\"span\" fontWeight={700} ref={targetRef} color=\"textSubtle\" small>\r\n          {t('How does the average balance calculated?')}\r\n        </TooltipText>\r\n      </Box>\r\n      {hasProfile && (\r\n        <SmallStakePoolCard borderRadius=\"default\" p=\"16px\">\r\n          <FlexGap justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\" gap=\"16px\">\r\n            <Flex>\r\n              <PancakeRoundIcon style={{ alignSelf: 'flex-start' }} width={32} height={32} />\r\n              <Box ml=\"16px\">\r\n                <Text bold fontSize=\"12px\" textTransform=\"uppercase\" color=\"secondary\">\r\n                  {t('Your max $MINTS entry')}\r\n                </Text>\r\n                <Balance fontSize=\"20px\" bold decimals={5} value={getBalanceNumber(credit)} />\r\n                <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                  {cakePriceBusd.gt(0) ? (\r\n                    <Balance\r\n                      value={stakedDollarValue}\r\n                      fontSize=\"12px\"\r\n                      color=\"textSubtle\"\r\n                      decimals={2}\r\n                      prefix=\"~\"\r\n                      unit=\" USD\"\r\n                    />\r\n                  ) : (\r\n                    <Skeleton mt=\"1px\" height={16} width={64} />\r\n                  )}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n            <Button onClick={onPresentStake}>{t('Stake')} $MINTS</Button>\r\n          </FlexGap>\r\n        </SmallStakePoolCard>\r\n      )}\r\n    </CardBody>\r\n  )\r\n}\r\n\r\nconst Step2 = ({ hasProfile, isLive, isCommitted }: { hasProfile: boolean; isLive: boolean; isCommitted: boolean }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <CardBody>\r\n      <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n        {t('Commit $MINTS')}\r\n      </Heading>\r\n      <Text color=\"textSubtle\" small>\r\n        {t('When the IFO sales are live, you can “commit” your $MINTS to buy the tokens being sold.')} <br />\r\n        {t('We recommend committing to the Basic Sale first, but you can do both if you like.')}\r\n      </Text>\r\n      {hasProfile && isLive && !isCommitted && (\r\n        <Button as=\"a\" href=\"#current-ifo\" mt=\"16px\">\r\n          {t('Commit $MINTS')}\r\n        </Button>\r\n      )}\r\n    </CardBody>\r\n  )\r\n}\r\n\r\nconst IfoSteps: React.FC<Props> = ({ ifo, walletIfoData, isLive }) => {\r\n  const { poolBasic, poolUnlimited } = walletIfoData\r\n  const { hasProfile } = useProfile()\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { balance } = useTokenBalance(ifo.currency.address)\r\n  const isCommitted =\r\n    poolBasic.amountTokenCommittedInLP.isGreaterThan(0) || poolUnlimited.amountTokenCommittedInLP.isGreaterThan(0)\r\n  const stepsValidationStatus = [\r\n    hasProfile,\r\n    balance.isGreaterThan(0),\r\n    isCommitted,\r\n    poolBasic.hasClaimed || poolUnlimited.hasClaimed,\r\n  ]\r\n\r\n  const getStatusProp = (index: number): StepStatus => {\r\n    const arePreviousValid = index === 0 ? true : every(stepsValidationStatus.slice(0, index), Boolean)\r\n    if (stepsValidationStatus[index]) {\r\n      return arePreviousValid ? 'past' : 'future'\r\n    }\r\n    return arePreviousValid ? 'current' : 'future'\r\n  }\r\n\r\n  const renderCardBody = (step: number) => {\r\n    const isStepValid = stepsValidationStatus[step]\r\n\r\n    const renderAccountStatus = () => {\r\n      if (!account) {\r\n        return <ConnectWalletButton />\r\n      }\r\n\r\n      if (isStepValid) {\r\n        return (\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"success\" bold mr=\"8px\">\r\n              {t('Profile Active!')}\r\n            </Text>\r\n            <CheckmarkIcon color=\"success\" />\r\n          </Flex>\r\n        )\r\n      }\r\n\r\n      return (\r\n        <Button as={RouterLink} to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`}>\r\n          {t('Activate your Profile')}\r\n        </Button>\r\n      )\r\n    }\r\n\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <CardBody>\r\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n              {t('Activate your Profile')}\r\n            </Heading>\r\n            <Text color=\"textSubtle\" small mb=\"16px\">\r\n              {t('You’ll need an active MintySwap Profile to take part in an IFO!')}\r\n            </Text>\r\n            {renderAccountStatus()}\r\n          </CardBody>\r\n        )\r\n      case 1:\r\n        return <Step1 hasProfile={hasProfile} />\r\n      case 2:\r\n        return <Step2 hasProfile={hasProfile} isLive={isLive} isCommitted={isCommitted} />\r\n      case 3:\r\n        return (\r\n          <CardBody>\r\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\r\n              {t('Claim your tokens and achievement')}\r\n            </Heading>\r\n            <Text color=\"textSubtle\" small>\r\n              {t(\r\n                'After the IFO sales finish, you can claim any IFO tokens that you bought, and any unspent $MINTS tokens will be returned to your wallet.',\r\n              )}\r\n            </Text>\r\n          </CardBody>\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Heading id=\"ifo-how-to\" as=\"h2\" scale=\"xl\" color=\"secondary\" mb=\"24px\" textAlign=\"center\">\r\n        {t('How to Take Part')}\r\n      </Heading>\r\n      <Stepper>\r\n        {stepsValidationStatus.map((_, index) => (\r\n          <Step\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            key={index}\r\n            index={index}\r\n            statusFirstPart={getStatusProp(index)}\r\n            statusSecondPart={getStatusProp(index + 1)}\r\n          >\r\n            <Card>{renderCardBody(index)}</Card>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default IfoSteps\r\n","import { ifosConfig } from 'config/constants'\r\nimport React from 'react'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\r\nimport { IfoCurrentCard } from './components/IfoFoldableCard'\r\nimport IfoLayout, { IfoLayoutWrapper } from './components/IfoLayout'\r\nimport IfoPoolVaultCard from './components/IfoPoolVaultCard'\r\nimport IfoQuestions from './components/IfoQuestions'\r\nimport IfoSteps from './components/IfoSteps'\r\n\r\n/**\r\n * Note: currently there should be only 1 active IFO at a time\r\n */\r\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\r\n\r\nconst Ifo = () => {\r\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\r\n  const walletIfoData = useGetWalletIfoV3Data(activeIfo)\r\n\r\n  return (\r\n    <IfoLayout id=\"current-ifo\" py={['24px', '24px', '40px']}>\r\n      <IfoLayoutWrapper>\r\n        <IfoPoolVaultCard />\r\n        <IfoCurrentCard ifo={activeIfo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n      </IfoLayoutWrapper>\r\n      <IfoSteps isLive={publicIfoData.status === 'live'} ifo={activeIfo} walletIfoData={walletIfoData} />\r\n      <IfoQuestions />\r\n    </IfoLayout>\r\n  )\r\n}\r\n\r\nexport default Ifo\r\n","import { useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const [state, setState] = useState({\r\n    isInitialized: false,\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: null,\r\n    thresholdPoints: undefined,\r\n    [PoolIds.poolUnlimited]: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      totalAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO, // Not know\r\n      limitPerUserInLP: BIG_ZERO, //  Not used\r\n      taxRate: 0, //  Not used\r\n      sumTaxesOverflow: BIG_ZERO, //  Not used\r\n    },\r\n  })\r\n  const fetchIfoData = useCallback(\r\n    async (currentBlock: number) => {\r\n      const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\r\n        address,\r\n        name: method,\r\n      }))\r\n\r\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n\r\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n\r\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n      const totalBlocks = endBlockNum - startBlockNum\r\n      const blocksRemaining = endBlockNum - currentBlock\r\n\r\n      // Calculate the total progress until finished or until start\r\n      const progress =\r\n        currentBlock > startBlockNum\r\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isInitialized: true,\r\n        status,\r\n        blocksRemaining,\r\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n        progress,\r\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n        startBlockNum,\r\n        endBlockNum,\r\n        [PoolIds.poolUnlimited]: {\r\n          ...prev.poolUnlimited,\r\n          raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\r\n          totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\r\n        },\r\n      }))\r\n    },\r\n    [address, releaseBlockNumber],\r\n  )\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n","import { useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\ninterface UserInfo {\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\nconst initialState = {\r\n  isInitialized: false,\r\n  [PoolIds.poolUnlimited]: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO, // Not used\r\n  },\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>(initialState)\r\n\r\n  const { address, currency } = ifo\r\n  const { poolUnlimited } = state\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV1Contract(address)\r\n  const currencyContract = useERC20(currency.address)\r\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\r\n\r\n  const setPendingTx = (status: boolean) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n\r\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n    const parsedUserInfo: UserInfo = userInfoResponse\r\n      ? {\r\n          amount: new BigNumber(userInfoResponse.amount.toString()),\r\n          claimed: userInfoResponse.claimed,\r\n        }\r\n      : { amount: BIG_ZERO, claimed: false }\r\n\r\n    setState((prevState) => ({\r\n      isInitialized: true,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: parsedUserInfo.amount,\r\n        hasClaimed: parsedUserInfo.claimed,\r\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\r\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  const resetIfoData = useCallback(() => {\r\n    setState(initialState)\r\n  }, [])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import React from 'react'\r\nimport useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\r\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\r\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\r\n\r\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n}\r\n\r\nexport default IfoCardV1Data\r\n","import { useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\nconst initialState = {\r\n  isInitialized: false,\r\n  poolBasic: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n  poolUnlimited: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>(initialState)\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(currency.address)\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isInitialized: true,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  const resetIfoData = useCallback(() => {\r\n    setState({ ...initialState })\r\n  }, [])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import React from 'react'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV2Data: React.FC<Props> = ({ ifo }) => {\r\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\r\n\r\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n}\r\n\r\nexport default IfoCardV2Data\r\n","import React from 'react'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV3Data: React.FC<Props> = ({ ifo }) => {\r\n  // TODO: v3 contract\r\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV3Data(ifo)\r\n\r\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n}\r\n\r\nexport default IfoCardV3Data\r\n","import { ifosConfig } from 'config/constants'\r\nimport { Ifo } from 'config/constants/types'\r\nimport React from 'react'\r\nimport IfoCardV1Data from './components/IfoCardV1Data'\r\nimport IfoCardV2Data from './components/IfoCardV2Data'\r\nimport IfoCardV3Data from './components/IfoCardV3Data'\r\nimport IfoLayout from './components/IfoLayout'\r\n\r\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\r\n\r\nconst PastIfo = () => {\r\n  return (\r\n    <IfoLayout maxWidth=\"736px\" m=\"auto\" width=\"100%\" id=\"past-ifos\" py={['24px', '24px', '40px']}>\r\n      {inactiveIfo.map((ifo) => {\r\n        switch (ifo.version) {\r\n          case 1:\r\n            return <IfoCardV1Data key={ifo.id} ifo={ifo} />\r\n          case 2:\r\n            return <IfoCardV2Data key={ifo.id} ifo={ifo} />\r\n          case 3:\r\n            return <IfoCardV3Data key={ifo.id} ifo={ifo} />\r\n          default:\r\n            return null\r\n        }\r\n      })}\r\n    </IfoLayout>\r\n  )\r\n}\r\n\r\nexport default PastIfo\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Container from 'components/Layout/Container'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useFetchIfoPool, useFetchPublicPoolsData, useFetchUserPools } from 'state/pools/hooks'\r\nimport Hero from './components/Hero'\r\nimport CurrentIfo from './CurrentIfo'\r\nimport PastIfo from './PastIfo'\r\n\r\nconst Ifos = () => {\r\n  const { t } = useTranslation()\r\n  const { path, isExact } = useRouteMatch()\r\n  const { account } = useWeb3React()\r\n\r\n  useFetchIfoPool()\r\n  // TODO: should be refactored to only fetch one pool we need\r\n  useFetchPublicPoolsData()\r\n  useFetchUserPools(account)\r\n\r\n  return (\r\n    <>\r\n      <SubMenuItems\r\n        items={[\r\n          {\r\n            label: t('Latest'),\r\n            href: '/ifo',\r\n          },\r\n          {\r\n            label: t('Finished'),\r\n            href: '/ifo/history',\r\n          },\r\n        ]}\r\n        activeItem={isExact ? '/ifo' : '/ifo/history'}\r\n      />\r\n      <Hero />\r\n      <Container>\r\n        <Route exact path={`${path}`}>\r\n          <CurrentIfo />\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          <PastIfo />\r\n        </Route>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Ifos\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n"],"sourceRoot":""}
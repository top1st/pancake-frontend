{"version":3,"sources":["components/Select/Select.tsx","hooks/useIntersectionObserver.ts","components/Loading.tsx","utils/latinise.ts","components/SearchInput/SearchInput.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/PageHeader/PageHeader.tsx"],"names":["DropDownHeader","styled","div","theme","shadows","inset","colors","inputSecondary","input","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","Box","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onOptionChange","defaultOptionIndex","dropdownRef","useRef","useState","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","useEffect","handleClickOutside","document","addEventListener","removeEventListener","onClick","label","color","ref","map","option","index","selectedIndex","useIntersectionObserver","observerRef","intersectionObserverRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","current","IntersectionObserver","entry","rootMargin","threshold","observe","disconnect","Loading","Latinise","latin_map","τ","Τ","latinise","replace","x","StyledInput","Input","InputWrapper","SearchInput","onChangeCallback","onChange","placeholder","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","Wrapper","primary","ExpandableSectionButton","expanded","role","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","currentTarget","validity","valid","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","Number","isFinite","disabled","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","exact","activeClassName","p","Page","checked","marginLeft","sort","b","renderContent","src","alt","Outer","gradients","bubblegum","Inner"],"mappings":"4PAIMA,EAAiBC,IAAOC,IAAV,8RAOJ,qBAAGC,MAAkBC,QAAQC,SACvB,qBAAGF,MAAkBG,OAAOC,kBAElC,qBAAGJ,MAAkBG,OAAOE,SAItCC,EAAwBR,IAAOC,IAAV,wTAKX,qBAAGC,MAAkBG,OAAOE,SAC/B,qBAAGL,MAAkBO,SAASC,YAOvC,qBAAGR,MAAkBS,aAAaC,MAKhCC,EAAoBb,YAAOc,IAAPd,CAAH,2WAIP,qBAAGE,MAAkBG,OAAOE,SAOxC,qBAAGL,MAAkBS,aAAaC,MAIlC,SAACG,GAAD,OACAA,EAAMC,QACNC,YADA,+XAEIlB,GAC2B,qBAAGG,MAAkBG,OAAOC,kBACzC,qBAAGJ,MAAkBgB,QAAQC,YAI3CX,GAIoB,qBAAGN,MAAkBG,OAAOC,kBAGlC,qBAAGJ,MAAkBgB,QAAQC,gBAY7CC,EAAepB,IAAOqB,GAAV,qGAIL,qBAAGnB,MAAkBO,SAASC,YAGrCY,EAAWtB,IAAOuB,GAAV,+GAII,qBAAGrB,MAAkBG,OAAOC,kBAuE/BkB,IAxDsC,SAAC,GAK/C,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,eAGI,IAFJC,0BAEI,MAFiB,EAEjB,EADDZ,EACC,iBACEa,EAAcC,iBAAO,MAC3B,EAA4BC,oBAAS,GAArC,mBAAOd,EAAP,KAAee,EAAf,KACA,EAAsDD,mBAASH,GAA/D,mBAAOK,EAAP,KAA4BC,EAA5B,KAEMC,EAAW,SAACC,GAChBJ,GAAWf,GACXmB,EAAMC,mBAuBR,OAXAC,qBAAU,WACR,IAAMC,EAAqB,WACzBP,GAAU,IAIZ,OADAQ,SAASC,iBAAiB,QAASF,GAC5B,WACLC,SAASE,oBAAoB,QAASH,MAEvC,IAGD,eAACzB,EAAD,yBAAmBG,OAAQA,GAAYD,GAAvC,cACE,cAAChB,EAAD,CAAgB2C,QAASR,EAAzB,SACE,cAAC,KAAD,UAAOT,EAAQO,GAAqBW,UAEtC,cAAC,IAAD,CAAmBC,MAAM,OAAOF,QAASR,IACzC,cAAC1B,EAAD,UACE,cAACY,EAAD,CAAcyB,IAAKjB,EAAnB,SACGH,EAAQqB,KAAI,SAACC,EAAQC,GAAT,OACXA,IAAUhB,EACR,cAACV,EAAD,CAAUoB,SA9BGO,EA8BsBD,EA9BI,WACjDf,EAAuBgB,GACvBlB,GAAU,GAENL,GACFA,EAAeD,EAAQwB,MAyBf,SACE,cAAC,KAAD,UAAOF,EAAOJ,SADgCI,EAAOJ,OAGrD,KAjCU,IAACM,e,oDCxFZC,IA9BiB,WAC9B,IAAMC,EAActB,iBAAuB,MACrCuB,EAA0BvB,iBAA6B,MAC7D,EAA0CC,oBAAS,GAAnD,mBAAOuB,EAAP,KAAsBC,EAAtB,KACA,EAA4CxB,oBAAS,GAArD,mBAAOyB,EAAP,KAAuBC,EAAvB,KAuBA,OArBAnB,qBAAU,WAcR,OATKgB,IACHD,EAAwBK,QAAU,IAAIC,sBALJ,SAAC,GAA0C,IAAzCC,EAAwC,oBAC5EH,EAAkBG,EAAMJ,kBAIgE,CACtFK,WAAY,MACZC,UAAW,IAEbT,EAAwBK,QAAQK,QAAQX,EAAYM,SACpDH,GAAiB,IAGZ,WACDF,EAAwBK,SAAWJ,GACrCD,EAAwBK,QAAQM,gBAGnC,CAACV,IAEG,CAAEF,cAAaI,oB,gDC3BlBS,E,KAAUhE,EAAOC,IAAV,miBA4BE+D,O,mRC9BFC,EAAW,CACtBC,UAAW,CACTC,SAAG,IACHC,SAAG,MAIMC,EAAW,SAAC9D,GACvB,OAAOA,EAAM+D,QAAQ,qBAAqB,SAACC,GAAD,OAAON,EAASC,UAAUK,IAAMA,M,kDCFtEC,EAAcxE,YAAOyE,KAAPzE,CAAH,0EAKX0E,EAAe1E,IAAOC,IAAV,sFAEd,qBAAGC,MAAkBS,aAAaC,MAgCvB+D,EAtBsB,SAAC,GAA4D,IAAhDC,EAA+C,EAAzDC,SAAyD,IAA7BC,mBAA6B,MAAf,SAAe,EAC/F,EAAoChD,mBAAS,IAA7C,mBAAOiD,EAAP,KAAmBC,EAAnB,KAEQC,EAAMC,cAAND,EAEFE,EAAoBC,mBACxB,kBAAMC,KAAS,SAACC,GAAD,OAA4CV,EAAiBU,KAAI,OAChF,CAACV,IAQH,OACE,cAACF,EAAD,UACE,cAACF,EAAD,CAAae,MAAOR,EAAYF,SAPnB,SAACS,GAChBN,EAAcM,EAAEE,OAAOD,OACvBJ,EAAkBG,IAKoCR,YAAaG,EAAEH,Q,4BC9BnEW,EAAUzF,IAAOC,IAAV,sJAOD,qBAAGC,MAAkBG,OAAOqF,WAIlCC,EAAkE,SAAC,GAA2B,IAAzBjD,EAAwB,EAAxBA,QAASkD,EAAe,EAAfA,SAC1EX,EAAMC,cAAND,EAER,OACE,eAACQ,EAAD,CAAS,aAAYR,EAAE,mCAAoCY,KAAK,SAASnD,QAAS,kBAAMA,KAAxF,UACE,cAAC,KAAD,CAAME,MAAM,UAAUkD,MAAI,EAA1B,SACcb,EAAXW,EAAa,OAAY,aAE3BA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCD,EAAwBI,aAAe,CACrCH,UAAU,GAGGD,I,kMAAAA,K,4BCrBAK,GAbkB,SAAC,GAMnB,IALbC,EAKY,EALZA,kBACAC,EAIY,EAJZA,aAKMC,EAAcC,KAAOC,KAAKC,QAE1BC,EAAcL,GAAgBA,IAAiBC,EAAsBD,EAAR,MACnE,MAAM,GAAN,OAFmBD,GAAqBA,IAAsBE,EAAsBF,EAAR,MAE5E,YAAuBM,ICAnBd,GAAUzF,IAAOC,IAAV,iDAIPuG,GAAqBxG,YAAOyG,KAAPzG,CAAH,iDA6BT0G,GAzB0C,SAAC,GAOnD,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,QACAC,EACI,EADJA,gBAEQ/B,EAAMC,cAAND,EAER,OACE,eAAC,GAAD,WACE,eAAC,KAAD,CAAMgC,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOhC,EAAE,mBAAT,OACC6B,EAAsB,cAAC,KAAD,UAAOA,IAA8B,cAAC,KAAD,CAAUI,MAAO,GAAIC,OAAQ,SAEzFN,GACA,cAACL,GAAD,CAAoBY,KAAMJ,EAA1B,SAA4C/B,EAAE,eAAgB,CAAEoC,OAAQN,MAE1E,cAACP,GAAD,CAAoBY,KAAMT,EAA1B,SAA2C1B,EAAE,mBAC7C,cAACuB,GAAD,CAAoBY,KAAMR,EAA1B,SAAwC3B,EAAE,uB,qBC3B1CQ,GAAUzF,YAAOsH,KAAPtH,CAAH,kEAMPuH,GAAgBvH,YAAOwH,KAAPxH,CAAH,iDAuBJyH,GAnBuC,SAAC,GAAiE,IAA/DV,EAA8D,EAA9DA,QAASW,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACpG,OACE,eAAC,GAAD,CAASZ,eAAe,gBAAgBa,WAAW,SAASC,GAAG,OAA/D,UACE,cAAC,KAAD,CAAgBC,QAAQ,WAAWC,aAAcL,EAAOM,eAAgBL,EAAYX,MAAO,GAAIC,OAAQ,KACvG,eAAC,KAAD,CAAMgB,cAAc,SAASL,WAAW,WAAxC,UACE,cAAC,KAAD,CAASC,GAAG,MAAZ,SAAmBhB,EAAQqB,MAAM,KAAK,KACtC,eAAC,KAAD,CAAMnB,eAAe,SAArB,UACGU,EAAkB,cAAC,KAAD,IAAmB,cAAC,KAAD,IACrCD,EACC,cAACH,GAAD,CAAeS,QAAQ,YAAvB,SAAoCN,IAEpC,cAAC,KAAD,CAAUW,GAAG,MAAMnB,MAAO,GAAIC,OAAQ,e,uFCN5CmB,GAAetI,IAAOC,IAAV,+DACN,SAACc,GAAD,OAAWA,EAAMwH,QAClB,SAACxH,GAAD,OAAWA,EAAMwH,QAGbC,GA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDG,EAAYC,qBAAWC,KAAvBF,QAGR,OAAQH,GACN,IAAK,KACHE,EAAIC,EAAQ,GACZ,MACF,IAAK,KACHD,EAAIC,EAAQ,GACZ,MACF,IAAK,KACL,QACED,EAAIC,EAAQ,GAGhB,OAAO,cAACJ,GAAD,CAAcC,KAAME,KCLvBI,GAAqB7I,IAAOC,IAAV,qIAEF,SAACc,GAAD,OAAWA,EAAMb,MAAMG,OAAOyI,eAGvC,SAAC/H,GAAD,OAAWA,EAAMb,MAAMwI,QAAQ,MAGtCK,GAAoB/I,IAAOC,IAAV,wCAIR+I,GA1BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACE,cAACT,GAAD,UACGM,IAAMC,SAAStG,IAAImG,GAAU,SAACM,EAAOC,GAAR,OAC5B,qCACE,cAACT,GAAD,UAAoBQ,IACnBC,EAAIN,EAAI,GAAK,cAAC,GAAD,a,SCgBlBO,GAAmBzJ,IAAOC,IAAV,0MAGA,qBAAGC,MAAkBG,OAAOE,SAX7B,SAAC,GAAkC,IAAD,IAA/BmJ,iBAA+B,SAAZxJ,EAAY,EAAZA,MACzC,OAAIwJ,EACKxJ,EAAMC,QAAQwJ,QAGhBzJ,EAAMC,QAAQC,SASZ,qBAAGF,MAAkBG,OAAOuJ,QAKjCpF,GAAcxE,YAAOyE,KAAPzE,CAAH,2LAOb,qBAAGE,MAAkBS,aAAakJ,MAIlC,qBAAG3J,MAAkBS,aAAaC,MAKhCkJ,GAAqB9J,YAAO+J,KAAP/J,CAAH,uGAiETgK,GAzD+B,SAAC,GASxC,IARLC,EAQI,EARJA,IACA5C,EAOI,EAPJA,OACAxC,EAMI,EANJA,SACAqF,EAKI,EALJA,YACA3E,EAII,EAJJA,MACAyB,EAGI,EAHJA,gBACAmD,EAEI,EAFJA,WAEI,IADJC,gBACI,MADO,GACP,EACInF,EAAMC,cAAND,EACFoF,EAAwB,MAARJ,IAAgBA,EAWtC,OACE,sBAAKK,MAAO,CAAEC,SAAU,YAAxB,UACE,eAACd,GAAD,CAAkBC,UAAWW,EAA7B,UACE,eAAC,KAAD,CAAMpD,eAAe,gBAAgBuD,GAAG,OAAxC,UACE,cAAC,KAAD,CAAMC,SAAS,OAAf,SAAuBN,IACvB,cAAC,KAAD,CAAMM,SAAS,OAAf,SAAuBxF,EAAE,qBAAsB,CAAEyF,QAdlC,SAACA,GACtB,GAAIL,EACF,MAAO,IAGT,IAAMM,EAAeC,sBAAWF,EAASN,GACzC,OAAOS,YAAgBF,EAAcP,EAAUA,GAQiBU,CAAeb,UAE3E,eAAC,KAAD,CAAMnC,WAAW,WAAWb,eAAe,eAA3C,UACE,cAAC,GAAD,CACE8D,QAAO,8BAAyBX,EAAzB,MACPY,UAAU,UACVC,KAAK,MACLC,IAAI,IACJrG,SAAUA,EACVC,YAAY,IACZS,MAAOA,IAET,cAAC,IAAD,CAAQ4F,MAAM,KAAKzI,QAASwH,EAAakB,GAAG,MAA5C,SACGnG,EAAE,SAEL,cAAC,KAAD,CAAMwF,SAAS,OAAf,SAAuBpD,UAG1BgD,GACC,eAACP,GAAD,CAAoBW,SAAS,OAAO7H,MAAM,UAA1C,UACGqC,EAAE,sBADL,IAC6B,IAC3B,cAAC,KAAD,CAAMwF,SAAS,OAAO3E,MAAM,EAAOsB,KAAMJ,EAAiBqE,UAAQ,EAACzI,MAAM,UAAzE,SACGqC,EAAE,eAAgB,CAAEoC,oB,qBCpG3BiE,GAAqBtL,YAAOsH,KAAPtH,CAAH,kDAIlBuL,GAAmBvL,YAAO+J,KAAP/J,CAAH,yIAmKPwL,GA5ImC,SAAC,GAa5C,IAZLvB,EAYI,EAZJA,IACAwB,EAWI,EAXJA,cACAC,EAUI,EAVJA,UACAC,EASI,EATJA,UASI,IARJC,iBAQI,MARQ,GAQR,EAPJlE,EAOI,EAPJA,WACAmE,EAMI,EANJA,WACAC,EAKI,EALJA,QACA/E,EAII,EAJJA,QACAgF,EAGI,EAHJA,IACA/E,EAEI,EAFJA,gBACAgF,EACI,EADJA,UAEA,EAAsBlK,mBAAS,IAA/B,mBAAOmK,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkCvK,oBAAS,GAA3C,mBAAOwK,EAAP,KAAkBC,EAAlB,KACA,EAAkDzK,oBAAS,GAA3D,mBAAO0K,EAAP,KAA0BC,EAA1B,KACQxH,EAAMC,cAAND,EACFyH,EAActH,mBAAQ,WAC1B,OAAOuH,YAAsB1C,KAC5B,CAACA,IAEE2C,EAAkB,IAAIC,IAAUZ,GAChCa,EAAoB,IAAID,IAAUH,GAElCK,EAAaH,EAAgBI,MAAMlB,GAEnCmB,EAAoBC,aAAqB,CAC7CC,eAAiBP,EAAgBQ,QAAkC,EAAxBL,EAAWM,WACtDtB,MACAuB,kBAAmBtB,EAAUqB,aAGzBE,EAAYvB,EAAUgB,MAAMC,EAAkB,IAC9CO,EAAqBC,YACzBF,EAAUF,WACVE,EAAUG,GAAG,KAAS,EAAI,EAC1BH,EAAUG,GAAG,KAAS,EAAI,GAGtBC,EAAeC,uBACnB,SAACtI,GACKA,EAAEuI,cAAcC,SAASC,OAC3B7B,EAAO5G,EAAEuI,cAActI,MAAMjB,QAAQ,KAAM,QAG/C,CAAC4H,IAGG8B,EAAkBJ,uBAAY,WAClC1B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OAAIM,EAEA,cAACyB,GAAA,EAAD,CACEC,UAAWjJ,EAAE,eAAgB,CAAEoC,OAAQN,IACvCoH,oBAAqB1C,EAAc2C,KAAKnE,GACxCoE,mBAAoBzC,EACpB0C,kBAAmBxC,EAAQuB,WAC3BC,kBAAmBtB,EAAUqB,WAC7BtB,IAAKA,EACLrE,WAAYA,EACZmE,WAAYA,EACZ0C,SAAUvH,EACVwH,QAAM,EACNC,aAAcxC,EACdyC,OAAQ,kBAAMjC,GAAqB,MAMvC,eAAC,KAAD,CAAOkC,MAAO1J,EAAE,mBAAoB0G,UAAWA,EAA/C,UACE,cAAC,GAAD,CACEpG,MAAO0G,EACP/B,YAAa8D,EACbnJ,SAAU8I,EACV1D,IAAKyC,EACLrF,OAAQuE,EACR5E,gBAAiBA,EACjBmD,WAAYlF,EAAE,WAEhB,eAAC,KAAD,CAAM2J,GAAG,OAAO9G,WAAW,SAASb,eAAe,gBAAnD,UACE,eAAC,KAAD,CAAMmE,GAAG,MAAMxI,MAAM,aAArB,UACGqC,EAAE,+BADL,OAGC4J,OAAOC,SAASvB,GACf,eAACjC,GAAD,CACExD,WAAW,SACXpF,QAAS,WACP+J,GAAqB,IAHzB,UAME,eAAClB,GAAD,eAAoBiC,KACpB,cAAC,KAAD,CAAYxF,QAAQ,OAAOmD,MAAM,KAAjC,SACE,cAAC,IAAD,CAAevI,MAAM,aAAasE,MAAM,cAI5C,cAAC,KAAD,CAAUA,MAAO,QAGrB,eAAC,GAAD,WACE,cAAC,IAAD,CAAQc,QAAQ,YAAYtF,QAASiJ,EAAWzE,MAAM,OAAO6H,SAAUzC,EAAvE,SACGrH,EAAE,YAEL,cAAC,IAAD,CACEiC,MAAM,OACN6H,SACEzC,IAAcM,EAAgBkC,YAAclC,EAAgBoC,GAAG,IAAMpC,EAAgBc,GAAGZ,GAE1FpK,QAAO,wBAAE,uBAAAuM,EAAA,6DACP1C,GAAa,GADN,kBAGCb,EAAUO,GAHX,OAILG,EAAanH,EAAE,WAAYA,EAAE,4CAC7B0G,IALK,gDAOLU,EACEpH,EAAE,SACFA,EAAE,uFAEJiK,QAAQC,MAAR,MAXK,yBAaL5C,GAAa,GAbR,4EALX,SAsBetH,EAAZqH,EAAc,aAAkB,gBAGrC,cAAC,KAAD,CAAclF,KAAMJ,EAAiBsD,MAAO,CAAE8E,UAAW,UAAzD,SACGnK,EAAE,eAAgB,CAAEoC,OAAQuE,UC3FtByD,GAlEqC,SAAC,GAAmD,IAAjD3D,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAW1B,EAA0B,EAA1BA,IAA0B,IAArB2B,iBAAqB,MAAT,GAAS,EACrG,EAAsB9J,mBAAS,IAA/B,mBAAOmK,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkCvK,oBAAS,GAA3C,mBAAOwK,EAAP,KAAkBC,EAAlB,KACQtH,EAAMC,cAAND,EACFyH,EAActH,mBAAQ,WAC1B,OAAOuH,YAAsB1C,KAC5B,CAACA,IAEEqF,EAAY,IAAIzC,IAAUZ,GAC1Ba,EAAoB,IAAID,IAAUH,GAElCiB,EAAeC,uBACnB,SAACtI,GACKA,EAAEuI,cAAcC,SAASC,OAC3B7B,EAAO5G,EAAEuI,cAActI,MAAMjB,QAAQ,KAAM,QAG/C,CAAC4H,IAGG8B,EAAkBJ,uBAAY,WAClC1B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OACE,eAAC,KAAD,CAAOyC,MAAO1J,EAAE,qBAAsB0G,UAAWA,EAAjD,UACE,cAAC,GAAD,CACEzB,YAAa8D,EACbnJ,SAAU8I,EACVpI,MAAO0G,EACPhC,IAAKyC,EACLrF,OAAQuE,EACRzB,WAAYlF,EAAE,aAEhB,eAAC,GAAD,WACE,cAAC,IAAD,CAAQ+C,QAAQ,YAAYtF,QAASiJ,EAAWzE,MAAM,OAAO6H,SAAUzC,EAAvE,SACGrH,EAAE,YAEL,cAAC,IAAD,CACE8J,SAAUzC,IAAcgD,EAAUR,YAAcQ,EAAUN,GAAG,IAAMM,EAAU5B,GAAGZ,GAChFpK,QAAO,wBAAE,uBAAAuM,EAAA,6DACP1C,GAAa,GADN,kBAGCb,EAAUO,GAHX,OAILG,EAAanH,EAAE,aAAcA,EAAE,0DAC/B0G,IALK,gDAOLU,EACEpH,EAAE,SACFA,EAAE,uFAEJiK,QAAQC,MAAR,MAXK,yBAaL5C,GAAa,GAbR,4EAgBTrF,MAAM,OAlBR,SAoBejC,EAAZqH,EAAc,aAAkB,oB,UCzD5BiD,GAbS,SAACC,GACvB,IAAMC,EAAqBC,eAS3B,MAAO,CAAEC,UAPa/B,sBAAW,yCAC/B,WAAOgC,GAAP,UAAAX,EAAA,sEACQY,aAAYJ,EAAoBD,EAAKI,GAD7C,2CAD+B,sDAI/B,CAACH,EAAoBD,MCOVM,GAdO,SAACN,GACrB,IAAMC,EAAqBC,eAU3B,MAAO,CAAEK,QARWnC,sBAAW,yCAC7B,WAAOgC,GAAP,gBAAAX,EAAA,sEACuBe,aAAUP,EAAoBD,EAAKI,GAD1D,OACQK,EADR,OAEEf,QAAQgB,KAAKD,GAFf,2CAD6B,sDAK7B,CAACR,EAAoBD,MCkBnBW,GAAoBnQ,IAAOC,IAAV,gFA+GRmQ,GAxGqC,SAAC,GAW9C,IAVL3E,EAUI,EAVJA,cACA4E,EASI,EATJA,aACAzE,EAQI,EARJA,UACA4D,EAOI,EAPJA,IACA9H,EAMI,EANJA,WACAqE,EAKI,EALJA,IACAF,EAII,EAJJA,WACA7E,EAGI,EAHJA,gBACAgF,EAEI,EAFJA,UACAjF,EACI,EADJA,QAEQ9B,EAAMC,cAAND,EACA8K,EAAYD,GAAcN,GAA1BO,QACAJ,EAAcJ,GAAgBC,GAA9BG,UACFW,EAAWC,cACXC,EAAWC,eACTC,EAAYC,cAAZD,QACF5E,EAAU8E,YAAgBhF,GAE1BiF,EAAW,yCAAG,WAAOjB,GAAP,UAAAX,EAAA,sEACZc,EAAQH,GADI,OAElBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAFhC,2CAAH,sDAKXwB,EAAa,yCAAG,WAAOpB,GAAP,UAAAX,EAAA,sEACdU,EAAUC,GADI,OAEpBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAF9B,2CAAH,sDAKb1E,EAAiB8C,uBAAY,WACjC,IAAMqD,EAAyBC,YAAiBzF,GAChD,OAAIwF,EAAuBvD,GAAG,IAAMuD,EAAuBE,GAAG,MACrD,aAELF,EAAuBvD,GAAG,GACrBuD,EAAuBG,QAAQ,EAAGvE,IAAUwE,YAE9CJ,EAAuBG,QAAQ,EAAGvE,IAAUwE,cAClD,CAAC5F,IAEJ,EAA2B6F,aACzB,cAAC,GAAD,CACErH,IAAKoG,EACL5E,cAAeA,EACfC,UAAWmF,EACXjF,UAAWA,EACXlE,WAAYA,EACZoE,QAASA,EACT/E,QAASA,EACTgF,IAAKA,EACLF,WAAYA,EACZ7E,gBAAiBA,EACjBgF,UAAWA,KAZRuF,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAerH,IAAKwB,EAAeC,UAAWsF,EAAepF,UAAWA,KADnE4F,EAAP,oBA4BA,OACE,eAAC,KAAD,CAAMvK,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,KAAD,CAAMK,cAAc,SAASL,WAAW,aAAxC,UACE,cAAC,KAAD,CAASlF,MAAO6I,EAAcuD,GAAG,GAAK,eAAiB,OAAvD,SAAgElE,MAC/DW,EAAciC,GAAG,IAAM5B,EAAQ4B,GAAG,IACjC,cAAC+D,GAAA,EAAD,CACEhH,SAAS,OACT7H,MAAM,aACNwH,SAAU,EACV7E,MAAOmM,YAAiB5F,EAAQkB,MAAMvB,IACtCkG,KAAK,OACLC,OAAO,SAlCRnG,EAAcuD,GAAG,GACtB,cAAC,IAAD,CACEtM,QAAS6O,EACTxC,SAAU,CAAC,UAAW,YAAY8C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAF9E,SAIG7M,EAAE,cAGL,eAACkL,GAAD,WACE,cAAC,KAAD,CAAYnI,QAAQ,WAAWtF,QAAS8O,EAAmBpG,GAAG,MAA9D,SACE,cAAC,KAAD,CAAWxI,MAAM,UAAUsE,MAAM,WAEnC,cAAC,KAAD,CACEc,QAAQ,WACRtF,QAAS6O,EACTxC,SAAU,CAAC,UAAW,YAAY8C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAASlP,MAAM,UAAUsE,MAAM,kB,SCrG1B+K,GAVQ,SAACC,GACtB,IAAMzC,EAAqBC,eAM3B,MAAO,CAAEyC,SAJavE,sBAAW,wBAAC,uBAAAqB,EAAA,sEAC1BmD,aAAY3C,EAAoByC,GADN,2CAE/B,CAACA,EAASzC,MC0DA4C,GAhDuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAU9C,EAAU,EAAVA,IACzDkB,EAAYC,cAAZD,QACR,EAAqCvE,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACdpH,EAAMC,cAAND,EACR,EAAkCnD,oBAAS,GAA3C,mBAAOwK,EAAP,KAAkBC,EAAlB,KACQ4F,EAAaF,GAAezC,GAA5B2C,SACFnG,EAAYuG,cACZ/B,EAAWC,eACX+B,EAAqB9B,EAAUQ,YAAiBoB,GAAYG,KAC5D3H,EAAiB0H,EAAmBpB,QAAQ,EAAGvE,IAAUwE,YACzDqB,EAAeF,EAAqBA,EAAmBG,aAAa3G,GAAWqB,WAAa,EAElG,OACE,eAAC,KAAD,CAAMtF,GAAG,MAAMd,eAAe,gBAAgBa,WAAW,SAAzD,UACE,eAAC,KAAD,CAAMK,cAAc,SAASL,WAAW,aAAxC,UACE,cAAC,KAAD,CAASlF,MAAO4P,EAAmBxD,GAAG,GAAK,eAAiB,OAA5D,SAAqElE,IACpE4H,EAAe,GACd,cAACjB,GAAA,EAAD,CAAShH,SAAS,OAAO7H,MAAM,aAAawH,SAAU,EAAG7E,MAAOmN,EAAcf,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACE7C,SAAUyD,EAAmBxD,GAAG,IAAM1C,EACtC5J,QAAO,wBAAE,uBAAAuM,EAAA,6DACP1C,GAAa,GADN,kBAGC4F,IAHD,OAIL/F,EAAa,GAAD,OACPnH,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEoC,OAAQ,UANlE,gDASLgF,EACEpH,EAAE,SACFA,EAAE,uFAEJiK,QAAQC,MAAR,MAbK,yBAeL5C,GAAa,GAfR,qBAiBPiE,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAjB3C,+DAFX,SAsBevK,EAAZqH,EAAc,aAAkB,iB,mBC5C1BsG,GAZQ,SAACC,GACtB,IAAMpD,EAAqBC,eACnBoD,EAAqBC,eAArBD,iBAOR,MAAO,CAAEE,UANapF,sBAAW,wBAAC,+BAAAqB,EAAA,sEACf6D,EAAiBD,EAAY,UAAW,CAACpD,EAAmBnJ,QAAS2M,KAAOC,UAAUC,aADvE,cAC1BC,EAD0B,gBAEVA,EAAGC,OAFO,cAE1BC,EAF0B,yBAGzBA,EAAQC,QAHiB,2CAI/B,CAACV,EAAYpD,EAAoBqD,MCIhCU,GAASxT,IAAOC,IAAV,oDAqFGwT,GAtEqC,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,KAAMhD,EAAmD,EAAnDA,QAAS1J,EAA0C,EAA1CA,gBAAiBgF,EAAyB,EAAzBA,UAAWjF,EAAc,EAAdA,QACxF9B,EAAMC,cAAND,EACAoH,EAAeF,eAAfE,WACR,EAAkDvK,oBAAS,GAA3D,mBAAO6R,EAAP,KAA0BC,EAA1B,KACQpE,EAAqBkE,EAArBlE,IAAKqE,EAAgBH,EAAhBG,YACb,EAA6DH,EAAKI,UAAY,GAAtEC,EAAR,EAAQA,UAAW1D,EAAnB,EAAmBA,aAAc5E,EAAjC,EAAiCA,cAAe6G,EAAhD,EAAgDA,SAC1C0B,EAAYC,aAAWJ,GACvBK,EAAaxD,GAAWqD,GAAaA,EAAUI,cAAc,GAC7D3D,EAAWC,eAEXoC,EAAauB,aAASJ,GAEpBhB,EAAcJ,GAAeC,GAA7BG,UAEFqB,EAAgBzG,sBAAW,wBAAC,uBAAAqB,EAAA,sEAE9B2E,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9BxC,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAJpB,gDAM9BnD,EAAWpH,EAAE,SAAUA,EAAE,uFACzBiK,QAAQC,MAAR,MAP8B,yBAS9ByE,GAAqB,GATS,4EAW/B,CAACZ,EAAWxC,EAAUE,EAASlB,EAAKvK,EAAGoH,IAqB1C,OACE,eAACmH,GAAD,WACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAM1N,MAAI,EAACwO,cAAc,YAAY1R,MAAM,YAAY6H,SAAS,OAAO8J,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAMzO,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,eAGP,cAAC,GAAD,CAAeqN,SAAUA,EAAU9C,IAAKA,IACxC,eAAC,KAAD,WACE,cAAC,KAAD,CAAM1J,MAAI,EAACwO,cAAc,YAAY1R,MAAM,YAAY6H,SAAS,OAAO8J,GAAG,MAA1E,SACGb,EAAKc,WAER,cAAC,KAAD,CAAM1O,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,eAGLyL,EArCGwD,EACL,cAAC,GAAD,CACEzI,cAAeA,EACf4E,aAAcA,EACdzE,UAAW8H,EAAKc,SAChBhF,IAAKA,EACLzD,IAAK2H,EAAK3H,IACVhF,QAASA,EACTiF,UAAWA,EACXhF,gBAAiBA,IAGnB,cAAC,IAAD,CAAQ4H,GAAG,MAAM1H,MAAM,OAAO6H,SAAU4E,EAAmBjR,QAAS2R,EAApE,SACGpP,EAAE,qBAwBO,cAACwP,GAAA,EAAD,CAAqB7F,GAAG,MAAM1H,MAAM,aCxFhDwN,GAAoB1U,YAAOsH,KAAPtH,CAAH,yFAkER2U,GA9C6B,SAAC,GAUtC,IATL3M,EASI,EATJA,QACAwH,EAQI,EARJA,IACAzI,EAOI,EAPJA,QACAyN,EAMI,EANJA,SACAxI,EAKI,EALJA,UACAD,EAII,EAJJA,IACArE,EAGI,EAHJA,WACAmE,EAEI,EAFJA,WACA7E,EACI,EADJA,gBAEQ/B,EAAMC,cAAND,EACF6G,EAAU8E,YAAgB4D,GAChC,EAAwCI,YAAYpF,GAA5Ca,EAAR,EAAQA,aAAc5E,EAAtB,EAAsBA,cACtB,EAA4B6F,aAC1B,cAACrD,GAAA,EAAD,CACEC,UAAWjJ,EAAE,eAAgB,CAAEoC,OAAQN,IACvCoH,oBAAqB1C,EAAc2C,KAAKiC,GACxChC,mBAAoBmG,EACpBlG,kBAAmBxC,EAAQuB,WAC3BC,kBAAmBtB,EAAUqB,WAC7BtB,IAAKA,EACLrE,WAAYA,EACZmE,WAAYA,EACZ0C,SAAUvH,EACVwH,QAAM,KAXHqG,EAAP,oBAoBA,OACE,eAACH,GAAD,CAAmB5M,WAAW,SAASpF,QANf,SAACP,GACzBA,EAAMC,kBACNyS,KAIA,UACGhJ,EADH,IAEe,oBAAZ7D,GACC,cAAC,KAAD,CAAYA,QAAQ,OAAOmD,MAAM,KAAK9C,GAAG,MAAzC,SACE,cAAC,IAAD,CAAenB,MAAM,eC7CzB4N,GAAa9U,YAAO+U,IAAP/U,CAAH,uDAIVgV,GAAyBhV,YAAOsH,KAAPtH,CAAH,6GAMtBiV,GAAmBjV,IAAOC,IAAV,mGAEI,qBAAGC,MAAkBG,OAAO6U,cAkGvCC,GAtF2B,SAAC,GAAuD,IAArDzB,EAAoD,EAApDA,KAAM7H,EAA8C,EAA9CA,WAAYhF,EAAkC,EAAlCA,QAASmF,EAAyB,EAAzBA,UAAW0E,EAAc,EAAdA,QACzEzL,EAAMC,cAAND,EAER,EAA0DnD,oBAAS,GAAnE,mBAAOsT,EAAP,KAA8BC,EAA9B,KAEMvO,EACJ4M,EAAK4B,WAAa5B,EAAK4B,UAAU5H,GAAG,GAApC,WACQgG,EAAK4B,UAAUjI,WAAWkI,oBAAeC,EAAW,CAAEC,sBAAuB,KACjF,GAEA1O,EAAU2M,EAAKc,UAAYd,EAAKc,SAASkB,cAAcpR,QAAQ,UAAW,IAC1EqR,EAAYjC,EAAKkC,KAAOlC,EAAKkC,KAAKD,UAAY1Q,EAAE,eAEhD4Q,EAAwB7P,GAAyB,CACrDC,kBAAmByN,EAAK7L,WAAWvB,QACnCJ,aAAcwN,EAAK9L,MAAMtB,UAErBU,EAAe,UAAM8O,KAAN,YAAgCD,GAC/C7B,EAAYC,aAAWP,EAAKG,aAC5BkC,EAAuC,SAAtBrC,EAAK9L,MAAMP,OAElC,OACE,eAACyN,GAAD,CAAYkB,SAAUD,EAAtB,UACE,eAACf,GAAD,WACE,cAAC,GAAD,CACEjO,QAASA,EACTW,WAAYgM,EAAKhM,WACjBC,gBAAiB+L,EAAKuC,YACtBrO,MAAO8L,EAAK9L,MACZC,WAAY6L,EAAK7L,cAEjBhB,GACA,eAAC,KAAD,CAAMI,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,KAAD,WAAO7C,EAAE,OAAT,OACA,cAAC,KAAD,CAAMa,MAAI,EAACwE,MAAO,CAAE4L,QAAS,OAAQpO,WAAY,UAAjD,SACG4L,EAAK3H,IACJ,cAAC,GAAD,CACE/D,QAAQ,kBACRwH,IAAKkE,EAAKlE,IACVgF,SAAUd,EAAKc,SACf9M,WAAYgM,EAAKhM,WACjBX,QAASA,EACTC,gBAAiBA,EACjBgF,UAAWA,EACXD,IAAK2H,EAAK3H,IACVF,WAAYA,IAGd,cAAC,KAAD,CAAU1E,OAAQ,GAAID,MAAO,UAKrC,eAAC,KAAD,CAAMD,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOhC,EAAE,QAAT,OACA,cAAC,KAAD,CAAMa,MAAI,EAAV,SAAY6P,OAEd,cAACQ,GAAD,CACEzC,KAAMA,EACN3M,QAASA,EACT2J,QAASA,EACT1E,UAAWA,EACXhF,gBAAiBA,OAIrB,eAACiO,GAAD,WACE,cAAC,GAAD,CACEvS,QAAS,kBAAM2S,GAA0BD,IACzCxP,SAAUwP,IAEXA,GACC,cAAC,GAAD,CACEvO,QAASA,EACTF,eAAgByP,YAAepC,EAAW,WAC1CpN,YAAW,qBAAgBoN,GAC3BlN,oBAAqBA,EACrBC,QAASA,EACTC,gBAAiBA,WCjGdqP,GAfW,SAACC,EAAoBC,GAC7C,MAAwCzU,oBAAS,GAAjD,mBAAO0U,EAAP,KAAqBC,EAArB,KAWA,OATApU,qBAAU,WACR,IAAIqU,EAMJ,OALIJ,IAAcE,EAChBC,GAAgB,IACNH,GAAaE,IACvBE,EAAYC,YAAW,kBAAMF,GAAgB,KAAQF,IAEhD,kBAAMK,aAAaF,MACzB,CAACJ,EAAWC,EAAWC,IACnBA,GCHHK,GAAY7W,IAAOC,IAAV,8MAGJ,qBAAGC,MAAkBG,OAAOuJ,QAQvB,qBAAG1J,MAAkBG,OAAOyW,cAMtCC,GAAa/W,IAAOC,IAAV,uEA+CD+W,GA1CiB,SAAC,GAW1B,IAVLzR,EAUI,EAVJA,MACAiK,EASI,EATJA,IACAzI,EAQI,EARJA,QACAyN,EAOI,EAPJA,SACA9M,EAMI,EANJA,WACAxB,EAKI,EALJA,aACAD,EAII,EAJJA,kBACA+F,EAGI,EAHJA,UACAiL,EAEI,EAFJA,cAEI,IADJC,kBACI,SACErB,EAAwB7P,GAAyB,CAAEC,oBAAmBC,iBACtEc,EAAe,UAAM8O,KAAN,YAAgCD,GAErD,OAAyB,IAAlBoB,EACL,cAACJ,GAAD,UACGI,EACC,cAAC,GAAD,CACEjP,QAASkP,EAAa,OAAS,kBAC/B1H,IAAKA,EACLgF,SAAUA,EACVzN,QAASA,EACTW,WAAYA,EACZsE,UAAWA,EACXD,IAAKkL,EACLpL,WAAYtG,EACZyB,gBAAiBA,IAGnB,cAAC+P,GAAD,UACE,cAAC,KAAD,CAAU7P,MAAO,SAKvB,cAAC2P,GAAD,UACE,eAACE,GAAD,WAAaE,EAAb,UChEAJ,GAAY7W,IAAOC,IAAV,wIAKX,qBAAGC,MAAkBS,aAAaC,MAKhCuW,GAAenX,IAAOC,IAAV,uGAId,qBAAGC,MAAkBS,aAAaC,MAmCvBwW,GA9BkC,SAAC,GAAuC,IAArCxP,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYlF,EAAiB,EAAjBA,MAAO6M,EAAU,EAAVA,IACpE/D,EAAkBmJ,YAAYpF,GAA9B/D,cACAxG,EAAMC,cAAND,EACFoS,EAAmB3F,YAAiBjG,GAc1C,OACE,eAAC,GAAD,WACE,cAAC0L,GAAD,UACE,cAAC,KAAD,CAAgBnP,QAAQ,WAAWC,aAAcL,EAAOM,eAAgBL,EAAYX,MAAO,GAAIC,OAAQ,OAEzG,gCAhBEkQ,EAEA,cAAC,KAAD,CAAMzU,MAAM,YAAY6H,SAAS,OAAO3E,MAAI,EAACwO,cAAc,YAA3D,SACGrP,EAAE,aAKF,KAUH,cAAC,KAAD,CAAMa,MAAI,EAAV,SAAYnD,WC9Cd2U,GAAStX,IAAOuX,KAAV,uFACD,gBAAGC,EAAH,EAAGA,OAAQtX,EAAX,EAAWA,MAAX,OAAwBsX,EAAStX,EAAMG,OAAOuJ,KAAO1J,EAAMG,OAAOoX,gBAgB9DC,GAXiD,SAAC,GAAiC,IAA/BpF,EAA8B,EAA9BA,SACjE,OAD+F,EAApBqF,cAElE,cAACL,GAAD,CAAQE,OAAQlF,EAAhB,SAA2BA,EAASiD,mBAG3C,cAAC+B,GAAD,CAAQE,OAAQ,EAAhB,SACE,cAAC,KAAD,CAAUtQ,MAAO,QChBjB2P,GAAY7W,IAAOC,IAAV,6KAKJ,qBAAGC,MAAkBG,OAAOqF,WAEnC,qBAAGxF,MAAkBS,aAAaC,MAKhCgX,GAAY5X,YAAO6X,IAAP7X,CAAH,kEACA,qBAAG8X,QAAyB,iBAAmB,eAgB/CC,GAZyB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACjC/S,EAAMC,cAAND,EACAgT,EAAcC,eAAdD,UAER,OACE,eAAC,GAAD,YACIA,GAAahT,EAAE,WACjB,cAAC2S,GAAD,CAAWhV,MAAM,UAAUkV,QAASE,QC5BpCG,GAAmBnY,IAAOC,IAAV,wDAQhBmY,GAAoBpY,IAAOC,IAAV,uKACZ,qBAAGC,MAAkBG,OAAOuJ,QAKnC,qBAAG1J,MAAkBS,aAAa0X,MAMhCxB,GAAY7W,IAAOC,IAAV,wEAqCAqY,GAhC8C,SAAC,GAAoB,IAAlB5Q,EAAiB,EAAjBA,WACxD6Q,EAAoB7Q,EAAaA,EAAW8Q,cAAgB,cAAC,KAAD,CAAUtR,MAAO,KAC3EjC,EAAMC,cAAND,EACFwT,EACJ,qCACE,cAAC,KAAD,UACGxT,EACC,mIAGJ,cAAC,KAAD,CAAMyT,GAAG,OAAT,SACGzT,EAAE,sGAEL,cAAC,KAAD,UAAOA,EAAE,8EAGb,EAA+C0T,aAAWF,EAAgB,CACxEG,UAAW,UACXC,cAAe,CAAC,GAAI,MAFdC,EAAR,EAAQA,UAAW5X,EAAnB,EAAmBA,QAAS6X,EAA5B,EAA4BA,eAK5B,OACE,eAAC,GAAD,WACE,cAACX,GAAD,UAAoBG,IACpB,cAACJ,GAAD,CAAkBtV,IAAKiW,EAAvB,SACE,cAAC,KAAD,CAAUlW,MAAM,iBAEjBmW,GAAkB7X,MCnDnBiX,GAAmBnY,IAAOC,IAAV,wDAQhB+Y,GAAmBhZ,IAAOC,IAAV,kLAMlB,qBAAGC,MAAkBS,aAAa0X,MAMhCxB,GAAY7W,IAAOC,IAAV,wEA+BAgZ,GA1B4C,SAAC,GAAmB,IAAjB3D,EAAgB,EAAhBA,UACtD4D,EACJ5D,GAAaA,EAAU5H,GAAG,GAA1B,WACMmB,OAAOyG,GAAWC,oBAAeC,EAAW,CAAEC,sBAAuB,KAEzE,cAAC,KAAD,CAAUvO,MAAO,KAEbjC,EAAMC,cAAND,EACR,EAA+C0T,aAC7C1T,EAAE,+DACF,CAAE2T,UAAW,UAAWC,cAAe,CAAC,GAAI,MAFtCC,EAAR,EAAQA,UAAW5X,EAAnB,EAAmBA,QAAS6X,EAA5B,EAA4BA,eAK5B,OACE,eAAC,GAAD,WACE,cAACC,GAAD,UACE,cAAC,KAAD,UAAOE,MAET,cAAC,GAAD,CAAkBrW,IAAKiW,EAAvB,SACE,cAAC,KAAD,CAAUlW,MAAM,iBAEjBmW,GAAkB7X,MClDZiY,GAAkBnZ,IAAOC,IAAV,0XAEN,qBAAGC,MAAkBG,OAAOE,SAM9C,qBAAGL,MAAkBS,aAAaC,MAOlC,qBAAGV,MAAkBS,aAAayY,MAQzBC,GAAerZ,IAAOC,IAAV,gDAIZqZ,GAAgBtZ,IAAOC,IAAV,2GC4DXoS,GApEoD,SAAC,GAAsC,IAApC7C,EAAmC,EAAnCA,IAAKsE,EAA8B,EAA9BA,SAAU6D,EAAoB,EAApBA,cACnF,EAAqCxL,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAChBkN,EAAoB,IAAI1M,IAAUiH,EAASxB,UAC3CtG,EAAYuG,cACdD,EAAWG,KACXC,EAAe,EACf5H,EAAiB6M,EAAgBrF,EAASiD,iBAAmB,cAAC,KAAD,CAAUrO,MAAO,KAG7EqS,EAAkBC,WAErB9G,GADAJ,EAAWpB,YAAiBqI,IACJ5G,aAAa3G,GAAWqB,WAChDvC,EAAiBwH,EAASlB,QAAQ,EAAGvE,IAAUwE,aAGjD,MAAkCvP,oBAAS,GAA3C,mBAAOwK,EAAP,KAAkBC,EAAlB,KACQ4F,EAAaF,GAAezC,GAA5B2C,SACAlN,EAAMC,cAAND,EACFuL,EAAWC,eACTC,EAAYC,cAAZD,QAER,OACE,eAACyI,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAMvT,MAAI,EAACwO,cAAc,YAAY1R,MAAM,YAAY6H,SAAS,OAAO8J,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAMzO,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,eAGP,eAACqU,GAAD,WACE,gCACE,cAAC,KAAD,UAAUxO,IACT4H,EAAe,GACd,cAACjB,GAAA,EAAD,CAAShH,SAAS,OAAO7H,MAAM,aAAawH,SAAU,EAAG7E,MAAOmN,EAAcf,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACE7C,SAAUuD,EAAStD,GAAG,IAAM1C,IAAcqL,EAC1CjV,QAAO,wBAAE,uBAAAuM,EAAA,6DACP1C,GAAa,GADN,kBAGC4F,IAHD,OAIL/F,EAAa,GAAD,OACPnH,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEoC,OAAQ,UANlE,gDASLgF,EACEpH,EAAE,SACFA,EAAE,uFAEJiK,QAAQC,MAAR,MAbK,yBAeL5C,GAAa,GAfR,qBAiBPiE,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAjB3C,+DAmBTnH,GAAG,MArBL,SAuBepD,EAAZqH,EAAc,aAAkB,oBCxDrC6D,GAAoBnQ,IAAOC,IAAV,gDAmNRwZ,GAzM6C,SAAC,GAWtD,IAVLjK,EAUI,EAVJA,IACAzD,EASI,EATJA,IACArE,EAQI,EARJA,WACA8M,EAOI,EAPJA,SACAzN,EAMI,EANJA,QACA8M,EAKI,EALJA,YACAhM,EAII,EAJJA,WACAD,EAGI,EAHJA,MACA+P,EAEI,EAFJA,cACA9L,EACI,EADJA,WAEQ5G,EAAMC,cAAND,EACAoH,EAAeF,eAAfE,WACAqE,EAAYC,cAAZD,QACR,EAAkD5O,oBAAS,GAA3D,mBAAO6R,EAAP,KAA0BC,EAA1B,KACA,EAAmDgB,YAAYpF,GAAvDuE,EAAR,EAAQA,UAAW1D,EAAnB,EAAmBA,aAAc5E,EAAjC,EAAiCA,cACzBsE,EAAYD,GAAcN,GAA1BO,QACAJ,EAAcJ,GAAgBC,GAA9BG,UACFW,EAAWC,cACXzE,EAAU8E,YAAgB4D,GAC1BxI,EAAYuG,cAEZ2B,EAAaxD,GAAWqD,GAAaA,EAAUI,cAAc,GAE7DH,EAAYC,aAAWJ,GACvBgC,EAAwB7P,GAAyB,CACrDC,kBAAmB4B,EAAWvB,QAC9BJ,aAAc0B,EAAMtB,UAEhBU,EAAe,UAAM8O,KAAN,YAAgCD,GAE/ChF,EAAW,yCAAG,WAAOjB,GAAP,UAAAX,EAAA,sEACZc,EAAQH,GADI,OAElBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAFhC,2CAAH,sDAKXwB,EAAa,yCAAG,WAAOpB,GAAP,UAAAX,EAAA,sEACdU,EAAUC,GADI,OAEpBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAF9B,2CAAH,sDAKb1E,EAAiB8C,uBAAY,WACjC,IAAMqD,EAAyBC,YAAiBzF,GAChD,OAAIwF,EAAuBvD,GAAG,IAAMuD,EAAuBE,GAAG,MACrDF,EAAuBG,QAAQ,GAAIvE,YAAUwE,YAElDJ,EAAuBvD,GAAG,IAAMuD,EAAuBE,GAAG,MACrDxE,YAAsBlB,GAAe8J,iBAEvCtE,EAAuBG,QAAQ,EAAGvE,YAAUwE,cAClD,CAAC5F,IAEJ,EAA2B6F,aACzB,cAAC,GAAD,CACErH,IAAKoG,EACLvE,QAASA,EACT/E,QAASA,EACTgF,IAAKA,EACLF,WAAYA,EACZJ,cAAeA,EACfC,UAAWmF,EACXjF,UAAW4I,EACX9M,WAAYA,EACZV,gBAAiBA,EACjBgF,UAAWA,KAZRuF,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAerH,IAAKwB,EAAeC,UAAWsF,EAAepF,UAAW4I,KADnEhD,EAAP,oBAGMqB,EAAauB,aAASJ,GACtBxD,EAAWC,eACTuC,EAAcJ,GAAeC,GAA7BG,UAEFqB,EAAgBzG,sBAAW,wBAAC,uBAAAqB,EAAA,sEAE9B2E,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9BxC,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAJpB,gDAM9BnD,EAAWpH,EAAE,SAAUA,EAAE,uFACzBiK,QAAQC,MAAR,MAP8B,yBAS9ByE,GAAqB,GATS,4EAW/B,CAACZ,EAAWxC,EAAUE,EAASlB,EAAKvK,EAAGoH,IAE1C,OAAKqE,EAeDwD,EACEzI,EAAciC,GAAG,GAEjB,eAACyL,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAMvT,MAAI,EAACwO,cAAc,YAAY1R,MAAM,YAAY6H,SAAS,OAAO8J,GAAG,MAA1E,SACGC,IAEH,cAAC,KAAD,CAAM1O,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,eAGP,eAACqU,GAAD,WACE,gCACE,cAAC,KAAD,UAAUxO,MACTW,EAAciC,GAAG,IAAM5B,EAAQ4B,GAAG,IACjC,cAAC+D,GAAA,EAAD,CACEhH,SAAS,OACT7H,MAAM,aACNwH,SAAU,EACV7E,MAAOmM,YAAiB5F,EAAQkB,MAAMvB,IACtCkG,KAAK,OACLC,OAAO,SAIb,eAAC,GAAD,WACE,cAAC,KAAD,CAAY5J,QAAQ,YAAYtF,QAAS8O,EAAmBpG,GAAG,MAA/D,SACE,cAAC,KAAD,CAAWxI,MAAM,UAAUsE,MAAM,WAEnC,cAAC,KAAD,CACEc,QAAQ,YACRtF,QAAS6O,EACTxC,SAAU,CAAC,UAAW,YAAY8C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAASlP,MAAM,UAAUsE,MAAM,oBASzC,eAACiS,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAMvT,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAO8J,GAAG,MAA3E,SACGtP,EAAE,WAEL,cAAC,KAAD,CAAMa,MAAI,EAACwO,cAAc,YAAY1R,MAAM,YAAY6H,SAAS,OAAhE,SACG+J,OAGL,cAAC8E,GAAD,UACE,cAAC,IAAD,CACEpS,MAAM,OACNxE,QAAS6O,EACTvJ,QAAQ,YACR+G,SAAU,CAAC,UAAW,YAAY8C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAJ9E,SAMG7M,EAAE,mBAOR0S,EAgBH,eAACwB,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAMvT,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,mBAGP,cAACqU,GAAD,UACE,cAAC,IAAD,CAAQpS,MAAM,OAAO6H,SAAU4E,EAAmBjR,QAAS2R,EAAerM,QAAQ,YAAlF,SACG/C,EAAE,iBAtBP,eAACkU,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAMvT,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,qBAGP,cAACqU,GAAD,UACE,cAAC,KAAD,CAAUpS,MAAO,IAAKwS,aAAc,GAAIC,UAAW,UAzFvD,eAACR,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAMvT,MAAI,EAACwO,cAAc,YAAY1R,MAAM,aAAa6H,SAAS,OAAjE,SACGxF,EAAE,qBAGP,cAACqU,GAAD,UACE,cAAC7E,GAAA,EAAD,CAAqBvN,MAAM,eC5G/B0S,GAAkBC,YAAH,wGASfC,GAAoBD,YAAH,wGASjBhD,GAAY7W,IAAOC,IAAV,oPACA,qBAAG2F,SAEV3E,YADI,0EAEA2Y,IAEJ3Y,YAJI,0EAKA6Y,OAGI,qBAAG5Z,MAAkBG,OAAO0Z,cAMxC,qBAAG7Z,MAAkBS,aAAa0X,MAMhC7R,GAAqBxG,YAAOyG,KAAPzG,CAAH,mDAIlBga,GAAiBha,IAAOC,IAAV,4KACT,qBAAGC,MAAkBG,OAAOuJ,QAKnC,qBAAG1J,MAAkBS,aAAaC,MAKhCqZ,GAAgBja,IAAOC,IAAV,oRAKf,qBAAGC,MAAkBS,aAAaC,MAgBhCuY,GAAkBnZ,IAAOC,IAAV,sLAIjB,qBAAGC,MAAkBS,aAAaC,MAQhCsZ,GAAgBla,IAAOC,IAAV,mDAIbka,GAAiBna,IAAOC,IAAV,qFAGhB,qBAAGC,MAAkBS,aAAa0X,MAKhC+B,GAAepa,IAAOC,IAAV,+HAoEHoa,GA7DgD,SAAC,GAOzD,IANLC,EAMI,EANJA,QACAvO,EAKI,EALJA,IACArE,EAII,EAJJA,WACA4N,EAGI,EAHJA,UACAqC,EAEI,EAFJA,cACA/R,EACI,EADJA,SAEM8N,EAAO4G,EAELrV,EAAMC,cAAND,EACF+Q,EAA+B,OAApBtC,EAAKhM,WACdG,EAA4B6L,EAA5B7L,WAAYD,EAAgB8L,EAAhB9L,MAAOgO,EAASlC,EAATkC,KACrB7O,EAAU2M,EAAKc,UAAYd,EAAKc,SAASkB,cAAcpR,QAAQ,UAAW,IAC1EuR,EAAwB7P,GAAyB,CACrDC,kBAAmB4B,EAAWvB,QAC9BJ,aAAc0B,EAAMtB,UAEhB0N,EAAYC,aAAWP,EAAKG,aAC5B0G,EAAMnE,YAAepC,EAAW,WAChC9D,EAAI,qBAAiB8D,GAE3B,OACE,eAAC,GAAD,CAAWpO,SAAUA,EAArB,UACE,eAACsU,GAAD,WACGlE,GACC,cAACgE,GAAD,UACE,cAAC,GAAD,CAAoB5S,KAAI,eAAUyO,GAAlC,SACG5Q,EAAE,eAAgB,CAAEoC,OAAQN,QAInC,cAAC,GAAD,CAAoBK,KAAMmT,EAA1B,SAAgCtV,EAAE,mBAClC,cAAC,GAAD,CAAoBmC,KAAM8I,EAA1B,SAAiCjL,EAAE,mBACnC,eAACgV,GAAD,WACGvG,EAAKuC,YAAc,cAAC,KAAD,IAAmB,cAAC,KAAD,IACtCL,EAAO,cAAC,KAAD,IAAc,WAG1B,eAACuE,GAAD,WACE,eAACC,GAAD,WACE,cAAC,KAAD,UAAOnV,EAAE,SACT,cAAC,GAAD,eAAS8G,OAEX,eAACqO,GAAD,WACE,cAAC,KAAD,UAAOnV,EAAE,gBACT,cAAC,GAAD,eAAgByC,OAElB,eAAC0S,GAAD,WACE,cAAC,KAAD,UAAOnV,EAAE,eACT,cAAC,GAAD,eAAeqQ,UAGnB,eAAC,GAAD,WACE,cAAC,GAAD,2BAAmB5B,GAAnB,IAAyBiE,cAAeA,KACxC,cAAC6C,GAAD,2BAAkB9G,GAAlB,IAAwBiE,cAAeA,EAAe5Q,QAASA,EAAS8E,WAAYE,EAAIxG,gBCxL1FkV,GAAQza,IAAOC,IAAV,sFAEA,qBAAGC,MAAkBG,OAAOyW,cAIjC4D,GAAmB1a,IAAOC,IAAV,6FAmBP0a,GAT+B,SAAC,GAA8B,IAAD,IAA3BhY,aAA2B,MAAnB,GAAmB,EAAfsG,EAAe,EAAfA,SAC3D,OACE,gCACGtG,GAAS,cAAC8X,GAAD,UAAQ9X,IAClB,cAAC+X,GAAD,UAAmBzR,QCMZ2R,GAAwC,CACnD,CACEC,GAAI,EACJC,KAAM,OACNC,UAAU,EACVpY,MAAO,IAET,CACEkY,GAAI,EACJC,KAAM,SACNC,UAAU,EACVpY,MAAO,UAET,CACEkY,GAAI,EACJC,KAAM,MACNC,UAAU,EACVpY,MAAO,OAET,CACEkY,GAAI,EACJC,KAAM,UACNC,UAAU,EACVpY,MAAO,KAIEqY,GAAyC,CACpD,CACEH,GAAI,EACJC,KAAM,OACNC,UAAU,EACVpY,MAAO,IAET,CACEkY,GAAI,EACJC,KAAM,SACNC,UAAU,EACVpY,MAAO,UAET,CACEkY,GAAI,EACJC,KAAM,MACNC,UAAU,EACVpY,MAAO,OAET,CACEkY,GAAI,EACJC,KAAM,YACNC,UAAU,EACVpY,MAAO,aAET,CACEkY,GAAI,EACJC,KAAM,aACNC,UAAU,EACVpY,MAAO,cAET,CACEkY,GAAI,EACJC,KAAM,UACNC,UAAU,EACVpY,MAAO,KC5DLsY,GAAQ,CACZlP,IAAKiL,GACLtD,KAAM0D,GACNI,OAAQE,GACR4C,QAASvC,GACTrQ,WAAY4Q,GACZhD,UAAW2D,IAGPiC,GAAYlb,IAAOC,IAAV,+KAOX,qBAAGC,MAAkBS,aAAayY,MAKhC+B,GAAWnb,IAAOob,GAAV,mFAEe,qBAAGlb,MAAkBG,OAAO6U,cAGnDmG,GAAmBrb,IAAOsb,GAAV,4DAIhBC,GAAgBvb,IAAOsb,GAAV,6EAKbE,GAAiBxb,IAAOsb,GAAV,oDAwHLG,GApH2C,SAAC1a,GACzD,IAAQuZ,EAA2BvZ,EAA3BuZ,QAAS3C,EAAkB5W,EAAlB4W,cACX+D,IAAoB9G,YAAY0F,EAAQ9K,KAAK/D,cAAc4B,WACjE,EAAsDvL,mBAAS4Z,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACMC,EAAoBxF,GAAkBsF,EAAqB,KACzD1W,EAAMC,cAAND,EAEF6W,EAAoB,WACxBF,GAAwBD,IAG1BtZ,qBAAU,WACRuZ,EAAuBF,KACtB,CAACA,IAEJ,MAAgCxD,eAAxBD,EAAR,EAAQA,UAAW8D,EAAnB,EAAmBA,SAEbC,GAAmB/D,EACnBgE,EAAcD,EAAkBpB,GAAqBI,GACrDkB,EAAcD,EAAYnZ,KAAI,SAACqZ,GAAD,OAAYA,EAAOrB,QAmFvD,OACE,qCAjFKiB,EA+CH,eAACZ,GAAD,CAAUzY,QAASoZ,EAAnB,UACE,+BACE,6BACE,cAACN,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,eAAUza,EAAM2S,aAItB,+BACE,cAAC2H,GAAD,UACE,cAAC,GAAD,CAAY1Y,MAAOsC,EAAE,UAArB,SACE,cAAC,GAAD,2BAAYlE,EAAMyW,QAAlB,IAA0BG,cAAeA,SAG7C,cAAC4D,GAAD,UACE,cAAC,GAAD,CAAY5Y,MAAOsC,EAAE,OAArB,SACE,cAAC,GAAD,2BAASlE,EAAMgL,KAAf,IAAoBmL,YAAU,eAKtC,6BACE,cAACgE,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAASlD,mBAAoB2D,aAtEnC,cAACR,GAAD,CAAUzY,QAASoZ,EAAnB,SACGM,OAAOC,KAAKtb,GAAO+B,KAAI,SAACwZ,GACvB,IAAMC,EAAcL,EAAYM,QAAQF,GACxC,IAAqB,IAAjBC,EACF,OAAO,KAGT,OAAQD,GACN,IAAK,UACH,OACE,6BACE,cAACpB,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAASlD,mBAAoB2D,SAH1BW,GAQb,IAAK,MACH,OACE,6BACE,cAACpB,GAAD,UACE,cAAC,GAAD,CAAYvY,MAAOsC,EAAE,OAArB,SACE,cAAC,GAAD,2BAASlE,EAAMgL,KAAf,IAAoBmL,WAAY8E,UAH7BM,GAQb,QACE,OACE,6BACE,cAACpB,GAAD,UACE,cAAC,GAAD,CAAYvY,MAAOsC,EAAEgX,EAAYM,GAAa5Z,OAA9C,SACGwG,IAAMsT,cAAcxB,GAAMqB,GAA1B,2BAAqCvb,EAAMub,IAA3C,IAAiD3E,wBAH/C2E,SAmDpBT,GACC,6BACE,oBAAIa,QAAS,EAAb,SACE,cAAC,GAAD,2BAAiB3b,GAAjB,IAAwB6E,SAAU+V,aCpKxC9E,GAAY7W,IAAOC,IAAV,+HACH,qBAAGC,MAAkByc,KAAKC,cAEtB,qBAAG1c,MAAkByc,KAAK5C,cAKpC8C,GAAe7c,IAAOC,IAAV,qIASZ6c,GAAc9c,IAAO+c,MAAV,oKASXC,GAAYhd,IAAOid,MAAV,qHASTC,GAAiBld,IAAOC,IAAV,qDAIdkd,GAAwBnd,IAAOC,IAAV,yHA2CZmd,GApC0B,SAACrc,GACxC,IAAMsc,EAAiBxb,iBAAuB,MACtCoD,EAAMC,cAAND,EACAqY,EAAiCvc,EAAjCuc,KAAMC,EAA2Bxc,EAA3Bwc,QAAS5F,EAAkB5W,EAAlB4W,cAEf6F,EAASC,aAASF,EAASD,EAAM,CAAEvC,UAAU,EAAM2C,WAAY,SAA/DF,KAQR,OACE,cAAC,GAAD,CAAW3C,GAAG,cAAd,SACE,eAACqC,GAAD,WACE,cAACL,GAAD,CAAcha,IAAKwa,EAAnB,SACE,cAACP,GAAD,UACE,cAACE,GAAD,UACGQ,EAAK1a,KAAI,SAAC6a,GACT,OAAO,wBAAC,GAAD,2BAASA,EAAIC,UAAb,IAAuBjG,cAAeA,EAAe2E,IAAG,oBAAeqB,EAAI9C,gBAK1F,cAACsC,GAAD,UACE,eAAC,IAAD,CAAQnV,QAAQ,OAAOtF,QAnBX,WAClB2a,EAAe5Z,QAAQoa,eAAe,CACpCC,SAAU,YAiBN,UACG7Y,EAAE,UACH,cAAC,IAAD,CAAerC,MAAM,uBCzClBmb,GArCuC,SAAC,GAAiC,IAKlFC,EALmDC,EAA8B,EAA9BA,wBAC/CC,EAAQC,cAARD,IACF5N,EAAWC,cACTtL,EAAMC,cAAND,EAGR,OAAQqL,EAASyB,UACf,IAAK,SACHiM,EAAc,EACd,MACF,IAAK,iBACHA,EAAc,EACd,MACF,IAAK,kBACHA,EAAc,EACd,MACF,QACEA,EAAc,EAIlB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAYA,YAAaA,EAAa7S,MAAM,KAAKnD,QAAQ,SAAzD,UACE,cAAC,IAAD,CAAgBoW,GAAIC,IAAMC,GAAE,UAAKJ,GAAjC,SACGjZ,EAAE,UAEL,cAAC,KAAD,CAAiBsZ,KAAMN,EAAvB,SACE,cAAC,IAAD,CAAgBpD,GAAG,wBAAwBuD,GAAIC,IAAMC,GAAE,UAAKJ,EAAL,YAAvD,SACGjZ,EAAE,sBAUTQ,GAAUzF,IAAOC,IAAV,6MAUT,qBAAGC,MAAkBS,aAAaC,MCjDhCiW,GAAY7W,IAAOC,IAAV,yFAGX,qBAAGC,MAAkBS,aAAaC,MAwBvB4d,GAnB8C,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAClEC,EAAe,SAACC,GAChBH,IAAaG,GACfF,EAASE,IAIb,OACE,eAAC,GAAD,WACE,cAAC,KAAD,CAAY5W,QAAQ,OAAOmD,MAAM,KAAK0P,GAAG,oBAAoBnY,QAAS,kBAAMic,EAAaE,IAASC,OAAlG,SACE,cAAC,IAAD,CAAclc,MAAO6b,IAAaI,IAASC,KAAO,UAAY,mBAEhE,cAAC,KAAD,CAAY9W,QAAQ,OAAOmD,MAAM,KAAK0P,GAAG,qBAAqBnY,QAAS,kBAAMic,EAAaE,IAASE,QAAnG,SACE,cAAC,KAAD,CAAcnc,MAAO6b,IAAaI,IAASE,MAAQ,UAAY,uBCAjEC,GAAmBhf,IAAOC,IAAV,uTAUlB,qBAAGC,MAAkBS,aAAaC,MAQhCqe,GAAgBjf,IAAOC,IAAV,oIAKf8J,MAKEmV,GAAelf,IAAOC,IAAV,mEACZ8J,MAKAoV,GAAkBnf,IAAOC,IAAV,gKAMjB,qBAAGC,MAAkBS,aAAaC,MAMhCwe,GAAepf,IAAOC,IAAV,qSAWd,qBAAGC,MAAkBS,aAAaC,MAUhCye,GAAcrf,YAAOsf,KAAPtf,CAAH,gGAOXuf,GAAgB,SAACC,EAAyBC,GAC9C,OAAID,GAAkBC,GACZD,EAAiBC,GAAclK,eAAe,QAAS,CAAEE,sBAAuB,IAEtF+J,EACKA,EAAejK,eAAe,QAAS,CAAEE,sBAAuB,IAElE,MAkVMiK,GA/US,WACtB,IAAQC,EAASxB,cAATwB,KACA5N,EAAaxB,cAAbwB,SACA9M,EAAMC,cAAND,EACR,EAA0C2a,cAA5BC,EAAd,EAAQvC,KAAewC,EAAvB,EAAuBA,eACjB9T,EAAYuG,cAClB,EAA0BzQ,mBAAS,IAAnC,mBAAOie,EAAP,KAAcC,EAAd,KACA,EAAgCC,cAAhC,mBAAOxB,EAAP,KAAiByB,EAAjB,KACQxP,EAAYC,cAAZD,QACR,EAAoC5O,mBAAS,OAA7C,mBAAOqe,EAAP,KAAmBC,EAAnB,KACA,EAAwCld,cAAhCC,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,eACf8c,EAAoBxe,iBAAO,GAE3Bye,EAAavO,EAASC,SAAS,YAC/BuO,EAAaxO,EAASC,SAAS,WAC/BgE,GAAYuK,IAAeD,EAEjCE,YAAyBF,GAIzB,IAAM3I,GAAiBjH,KAAcA,GAAWoP,EAEhD,GAAoCW,YAAsBzK,GAA1D,qBAAO0K,GAAP,MAAmBC,GAAnB,MAEMC,GAAcf,EAAQgB,QAAO,SAACnN,GAAD,OAAuB,IAAbA,EAAKlE,KAAiC,OAApBkE,EAAKhM,aAAwBoZ,YAAcpN,EAAKlE,QACzGuR,GAAgBlB,EAAQgB,QAAO,SAACnN,GAAD,OAAuB,IAAbA,EAAKlE,KAAiC,OAApBkE,EAAKhM,aAAwBoZ,YAAcpN,EAAKlE,QAC3GwR,GAAgBnB,EAAQgB,QAAO,SAACnN,GAAD,OAAUoN,YAAcpN,EAAKlE,QAE5DyR,GAAkBL,GAAYC,QAClC,SAACnN,GAAD,OAAUA,EAAKI,UAAY,IAAIjH,IAAU6G,EAAKI,SAASrI,eAAe0I,cAAc,MAGhF+M,GAAsBH,GAAcF,QACxC,SAACnN,GAAD,OAAUA,EAAKI,UAAY,IAAIjH,IAAU6G,EAAKI,SAASrI,eAAe0I,cAAc,MAGhFgN,GAAsBH,GAAcH,QACxC,SAACnN,GAAD,OAAUA,EAAKI,UAAY,IAAIjH,IAAU6G,EAAKI,SAASrI,eAAe0I,cAAc,MAGhFiN,GAAYxT,uBAChB,SAACyT,GACC,IAAIC,EAA+CD,EAAeve,KAAI,SAAC4Q,GACrE,IAAKA,EAAK6N,sBAAwB7N,EAAK8N,oBACrC,OAAO9N,EAET,IAAM+N,EAAiB,IAAI5U,IAAU6G,EAAK6N,qBAAqBvU,MAAM0G,EAAK8N,qBAC1E,EAAyCxL,EACrC0L,YAAW,IAAI7U,IAAU6G,EAAKiO,YAAa3V,EAAWyV,EAAgB/N,EAAKG,YAAY+N,IAAQC,UAC/F,CAAErC,eAAgB,EAAGC,aAAc,GAF/BD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aAIxB,OAAO,2BAAK/L,GAAZ,IAAkB3H,IAAKyT,EAAgBC,eAAcnK,UAAWmM,OAGlE,GAAI1B,EAAO,CACT,IAAM+B,EAAiBzd,EAAS0b,EAAMvH,eACtC8I,EAAwBA,EAAsBT,QAAO,SAACnN,GACpD,OAAOrP,EAASqP,EAAKc,SAASgE,eAAexG,SAAS8P,MAG1D,OAAOR,IAET,CAACtV,EAAW+T,EAAO/J,IAOrB,GAAwDlU,mBAlF1B,IAkF9B,qBAAOigB,GAAP,MAA6BC,GAA7B,MAEMC,GAAsB7c,mBAAQ,WAClC,IAAI8c,EAAc,GAmClB,OAVIlM,IACFkM,EAA2Bd,GAAbV,GAAuBO,GAA6BL,KAEhEL,IACF2B,EAA2Bd,GAAbV,GAAuBQ,GAAiCH,KAEpET,IACF4B,EAA2Bd,GAAbV,GAAuBS,GAAiCH,KA9BtD,SAACmB,GACjB,OAAQhC,GACN,IAAK,MACH,OAAOiC,kBAAQD,GAAO,SAACzO,GAAD,OAA+BA,EAAK3H,IAAM2H,EAAK+L,eAAc,QACrF,IAAK,aACH,OAAO2C,kBACLD,GACA,SAACzO,GAAD,OAAgCA,EAAKhM,WAAamH,OAAO6E,EAAKhM,WAAW2a,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOD,kBACLD,GACA,SAACzO,GAAD,OAAgCA,EAAKI,SAAWjF,OAAO6E,EAAKI,SAASxB,UAAY,IACjF,QAEJ,IAAK,YACH,OAAO8P,kBAAQD,GAAO,SAACzO,GAAD,OAA+B7E,OAAO6E,EAAK4B,aAAY,QAC/E,QACE,OAAO6M,GAcNG,CAAUJ,GAAaG,MAAM,EAAGN,MACtC,CACD5B,EACAS,GACAQ,GACAL,GACAC,GACAhL,EACAuK,EACAD,EACAa,GACAD,GACAR,GACAO,GACAc,KAGF1B,EAAkB5c,QAAUwe,GAAoB3Y,OAEhDjH,qBAAU,WACJkB,GACFye,IAAwB,SAACO,GACvB,OAAIA,GAAyBlC,EAAkB5c,QACtC8e,EA/Ie,GAiJjBA,OAGV,CAAChf,IAEJ,IAAMif,GAAUP,GAAoBnf,KAAI,SAAC4Q,GACvC,IAAQ9L,EAAsB8L,EAAtB9L,MAAOC,EAAe6L,EAAf7L,WACT3B,EAAe0B,EAAMtB,QACrBL,EAAoB4B,EAAWvB,QAC/BS,EAAU2M,EAAKc,UAAYd,EAAKc,SAASpM,MAAM,KAAK,GAAGsN,cAAcpR,QAAQ,UAAW,IAiC9F,MA/BsB,CACpByH,IAAK,CACHxG,MAAOga,GAAc7L,EAAK3H,IAAK2H,EAAK+L,cACpCjQ,IAAKkE,EAAKlE,IACV9H,WAAYgM,EAAKhM,WACjBX,UACAyN,SAAUd,EAAKc,SACftO,eACAD,oBACA+F,YACAiL,cAAevD,EAAK3H,KAEtB2H,KAAM,CACJ/Q,MAAOoE,EACPyI,IAAKkE,EAAKlE,IACV5H,MAAO8L,EAAK9L,MACZC,WAAY6L,EAAK7L,YAEnB2P,OAAQ,CACNlF,SAAUZ,YAAiB,IAAI7E,IAAU6G,EAAKI,SAASxB,WACvD9C,IAAKkE,EAAKlE,KAEZ8F,UAAW,CACTA,UAAW5B,EAAK4B,WAElB5N,WAAY,CACVA,WAAYgM,EAAKhM,YAEnB4S,QAAS5G,MAkFb,OACE,qCACE,eAAC+O,EAAA,EAAD,WACE,cAAC,KAAD,CAASrE,GAAG,KAAKjT,MAAM,MAAMvI,MAAM,YAAYmF,GAAG,OAAlD,SACG9C,EAAE,WAEL,cAAC,KAAD,CAASkG,MAAM,KAAKvI,MAAM,OAA1B,SACGqC,EAAE,8BAEL,cAAC,IAAD,CAASyd,OAAK,EAACC,gBAAgB,SAASrE,GAAG,iBAAiBzD,GAAG,qBAA/D,SACE,eAAC,IAAD,CAAQ+H,EAAE,IAAI5a,QAAQ,OAAtB,UACE,cAAC,KAAD,CAAMpF,MAAM,UAAUkD,MAAI,EAAC2E,SAAS,OAAOW,GAAG,MAA9C,SACGnG,EAAE,wBAEL,cAAC,IAAD,CAAkBrC,MAAM,oBAI9B,eAACigB,EAAA,EAAD,WACE,eAAC7D,GAAD,WACE,eAACI,GAAD,WACE,cAAC,GAAD,CAAYX,SAAUA,EAAUC,SAAU,SAACE,GAAD,OAAoBsB,EAAYtB,MAC1E,eAACK,GAAD,WACE,cAAC,KAAD,CACEpE,GAAG,oBACHiI,QAASpC,GACT7b,SAAU,kBAAM8b,IAAeD,KAC/BvV,MAAM,OAER,eAAC,KAAD,eAAQlG,EAAE,qBAEZ,cAAC,GAAD,CAAgBgZ,wBAAyBiD,GAAoB5X,OAAS,OAExE,eAAC6V,GAAD,WACE,eAACD,GAAD,WACE,cAAC,KAAD,CAAM5K,cAAc,YAApB,SAAiCrP,EAAE,aACnC,cAACzD,EAAA,EAAD,CACEC,QAAS,CACP,CACEkB,MAAOsC,EAAE,OACTM,MAAO,OAET,CACE5C,MAAOsC,EAAE,OACTM,MAAO,OAET,CACE5C,MAAOsC,EAAE,cACTM,MAAO,cAET,CACE5C,MAAOsC,EAAE,UACTM,MAAO,UAET,CACE5C,MAAOsC,EAAE,aACTM,MAAO,cAGX7D,eA/DiB,SAACqB,GAC9Bqd,EAAcrd,EAAOwC,aAiEb,eAAC2Z,GAAD,CAAc5U,MAAO,CAAEyY,WAAY,IAAnC,UACE,cAAC,KAAD,CAAMzO,cAAc,YAApB,SAAiCrP,EAAE,YACnC,cAAC,EAAD,CAAaJ,SA5PC,SAAC1C,GACzB6d,EAAS7d,EAAMqD,OAAOD,QA2P8BT,YAAY,0BA5I5C,WACpB,GAAI2Z,IAAaI,IAASE,OAASyD,GAAQlZ,OAAQ,CACjD,IAEMiU,EAFevC,GAEQlY,KAAI,SAACqZ,GAAD,MAAa,CAC5CtB,GAAIsB,EAAOtB,GACXC,KAAMqB,EAAOrB,KACbnY,MAAOwZ,EAAOxZ,MACdqgB,KAAM,SAAC/T,EAAsBgU,GAC3B,OAAQ9G,EAAOrB,MACb,IAAK,OACH,OAAOmI,EAAEpI,GAAK5L,EAAE4L,GAClB,IAAK,MACH,OAAI5L,EAAE2O,SAAS7R,IAAIxG,OAAS0d,EAAErF,SAAS7R,IAAIxG,MAClCsJ,OAAOI,EAAE2O,SAAS7R,IAAIxG,OAASsJ,OAAOoU,EAAErF,SAAS7R,IAAIxG,OAGvD,EACT,IAAK,SACH,OAAO0J,EAAE2O,SAASpG,OAAOlF,SAAW2Q,EAAErF,SAASpG,OAAOlF,SACxD,QACE,OAAO,IAGbyI,SAAUoB,EAAOpB,aAGnB,OAAO,cAAC,GAAD,CAAOuC,KAAMkF,GAASjF,QAASA,EAAS5F,cAAeA,IAGhE,OACE,eAACrQ,EAAA,EAAD,WACE,cAAC,IAAD,CAAOob,OAAK,EAAC/C,KAAI,UAAKA,GAAtB,SACGsC,GAAoBnf,KAAI,SAAC4Q,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACN7H,WAAY0T,GAAc7L,EAAK3H,IAAK2H,EAAK+L,cACzCzT,UAAWA,EACX0E,QAASA,EACT7J,SAAS,GALJ6M,EAAKlE,UAShB,cAAC,IAAD,CAAOkT,OAAK,EAAC/C,KAAI,UAAKA,EAAL,YAAjB,SACGsC,GAAoBnf,KAAI,SAAC4Q,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACN7H,WAAY0T,GAAc7L,EAAK3H,IAAK2H,EAAK+L,cACzCzT,UAAWA,EACX0E,QAASA,EACT7J,SAAO,GALF6M,EAAKlE,UAShB,cAAC,IAAD,CAAOkT,OAAK,EAAC/C,KAAI,UAAKA,EAAL,aAAjB,SACGsC,GAAoBnf,KAAI,SAAC4Q,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACN7H,WAAY0T,GAAc7L,EAAK3H,IAAK2H,EAAK+L,cACzCzT,UAAWA,EACX0E,QAASA,EACT7J,SAAO,GALF6M,EAAKlE,aAqFf0T,GACAxS,IAAYoP,GAAkBY,IAC7B,cAAC,KAAD,CAAMzZ,eAAe,SAArB,SACE,cAACjD,EAAA,EAAD,MAGJ,qBAAKnB,IAAKM,IACV,cAACkc,GAAD,CAAa8D,IAAI,gCAAgCC,IAAI,uBAAuBlc,MAAO,IAAKC,OAAQ,c,mKCtblGkc,EAAQrjB,YAAOc,IAAPd,CAAH,gDACK,gBAAGE,EAAH,EAAGA,MAAH,SAAU6Z,YAA+B7Z,EAAMG,OAAOijB,UAAUC,aAG1EC,EAAQxjB,YAAO6W,IAAP7W,CAAH,2EAWIyiB,EAN+B,SAAC,GAAD,IAAG1I,EAAH,EAAGA,WAAY9Q,EAAf,EAAeA,SAAalI,EAA5B,wBAC5C,cAACsiB,EAAD,yBAAOtJ,WAAYA,GAAgBhZ,GAAnC,aACE,cAACyiB,EAAD,UAAQva","file":"static/js/31.f92d4629.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n  defaultOptionIndex?: number\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({\r\n  options,\r\n  onOptionChange,\r\n  defaultOptionIndex = 0,\r\n  ...props\r\n}) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(defaultOptionIndex)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nconst useIntersectionObserver = () => {\r\n  const observerRef = useRef<HTMLDivElement>(null)\r\n  const intersectionObserverRef = useRef<IntersectionObserver>(null)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const [isIntersecting, setIsIntersecting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\r\n      setIsIntersecting(entry.isIntersecting)\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      intersectionObserverRef.current = new IntersectionObserver(checkObserverIsIntersecting, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      intersectionObserverRef.current.observe(observerRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n\r\n    return () => {\r\n      if (intersectionObserverRef.current && observerIsSet) {\r\n        intersectionObserverRef.current.disconnect()\r\n      }\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  return { observerRef, isIntersecting }\r\n}\r\n\r\nexport default useIntersectionObserver\r\n","import styled from 'styled-components'\r\n\r\nconst Loading = styled.div`\r\n  border: 8px solid #f3f3f3;\r\n  border-radius: 50%;\r\n  border-top: 8px solid #ddd;\r\n  border-bottom: 8px solid #ddd;\r\n  width: 20px;\r\n  height: 20px;\r\n  -webkit-animation: spin 2s linear infinite;\r\n  animation: spin 2s linear infinite;\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`\r\n\r\nexport default Loading\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getLiquidityUrlPathParts = ({\r\n  quoteTokenAddress,\r\n  tokenAddress,\r\n}: {\r\n  quoteTokenAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  const wBnbAddress = tokens.wbnb.address\r\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\r\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton, Skeleton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        {Number.isFinite(annualRoi) ? (\r\n          <AnnualRoiContainer\r\n            alignItems=\"center\"\r\n            onClick={() => {\r\n              setShowRoiCalculator(true)\r\n            }}\r\n          >\r\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n            <IconButton variant=\"text\" scale=\"sm\">\r\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n            </IconButton>\r\n          </AnnualRoiContainer>\r\n        ) : (\r\n          <Skeleton width={60} />\r\n        )}\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {pendingTx ? t('Harvesting') : t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`/info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: string\r\n  quoteTokenAddress?: string\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {pendingTx ? t('Harvesting') : t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake')}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `/info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n  scroll-margin-top: 64px;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container id=\"farms-table\">\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from 'state/user/actions'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\r\nimport { ViewMode } from 'state/user/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle\r\n                id=\"staked-only-farms\"\r\n                checked={stakedOnly}\r\n                onChange={() => setStakedOnly(!stakedOnly)}\r\n                scale=\"sm\"\r\n              />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={observerRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\nimport { PageHeaderProps } from './types'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n"],"sourceRoot":""}
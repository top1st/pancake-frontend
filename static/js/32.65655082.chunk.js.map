{"version":3,"sources":["components/Loading.tsx","views/Predictions/components/History/Header.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/components/Container.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/v1/helpers.ts","views/Predictions/components/v1/NothingToClaimModal.tsx","views/Predictions/components/v1/V1ClaimCheck.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/index.tsx","state/predictions/hooks.ts","utils/getTimePeriods.ts"],"names":["Loading","styled","div","HistoryTabs","Ul","ul","theme","colors","textSubtle","ChartDisclaimer","onDismiss","useUserPredictionChartDisclaimerShow","showDisclaimer","setShowDisclaimer","t","useTranslation","minWidth","p","maxWidth","justifyContent","mb","src","width","height","as","size","fontSize","color","href","external","onClick","htmlFor","style","display","cursor","marginBottom","alignItems","flex","id","scale","checked","onChange","ml","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","useState","isOpen","setIsOpen","ref","useRef","timer","account","useWeb3React","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","dispatch","useAppDispatch","useEffect","isCancelled","current","setInterval","a","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","clearInterval","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","mr","setHistoryPaneState","variant","Container","gradients","violetAlt","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","onSuccess","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","title","maxHeight","overflowY","disabled","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","TradingView","symbol","CardWrapper","BunnyDecoration","Notification","alt","ErrorNotification","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","callWithGasPrice","useCallWithGasPrice","predictionsContract","usePredictionsContract","bnbBusdPrice","useBNBBusdPrice","isLoadingHistory","useGetIsFetchingHistory","history","useGetHistory","reduce","accum","betPayout","REWARD_RATE","epochs","epoch","calculateClaimableRounds","totalBnb","multiplyPriceByAmount","fetchNodeHistory","handleClick","tx","wait","receipt","markAsCollected","Toast","txHash","transactionHash","console","error","data","message","mt","mx","textAlign","toFixed","rounds","join","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","ReclaimPositionButton","handleReclaim","status","MIN_PRICE_USD_DISPLAYED","BigNumber","from","MIN_PRICE_BNB_DISPLAYED","formatPriceDifference","price","minPriceDisplayed","unitPrefix","decimals","sign","isNegative","abs","lt","signedPriceToFormat","mul","formatBigNumberToFixed","formatUsdv2","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","seconds","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierV2","ethers","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPriceDifference","lockPrice","sub","getRoundPosition","closePrice","HOUSE","gt","BEAR","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","textTransform","PositionTag","betPosition","isUpPosition","useTooltip","bold","placement","targetRef","tooltip","tooltipVisible","fontWeight","getPrizePoolAmount","Row","PrizePoolRow","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","failure","textDisabled","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundPrice","priceDifference","getTextColor","my","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","isPositionUp","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","ledger","fetchRefundableStatus","StyledBetResult","Divider","hr","BetResult","result","canClaim","useGetIsClaimable","fee","isWinner","Result","WIN","totalPayout","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchLedgerData","getHeaderText","getHeaderIcon","claimedHash","getBscScanLink","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","closeBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","Filter","label","StyledHeader","ButtonMenuContainer","Header","activeTab","setActiveTab","historyFilter","useGetHistoryFilter","isFetchingHistory","handleChange","newFilter","setHistoryFilter","switchTab","tabIndex","HistoryFilter","ALL","activeIndex","onItemClick","ROUNDS","COLLECTED","UNCOLLECTED","getV1History","skip","where","request","GRAPH_API_PREDICTION_V1","gql","response","getAllV1History","Promise","resolve","reject","getHistoryChunk","betHistory","flatten","Object","values","isFetching","setIsFetching","setHistory","fetchAllHistory","header","rows","hash","totalBets","anchor","document","createElement","blob","Blob","type","URL","createObjectURL","target","download","body","appendChild","click","removeChild","StyledClaimCheck","ClaimCheck","NothingToClaimModal","onPresentNothingToClaimModal","RoundsTab","hasBetHistory","hasHistoryLoaded","useGetHasHistoryLoaded","currentHistoryPage","useGetCurrentHistoryPage","V1ClaimCheck","orderBy","map","page","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","amountInUsd","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","netResultInUsd","avgBnbWonInUsd","betRoundInUsd","avgPositionEnteredInUsd","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","results","getFilteredBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","fill","useTheme","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","EnteredTag","whiteSpace","outline","ArrowWrapper","Content","EnteredTagWrapper","fallback","isDisabled","isHouse","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","StyledExpiredRoundCard","Card","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","bufferSeconds","useGetBufferSeconds","hasRoundFailed","RoundProgress","lockTimestamp","startMs","endMs","rawProgress","progress","primaryStep","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","priceAsNumber","parseFloat","useCountUp","start","end","duration","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","maxBalance","useMemo","balanceDisplay","formatBigNumber","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","mulUnsafe","formatFixedNumber","minBetAmountBalance","lte","key","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","toUnsafeFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","className","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","getNow","Math","floor","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","useCallback","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","intervalSeconds","useGetIntervalSeconds","startTimestamp","countdown","RoundCard","useGetBetByEpoch","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","ClosingTitle","sm","Price","Interval","Label","shadows","level1","dir","radii","PricePairLabel","TimerLabel","interval","unit","currentRoundLockTimestamp","useGetCurrentRoundLockTimestamp","pr","StyledPrevNextNav","default","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","LeaderboardButtonWrapper","ButtonWrapper","Menu","rel","Link","to","order","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","overflow","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","useGetLatestOraclePrice","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","contract","getChainlinkOracleContract","latestAnswer","fetchPrice","usePollOraclePrice","setLastOraclePrice","toJSON","usePollPredictions","earliestEpoch","useGetEarliestEpoch","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","Predictions","isDesktop","useMatchBreakpoints","useUserPredictionAcceptedRisk","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","PageLoader","Page","useGetRounds","useSelector","predictions","keys","parseBigNumberObj","roundData","ledgers","claimableStatuses","earliestRound","minBy","lastOraclePrice","currentRound","useGetCurrentRound","useGetLeaderboardLoadingState","leaderboard","loadingState","useGetLeaderboardResults","useGetLeaderboardFilters","filters","useGetLeaderboardSkip","useGetLeaderboardHasMoreResults","hasMoreResults","useGetOrFetchLeaderboardAddressResult","addressResult","addressResults","useGetAddressResult","address","isAddress","fetchAddressResult","useGetSelectedAddress","selectedAddress","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","delta","timeLeft","years","months","days"],"mappings":"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","file":"static/js/32.65655082.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst Loading = styled.div`\r\n  border: 8px solid #f3f3f3;\r\n  border-radius: 50%;\r\n  border-top: 8px solid #ddd;\r\n  border-bottom: 8px solid #ddd;\r\n  width: 20px;\r\n  height: 20px;\r\n  -webkit-animation: spin 2s linear infinite;\r\n  animation: spin 2s linear infinite;\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  margin-bottom: 16px;\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  InjectedModalProps,\r\n  LinkExternal,\r\n  Flex,\r\n  Image,\r\n  Heading,\r\n  Checkbox,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useUserPredictionChartDisclaimerShow } from 'state/user/hooks'\r\n\r\nconst Ul = styled.ul`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  list-style-position: outside;\r\n  margin-left: 16px;\r\n\r\n  & > li {\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n  }\r\n`\r\n\r\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\r\n  const [showDisclaimer, setShowDisclaimer] = useUserPredictionChartDisclaimerShow()\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Flex justifyContent=\"center\" mb=\"32px\">\r\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\r\n        </Flex>\r\n        <Heading as=\"h3\" size=\"sm\">\r\n          {t('Warning')}:\r\n        </Heading>\r\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\r\n          {t('Prices shown on cards and charts are different')}:\r\n        </Heading>\r\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('The price you see come from difference places')}:\r\n        </Text>\r\n        <Ul>\r\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\r\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\r\n        </Ul>\r\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\r\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\r\n        </Text>\r\n        <LinkExternal\r\n          href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n          external\r\n          mb=\"24px\"\r\n        >\r\n          {t('Learn More')}\r\n        </LinkExternal>\r\n        <Box>\r\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n            {t('I understand')}\r\n          </Button>\r\n        </Box>\r\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n          <Flex alignItems=\"center\">\r\n            <div style={{ flex: 'none' }}>\r\n              <Checkbox\r\n                id=\"checkbox\"\r\n                scale=\"sm\"\r\n                checked={!showDisclaimer}\r\n                onChange={() => setShowDisclaimer(!showDisclaimer)}\r\n              />\r\n            </div>\r\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\r\n          </Flex>\r\n        </label>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 100px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\" id=\"predictions-risk-disclaimer\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label\r\n            htmlFor=\"responsibility-checkbox\"\r\n            style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}\r\n          >\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox\r\n                  id=\"responsibility-checkbox\"\r\n                  scale=\"sm\"\r\n                  checked={acknowledgeRisk}\r\n                  onChange={handleSetAcknowledgeRisk}\r\n                />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"beta-checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"beta-checkbox\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button\r\n          id=\"prediction-disclaimer-continue\"\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!acknowledgeRisk || !acknowledgeBeta}\r\n        >\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import TradingViewChart from 'components/TradingView'\r\nimport React from 'react'\r\n\r\nconst TRADING_VIEW_COMPONENT_ID = 'tradingview_b239c'\r\n\r\nconst TradingView = () => {\r\n  return <TradingViewChart id={TRADING_VIEW_COMPONENT_ID} symbol=\"BINANCE:BNBUSDT\" />\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  ModalCloseButton,\r\n  Skeleton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { fetchNodeHistory, markAsCollected } from 'state/predictions'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useGetHistory, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { getPayout } from './History/helpers'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\ninterface ClaimableRounds {\r\n  epochs: number[]\r\n  total: number\r\n}\r\n\r\nconst calculateClaimableRounds = (history): ClaimableRounds => {\r\n  if (!history) {\r\n    return { epochs: [], total: 0 }\r\n  }\r\n\r\n  return history.reduce(\r\n    (accum: ClaimableRounds, bet: Bet) => {\r\n      if (!bet.claimed && bet.position === bet.round.position) {\r\n        const betPayout = getPayout(bet, REWARD_RATE)\r\n        return {\r\n          ...accum,\r\n          epochs: [...accum.epochs, bet.round.epoch],\r\n          total: accum.total + betPayout,\r\n        }\r\n      }\r\n\r\n      return accum\r\n    },\r\n    { epochs: [], total: 0 },\r\n  )\r\n}\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({ onDismiss, onSuccess }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const dispatch = useAppDispatch()\r\n  const isLoadingHistory = useGetIsFetchingHistory()\r\n  const history = useGetHistory()\r\n\r\n  const { epochs, total } = calculateClaimableRounds(history)\r\n  const totalBnb = multiplyPriceByAmount(bnbBusdPrice, total)\r\n\r\n  useEffect(() => {\r\n    // Fetch history if they have not opened the history pane yet\r\n    if (history.length === 0) {\r\n      dispatch(fetchNodeHistory({ account }))\r\n    }\r\n  }, [account, history, dispatch])\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [epochs])\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      // Immediately mark rounds as claimed\r\n      dispatch(\r\n        markAsCollected(\r\n          epochs.reduce((accum, epoch) => {\r\n            return { ...accum, [epoch]: true }\r\n          }, {}),\r\n        ),\r\n      )\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n          {t('Your prizes have been sent to your wallet')}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      console.error('Unable to claim winnings', error)\r\n      toastError(\r\n        t('Error'),\r\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Collecting')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${formatNumber(total, 0, 4)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${totalBnb.toFixed(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"center\" mb=\"24px\">\r\n          {isLoadingHistory ? (\r\n            <Skeleton height=\"21\" width=\"140px\" />\r\n          ) : (\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {epochs.length === 1\r\n                ? t('From round %round%', { round: epochs[0] })\r\n                : t('From rounds %rounds%', { rounds: epochs.join(', ') })}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx || isLoadingHistory}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({ hasClaimed, onSuccess, children, ...props }) => {\r\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal onSuccess={onSuccess} />, false)\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import { BigNumber, ethers } from 'ethers'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nconst MIN_PRICE_USD_DISPLAYED = BigNumber.from(100000)\r\nconst MIN_PRICE_BNB_DISPLAYED = BigNumber.from('1000000000000000')\r\nconst DISPLAYED_DECIMALS = 3\r\n\r\ntype formatPriceDifferenceProps = {\r\n  price?: BigNumber\r\n  minPriceDisplayed: BigNumber\r\n  unitPrefix: string\r\n  decimals: number\r\n}\r\n\r\nconst formatPriceDifference = ({\r\n  price = BigNumber.from(0),\r\n  minPriceDisplayed,\r\n  unitPrefix,\r\n  decimals,\r\n}: formatPriceDifferenceProps) => {\r\n  const sign = price.isNegative() ? BigNumber.from(-1) : BigNumber.from(1)\r\n\r\n  if (price.abs().lt(minPriceDisplayed)) {\r\n    const signedPriceToFormat = minPriceDisplayed.mul(sign)\r\n    return `<${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`\r\n  }\r\n\r\n  return `${unitPrefix}${formatBigNumberToFixed(price, DISPLAYED_DECIMALS, decimals)}`\r\n}\r\n\r\nexport const formatUsdv2 = (usd: BigNumber) => {\r\n  return formatPriceDifference({ price: usd, minPriceDisplayed: MIN_PRICE_USD_DISPLAYED, unitPrefix: '$', decimals: 8 })\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: BigNumber) => {\r\n  return formatPriceDifference({ price: bnb, minPriceDisplayed: MIN_PRICE_BNB_DISPLAYED, unitPrefix: '', decimals: 18 })\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\r\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\r\n  const now = Date.now()\r\n\r\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const getMultiplierV2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n\r\nexport const getRoundPosition = (lockPrice: ethers.BigNumber, closePrice: ethers.BigNumber) => {\r\n  if (!closePrice) {\r\n    return null\r\n  }\r\n\r\n  if (closePrice.eq(lockPrice)) {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n  Flex,\r\n  FlexProps,\r\n  Text,\r\n  useTooltip,\r\n  TooltipText,\r\n  InfoIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Neither side wins this round')}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly CAKE burn.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'right' },\r\n  )\r\n\r\n  if (betPosition === BetPosition.HOUSE) {\r\n    return (\r\n      <>\r\n        {tooltipVisible && tooltip}\r\n        <TooltipText ref={targetRef} color=\"secondary\" fontWeight=\"300\" textTransform=\"uppercase\">\r\n          <Flex alignItems=\"center\">\r\n            {t('To Burn')}\r\n            <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\r\n          </Flex>\r\n        </TooltipText>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { Box, Flex, FlexProps, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, NodeRound, Round } from 'state/types'\r\nimport { formatUsdv2, formatBnbv2, getRoundPosition, getPriceDifference } from '../../helpers'\r\nimport { formatBnb, formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: NodeRound['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnbv2(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: NodeRound['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  switch (betPosition) {\r\n    case BetPosition.BULL:\r\n      return theme.colors.success\r\n    case BetPosition.BEAR:\r\n      return theme.colors.failure\r\n    case BetPosition.HOUSE:\r\n      return theme.colors.textDisabled\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n\r\ninterface RoundPriceProps {\r\n  lockPrice: ethers.BigNumber\r\n  closePrice: ethers.BigNumber\r\n}\r\n\r\nexport const RoundPrice: React.FC<RoundPriceProps> = ({ lockPrice, closePrice }) => {\r\n  const betPosition = getRoundPosition(lockPrice, closePrice)\r\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\r\n\r\n  const getTextColor = () => {\r\n    switch (betPosition) {\r\n      case BetPosition.BULL:\r\n        return 'success'\r\n      case BetPosition.BEAR:\r\n        return 'failure'\r\n      case BetPosition.HOUSE:\r\n      default:\r\n        return 'textDisabled'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n      {closePrice ? (\r\n        <Text color={getTextColor()} bold fontSize=\"24px\">\r\n          {formatUsdv2(closePrice)}\r\n        </Text>\r\n      ) : (\r\n        <Skeleton height=\"34px\" my=\"1px\" />\r\n      )}\r\n      <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\r\n    </Flex>\r\n  )\r\n}\r\n\r\n/**\r\n * TODO: Remove\r\n *\r\n * This is a temporary function until we consolidate the data coming from the graph versus the node\r\n */\r\ninterface PrizePoolHistoryRowProps extends FlexProps {\r\n  totalAmount: number\r\n}\r\n\r\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceHistoryRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n/**\r\n * END TEMPORARY COMPONENTS\r\n */\r\n","import React from 'react'\r\nimport { BoxProps, Text } from '@pancakeswap/uikit'\r\nimport { NodeRound } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundPosition } from '../../helpers'\r\nimport { LockPriceRow, PrizePoolRow, RoundPrice, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: NodeRound\r\n  hasFailed?: boolean\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = getRoundPosition(lockPrice, closePrice)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {hasFailed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <RoundPrice lockPrice={lockPrice} closePrice={closePrice} />\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\r\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const refundable = await predictionsContract.refundable(epoch, account)\r\n\r\n      if (refundable) {\r\n        // Double check they have not already claimed\r\n        const ledger = await predictionsContract.ledger(epoch, account)\r\n        setIsRefundable(ledger.claimed === false)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { useGetIsClaimable } from 'state/predictions/hooks'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { getBscScanLink } from 'utils'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst Divider = styled.hr`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const canClaim = useGetIsClaimable(bet.round.epoch)\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  const isWinner = result === Result.WIN\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\r\n  const totalPayout = multiplyPriceByAmount(bnbBusdPrice, payout)\r\n  const returned = payout + bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      case Result.HOUSE:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      case Result.HOUSE:\r\n        return t('To Burn')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      case Result.HOUSE:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton hasClaimed={!canClaim} width=\"100%\" mb=\"16px\" onSuccess={handleSuccess}>\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && bet.claimedHash && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}:</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${totalPayout.toFixed(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        {isWinner && (\r\n          <>\r\n            <Divider />\r\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('Amount to collect')}:\r\n              </Text>\r\n              <Flex justifyContent=\"end\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\r\n                </span>\r\n              </Flex>\r\n              {tooltipVisible && tooltip}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\nimport { getMultiplier } from './helpers'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResultHistory round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResultHistory>\r\n      {bet.round.lockBlock && (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Opening Block')}</Text>\r\n          <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\r\n            {bet.round.lockBlock}\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n      {bet.round.closeBlock && (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Text>{t('Closing Block')}</Text>\r\n          <Link href={getBscScanLink(bet.round.closeBlock, 'block')} external>\r\n            {bet.round.closeBlock}\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  InfoIcon,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  useTooltip,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { useGetCurrentEpoch, useGetIsClaimable, useGetPredictionsStatus } from 'state/predictions/hooks'\r\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Neither side wins this round')}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly CAKE burn.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'right' },\r\n  )\r\n\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const canClaim = useGetIsClaimable(bet.round.epoch)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      case Result.HOUSE:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? (\r\n            t('Canceled')\r\n          ) : roundResult === Result.HOUSE ? (\r\n            <>\r\n              {tooltipVisible && tooltip}\r\n              <Flex alignItems=\"center\" ref={targetRef}>\r\n                {t('To Burn')}\r\n                <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\r\n              </Flex>\r\n            </>\r\n          ) : (\r\n            `${resultTextPrefix}${formatBnb(payout)}`\r\n          )}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton hasClaimed={!canClaim} onSuccess={handleSuccess} scale=\"sm\" mr=\"8px\">\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import request, { gql } from 'graphql-request'\r\nimport flatten from 'lodash/flatten'\r\nimport { GRAPH_API_PREDICTION_V1 } from 'config/constants/endpoints'\r\n\r\nexport const getV1History = async (skip = 0, where = {}): Promise<Record<string, any>[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION_V1,\r\n    gql`\r\n      query getV1BetHistory($skip: Int!, $where: Bet_filter) {\r\n        bets(first: 1000, skip: $skip, where: $where, orderBy: createdAt, orderDirection: desc) {\r\n          hash\r\n          amount\r\n          position\r\n          claimed\r\n          claimedAmount\r\n          claimedHash\r\n          round {\r\n            epoch\r\n            position\r\n            failed\r\n            totalAmount\r\n            lockPrice\r\n            closePrice\r\n            totalBets\r\n            totalAmount\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getAllV1History = (where = {}): Promise<Record<string, any>[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const bets = {}\r\n\r\n    const getHistoryChunk = async (skip: number) => {\r\n      try {\r\n        const betHistory = await getV1History(skip, where)\r\n        bets[skip] = betHistory\r\n\r\n        if (betHistory.length === 0) {\r\n          resolve(flatten(Object.values(bets)))\r\n        } else {\r\n          getHistoryChunk(skip + 1000)\r\n        }\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    getHistoryChunk(0)\r\n  })\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Text,\r\n  Heading,\r\n  ModalCloseButton,\r\n  Button,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getAllV1History } from './helpers'\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const [history, setHistory] = useState([])\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    const header = [\r\n      'Round',\r\n      'Result',\r\n      'Your Position',\r\n      'Bet Amount',\r\n      'Transaction',\r\n      'Claimed Transaction',\r\n      'Lock Price',\r\n      'Close Price',\r\n      'Total Bets',\r\n      'Total Amount',\r\n      'Round Failed',\r\n    ].join(',')\r\n\r\n    const rows = history.reduce((accum, bet) => {\r\n      return [\r\n        ...accum,\r\n        [\r\n          bet.round.epoch,\r\n          bet.round.position,\r\n          bet.position,\r\n          bet.amount,\r\n          bet.hash,\r\n          bet.claimedHash || '',\r\n          bet.round.lockPrice,\r\n          bet.round.closePrice,\r\n          bet.round.totalBets,\r\n          bet.round.totalAmount,\r\n          bet.round.failed,\r\n        ].join(','),\r\n      ]\r\n    }, [])\r\n\r\n    const anchor = document.createElement('a')\r\n    const blob = new Blob([`${header}\\n${rows.join('\\n')}`], {\r\n      type: 'text/csv;charset=utf-8;',\r\n    })\r\n\r\n    anchor.href = URL.createObjectURL(blob)\r\n    anchor.target = '_blank'\r\n    anchor.download = 'pancakeswap-prediction-v1-history.csv'\r\n\r\n    document.body.appendChild(anchor)\r\n    anchor.click()\r\n    document.body.removeChild(anchor)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchAllHistory = async () => {\r\n      setIsFetching(true)\r\n\r\n      try {\r\n        const response = await getAllV1History({ user: account.toLowerCase() })\r\n        setHistory(response)\r\n      } catch (error) {\r\n        console.error('Unable to fetch history', error)\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllHistory()\r\n    }\r\n  }, [account, setHistory, setIsFetching])\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Nothing to Collect')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <Text as=\"p\" fontSize=\"14px\">\r\n          {t('You have no unclaimed v0.1 prizes.')}\r\n        </Text>\r\n        <Text as=\"p\" fontSize=\"14px\" mb=\"24px\">\r\n          {t('Download your v0.1 Prediction history below.')}\r\n        </Text>\r\n        <Button\r\n          onClick={handleClick}\r\n          isLoading={isFetching}\r\n          endIcon={isFetching ? <AutoRenewIcon spin width=\"24px\" color=\"white\" /> : null}\r\n        >\r\n          {t('Download .CSV')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Box, Flex, Text, ChevronRightIcon, useModal } from '@pancakeswap/uikit'\r\nimport Loading from 'components/Loading'\r\nimport CollectRoundWinningsModal from '../CollectRoundWinningsModal'\r\nimport { getAllV1History } from './helpers'\r\nimport NothingToClaimModal from './NothingToClaimModal'\r\n\r\nconst StyledClaimCheck = styled(Flex)`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n  justify-content: space-between;\r\n  padding: 16px;\r\n`\r\n\r\nconst ClaimCheck = () => {\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal />, false)\r\n\r\n  const [onPresentNothingToClaimModal] = useModal(<NothingToClaimModal />)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      setIsFetching(true)\r\n      const betHistory = await getAllV1History({ user: account.toLowerCase(), claimed: false })\r\n\r\n      // Filter out bets that can be claimed\r\n      const unclaimedBets = betHistory.filter((bet) => {\r\n        return bet.round.position === bet.position || bet.round.failed === true\r\n      })\r\n\r\n      if (unclaimedBets.length > 0) {\r\n        onPresentCollectWinningsModal()\r\n      } else {\r\n        onPresentNothingToClaimModal()\r\n      }\r\n    } catch (error) {\r\n      console.error('Unable to check v1 history', error)\r\n    } finally {\r\n      setIsFetching(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledClaimCheck onClick={account ? handleClick : undefined}>\r\n      <Box style={{ flex: 1 }}>\r\n        <Text>{t('Showing history for Prediction v0.2')}</Text>\r\n        <Flex alignItems=\"center\">\r\n          <Text color=\"primary\">{t('Check for unclaimed v0.1 winnings')}</Text>\r\n          <ChevronRightIcon color=\"primary\" width=\"24px\" />\r\n        </Flex>\r\n      </Box>\r\n      {isFetching && (\r\n        <Box px=\"16px\">\r\n          <Loading />\r\n        </Box>\r\n      )}\r\n    </StyledClaimCheck>\r\n  )\r\n}\r\n\r\nexport default ClaimCheck\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Button, Flex, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet } from 'state/types'\r\nimport { fetchNodeHistory } from 'state/predictions'\r\nimport { useGetCurrentHistoryPage, useGetHasHistoryLoaded, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport HistoricalBet from './HistoricalBet'\r\nimport V1ClaimCheck from '../v1/V1ClaimCheck'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const hasHistoryLoaded = useGetHasHistoryLoaded()\r\n  const currentHistoryPage = useGetCurrentHistoryPage()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n\r\n  const handleClick = () => {\r\n    dispatch(fetchNodeHistory({ account, page: currentHistoryPage + 1 }))\r\n  }\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      <V1ClaimCheck />\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.round.epoch} bet={bet} />\r\n      ))}\r\n      {hasBetHistory && !hasHistoryLoaded && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"24px\">\r\n          <Button variant=\"secondary\" scale=\"sm\" onClick={handleClick} disabled={isFetchingHistory}>\r\n            {t('View More')}\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <>\r\n      <V1ClaimCheck />\r\n      <Box p=\"24px\">\r\n        <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n          {t('No prediction history available')}\r\n        </Heading>\r\n        <Text as=\"p\" textAlign=\"center\">\r\n          {t(\r\n            'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n          )}\r\n        </Text>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n  const amountInUsd = multiplyPriceByAmount(bnbBusdPrice, displayAmount)\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${amountInUsd.toFixed(2)}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { getBscScanLink } from 'utils'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet, REWARD_RATE)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.epoch.toString(), payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE || roundResult === Result.HOUSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  const netResultInUsd = multiplyPriceByAmount(bnbBusdPrice, netResultAmount)\r\n  const avgBnbWonInUsd = multiplyPriceByAmount(bnbBusdPrice, avgBnbWonPerRound)\r\n  const betRoundInUsd = multiplyPriceByAmount(bnbBusdPrice, summary.won.bestRound.payout)\r\n  const avgPositionEnteredInUsd = multiplyPriceByAmount(bnbBusdPrice, avgPositionEntered)\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${netResultInUsd.toFixed(2)}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${avgBnbWonInUsd.toFixed(2)}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${betRoundInUsd.toFixed(2)}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${avgPositionEnteredInUsd.toFixed(2)}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchNodeHistory } from 'state/predictions'\r\nimport { getFilteredBets } from 'state/predictions/helpers'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetCurrentHistoryPage,\r\n  useGetHistory,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/predictions/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const currentHistoryPage = useGetCurrentHistoryPage()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistory()\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchNodeHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  const results = getFilteredBets(bets, historyFilter)\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <ConnectWalletButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory && currentHistoryPage === 1 ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnbv2 } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: ethers.BigNumber\r\n  hasClaimed?: boolean\r\n}\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <Tag\r\n          variant=\"secondary\"\r\n          fontWeight=\"bold\"\r\n          textTransform=\"uppercase\"\r\n          outline={!hasClaimed}\r\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\r\n        >\r\n          {hasClaimed ? t('Claimed') : t('Entered')}\r\n        </Tag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: ethers.BigNumber\r\n  multiplier?: string\r\n  hasEntered?: boolean\r\n  hasClaimed?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n  isHouse?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean, isHouse: boolean) => {\r\n    if (isDisabled || isHouse) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  hasClaimed = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n  isHouse = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled, isHouse)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled, isHouse)\r\n  const textColor = getTextColor()(isActive, isDisabled, isHouse)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box mt=\"-1px\" position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"-1px\" position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst HEADER_HEIGHT = '37px'\r\n\r\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\r\n// that header is overlapping the 1px card border.\r\n// 'live' is not included into the switch case because it has isActive border style\r\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\r\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\r\n  switch (status) {\r\n    case 'calculating':\r\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\r\n    case 'canceled':\r\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\r\n    case 'next':\r\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: ${HEADER_HEIGHT};\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useGetIsClaimable } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  epoch: number\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({ epoch, isBottom = false, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const isClaimable = useGetIsClaimable(epoch)\r\n\r\n  if (!isClaimable) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch } = round\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: NodeRound\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\r\nimport { useGetBufferSeconds } from 'state/predictions/hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { getHasRoundFailed, getRoundPosition } from '../../helpers'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  hasClaimedUp: boolean\r\n  hasClaimedDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  hasClaimedUp,\r\n  hasClaimedDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { epoch, lockPrice, closePrice } = round\r\n  const betPosition = getRoundPosition(lockPrice, closePrice)\r\n  const bufferSeconds = useGetBufferSeconds()\r\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (!closePrice) {\r\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard borderBackground={getBorderBackground(theme, 'expired')}>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n            hasClaimed={hasClaimedUp}\r\n            isHouse={betPosition === BetPosition.HOUSE}\r\n          />\r\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            hasClaimed={hasClaimedDown}\r\n            isHouse={betPosition === BetPosition.HOUSE}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay epoch={epoch} isBottom={hasEnteredDown} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\n\r\ninterface RoundProgressProps extends ProgressProps {\r\n  lockTimestamp: number\r\n  closeTimestamp: number\r\n}\r\n\r\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\r\n  const startMs = lockTimestamp * 1000\r\n  const endMs = closeTimestamp * 1000\r\n  const now = Date.now()\r\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default RoundProgress\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  PlayCircleOutlineIcon,\r\n  Skeleton,\r\n  Text,\r\n  TooltipText,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\r\nimport RoundProgress from 'components/RoundProgress'\r\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader from './CardHeader'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\r\n  const price = useGetLastOraclePrice()\r\n  const bufferSeconds = useGetBufferSeconds()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\r\n\r\n  const now = Date.now()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (now > closeTimestamp * 1000) {\r\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\r\n  }\r\n\r\n  return (\r\n    <Card isActive>\r\n      <CardHeader\r\n        status=\"live\"\r\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n        title={t('Live')}\r\n        epoch={round.epoch}\r\n      />\r\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow\r\n          betAmount={betAmount}\r\n          multiplier={bullMultiplier}\r\n          hasEntered={hasEnteredUp}\r\n          isActive={isBull}\r\n        />\r\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n            {t('Last Price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n            <div ref={targetRef}>\r\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n              </TooltipText>\r\n            </div>\r\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n              {formatUsdv2(priceDifference)}\r\n            </PositionTag>\r\n          </Flex>\r\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n          <PrizePoolRow totalAmount={totalAmount} />\r\n        </RoundResultBox>\r\n        <MultiplierArrow\r\n          betAmount={betAmount}\r\n          multiplier={bearMultiplier}\r\n          betPosition={BetPosition.BEAR}\r\n          hasEntered={hasEnteredDown}\r\n          isActive={!isBull}\r\n        />\r\n      </CardBody>\r\n      {tooltipVisible && tooltip}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { BetPosition } from 'state/types'\r\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport PositionTag from '../PositionTag'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  epoch: number\r\n  onBack: () => void\r\n  onSuccess: (hash: string) => Promise<void>\r\n}\r\n\r\nconst dust = parseUnits('0.01', 18)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (\r\n  value: ethers.BigNumber,\r\n  bnbBalance: ethers.BigNumber,\r\n  minBetAmountBalance: ethers.BigNumber,\r\n) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0)) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst getValueAsEthersBn = (value: string) => {\r\n  const valueAsFloat = parseFloat(value)\r\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  const maxBalance = useMemo(() => {\r\n    return bnbBalance.gt(dust) ? bnbBalance.sub(dust) : dust\r\n  }, [bnbBalance])\r\n  const balanceDisplay = formatBigNumber(bnbBalance)\r\n\r\n  const valueAsBn = getValueAsEthersBn(value)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const handleInputChange = (input: string) => {\r\n    const inputAsBn = getValueAsEthersBn(input)\r\n\r\n    if (inputAsBn.eq(0)) {\r\n      setPercent(0)\r\n    } else {\r\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\r\n      const percentageAsFloat = percentage.toUnsafeFloat()\r\n\r\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\r\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\r\n      setValue(formatFixedNumber(balancePercentage))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\r\n\r\n  const handleEnterPosition = async () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n\r\n    try {\r\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\r\n      setIsTxPending(true)\r\n      const receipt = await tx.wait()\r\n      onSuccess(receipt.transactionHash)\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsTxPending(false)\r\n    }\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const inputAmount = getValueAsEthersBn(value)\r\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\r\n          step={0.01}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <ConnectWalletButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  PlayCircleOutlineIcon,\r\n  Button,\r\n  useTooltip,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { fetchLedgerData } from 'state/predictions'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport useToast from 'hooks/useToast'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  const getHasEnteredPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getHasEnteredPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async (hash: string) => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      <ToastDescriptionWithTx txHash={hash}>\r\n        {t('%position% position entered', {\r\n          position: positionDisplay,\r\n        })}\r\n      </ToastDescriptionWithTx>,\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n        epoch={round.epoch}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\n\r\nconst getNow = () => Math.floor(Date.now() / 1000)\r\n\r\n/**\r\n * Consider this moving up to the global level\r\n */\r\nconst useCountdown = (timestamp: number) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\r\n    return timestamp - getNow()\r\n  })\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\r\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\r\n\r\n  useEffect(() => {\r\n    let timer: ReturnType<typeof setTimeout>\r\n\r\n    if (!isPaused && secondsRemaining > 0) {\r\n      timer = setTimeout(() => {\r\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\r\n      }, 1000)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }\r\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\r\n\r\n  useEffect(() => {\r\n    setSecondsRemaining(timestamp - getNow())\r\n  }, [timestamp, setSecondsRemaining])\r\n\r\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\r\n  useEffect(() => {\r\n    if (isWindowVisible) {\r\n      setSecondsRemaining(timestamp - getNow())\r\n      unpause()\r\n    } else {\r\n      pause()\r\n    }\r\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\r\n\r\n  return { secondsRemaining, pause, unpause }\r\n}\r\n\r\nexport default useCountdown\r\n","import React from 'react'\r\nimport { Card, CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useCountdown from '../../hooks/useCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\r\n  const countdown = formatRoundTime(secondsRemaining)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\r\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"21px\" />} title={t('Later')} epoch={round.epoch} />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { getMultiplierV2 } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\r\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\r\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\r\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\r\n\r\n  const bullMultiplier = getMultiplierV2(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplierV2(totalAmount, bearAmount)\r\n\r\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\r\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={ledger?.amount}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedBearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={ledger?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedBearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      hasClaimedDown={hasClaimedDown}\r\n      hasClaimedUp={hasClaimedUp}\r\n      betAmount={ledger?.amount}\r\n      bullMultiplier={formattedBullMultiplier}\r\n      bearMultiplier={formattedBearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useCountdown from '../hooks/useCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst ClosingTitle = styled(Text)`\r\n  font-size: 9px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 16px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 70px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  box-shadow: ${({ theme }) => theme.shadows.level1};\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: ${({ theme }) => theme.radii.card};\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\r\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\r\n  const countdown = formatRoundTime(secondsRemaining)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        {secondsRemaining !== 0 ? (\r\n          <Title bold color=\"secondary\">\r\n            {countdown}\r\n          </Title>\r\n        ) : (\r\n          <ClosingTitle bold color=\"secondary\">\r\n            {t('Closing')}\r\n          </ClosingTitle>\r\n        )}\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Flex)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  box-shadow: ${({ theme }) => theme.shadows.level1};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  background-color: ${({ theme }) => theme.card.background};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton\r\n      id=\"prediction-history-button\"\r\n      variant=\"subtle\"\r\n      onClick={handleClick}\r\n      isLoading={isFetchingHistory}\r\n      disabled={!account}\r\n    >\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Flex, HelpIcon, Button, PrizeIcon } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 2px 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 3;\r\n  width: 100px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    order: 1;\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst LeaderboardButtonWrapper = styled.div`\r\n  display: block;\r\n\r\n  order: 2;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    order: 3;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: block;\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <Button\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n              width=\"48px\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </Button>\r\n          </HelpButtonWrapper>\r\n          <LeaderboardButtonWrapper>\r\n            <Button as={Link} variant=\"subtle\" to=\"/prediction/leaderboard\" width=\"48px\">\r\n              <PrizeIcon color=\"white\" />\r\n            </Button>\r\n          </LeaderboardButtonWrapper>\r\n          <ButtonWrapper style={{ order: 4 }}>\r\n            <HistoryButton />\r\n          </ButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import { useEffect } from 'react'\r\nimport usePrevious from 'hooks/usePreviousValue'\r\nimport useSwiper from './useSwiper'\r\nimport { PageView } from '../types'\r\n\r\n/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */\r\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\r\n  const { swiper } = useSwiper()\r\n  const prevView = usePrevious(view)\r\n\r\n  useEffect(() => {\r\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\r\n      swiper.slideTo(liveSwiperIndex, 0.1)\r\n    }\r\n  }, [swiper, prevView, view, liveSwiperIndex])\r\n}\r\n\r\nexport default useOnViewChange\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\nimport useOnViewChange from './hooks/useOnViewChange'\r\nimport { PageView } from './types'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\r\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\r\n  const swiperIndex = rounds.indexOf(previousRound)\r\n\r\n  useOnNextRound()\r\n  useOnViewChange(swiperIndex, view)\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={swiperIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.epoch}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","export enum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: calc(100vh - 100px);\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const contract = getChainlinkOracleContract()\r\n      const response = await contract.latestAnswer()\r\n      setPrice(response)\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 10) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status !== PredictionStatus.INITIAL) {\r\n      timer.current = setInterval(async () => {\r\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\r\n\r\n        dispatch(fetchRounds(liveCurrentAndRecent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport { PageView } from './types'\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { PageMeta } from 'components/Layout/Page'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport React, { useEffect, useRef } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useInitialBlock } from 'state/block/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useUserPredictionAcceptedRisk, useUserPredictionChartDisclaimerShow } from 'state/user/hooks'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport Container from './components/Container'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Mobile from './Mobile'\r\n\r\nconst Predictions = () => {\r\n  const { isDesktop } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = useUserPredictionAcceptedRisk()\r\n  const [showDisclaimer] = useUserPredictionChartDisclaimerShow()\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (isChartPaneOpen && showDisclaimer) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen, showDisclaimer])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageMeta />\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\r\nimport { parseBigNumberObj } from './helpers'\r\nimport { fetchAddressResult } from '.'\r\n\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.intervalSeconds)\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetRounds()\r\n  return rounds[currentEpoch]\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetHasHistoryLoaded = () => {\r\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\r\n}\r\n\r\nexport const useGetCurrentHistoryPage = () => {\r\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetBufferSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.bufferSeconds)\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n/**\r\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\r\n */\r\nexport const useGetCurrentRoundLockTimestamp = () => {\r\n  const currentRound = useGetCurrentRound()\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n\r\n  if (!currentRound.lockTimestamp) {\r\n    return currentRound.startTimestamp + intervalSeconds\r\n  }\r\n\r\n  return currentRound.lockTimestamp\r\n}\r\n\r\n// Leaderboard\r\nexport const useGetLeaderboardLoadingState = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\r\n}\r\n\r\nexport const useGetLeaderboardResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.results)\r\n}\r\n\r\nexport const useGetLeaderboardFilters = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\r\n}\r\n\r\nexport const useGetLeaderboardSkip = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\r\n}\r\n\r\nexport const useGetLeaderboardHasMoreResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\r\n}\r\n\r\nexport const useGetAddressResult = (account: string) => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\r\n}\r\n\r\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\r\n  const addressResult = useGetAddressResult(account)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    const address = isAddress(account)\r\n\r\n    // If address result is null it means we already tried fetching the results and none came back\r\n    if (!addressResult && addressResult !== null && address) {\r\n      dispatch(fetchAddressResult(account))\r\n    }\r\n  }, [dispatch, account, addressResult])\r\n\r\n  return addressResult\r\n}\r\n\r\nexport const useGetSelectedAddress = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\r\n}\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","Number","isFinite","disabled","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","exact","activeClassName","p","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","renderContent","Loading","src","alt"],"mappings":"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","file":"static/js/37.fa8191c1.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getLiquidityUrlPathParts = ({\r\n  quoteTokenAddress,\r\n  tokenAddress,\r\n}: {\r\n  quoteTokenAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  const wBnbAddress = tokens.wbnb.address\r\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\r\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton, Skeleton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        {Number.isFinite(annualRoi) ? (\r\n          <AnnualRoiContainer\r\n            alignItems=\"center\"\r\n            onClick={() => {\r\n              setShowRoiCalculator(true)\r\n            }}\r\n          >\r\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n            <IconButton variant=\"text\" scale=\"sm\">\r\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n            </IconButton>\r\n          </AnnualRoiContainer>\r\n        ) : (\r\n          <Skeleton width={60} />\r\n        )}\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: '$MINTS' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {pendingTx ? t('Harvesting') : t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          $MINTS\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('$MINTS + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === '$MINTS'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`/info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: string\r\n  quoteTokenAddress?: string\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of $MINTS rewards each farm receives, as a proportion of the $MINTS produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 $MINTS per block, a 40x farm would receive 40 $MINTS per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          $MINTS\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: '$MINTS' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {pendingTx ? t('Harvesting') : t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake')}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `/info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n  scroll-margin-top: 64px;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container id=\"farms-table\">\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from 'state/user/actions'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\r\nimport { ViewMode } from 'state/user/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle\r\n                id=\"staked-only-farms\"\r\n                checked={stakedOnly}\r\n                onChange={() => setStakedOnly(!stakedOnly)}\r\n                scale=\"sm\"\r\n              />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={observerRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}